{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Unified Intent Mediator (UIM) Protocol","text":"<p>A standardized protocol for intent-based communication between AI agents and web services</p>"},{"location":"#what-is-the-uim-protocol","title":"What is the UIM Protocol?","text":"<p>The Unified Intent Mediator (UIM) Protocol defines a standardized framework for AI agents to interact with web services through well-defined intents, metadata, and execution methods. By introducing consistency and security in these interactions, UIM enhances efficiency, scalability, and reliability for AI-driven applications.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Intent-Based Communication: Standardized format for expressing user intents that can be understood by both AI agents and web services</li> <li>Secure Authentication: Robust authentication mechanisms using RSA key pairs for secure data transmission</li> <li>Service Discovery: Centralized discovery service that allows AI agents to find and interact with compatible web services</li> <li>Policy Management: System for defining and enforcing usage policies, permissions, and constraints</li> <li>Mock Implementations: Reference implementations (mock agent and webservice) to demonstrate the protocol in action</li> </ul>"},{"location":"#why-uim-protocol","title":"Why UIM Protocol?","text":"<p>As AI technology advances, there is a growing need for efficient, standardized interactions between AI agents and web services. Traditional methods such as web scraping and simulated user interactions are inefficient, unreliable, and often non-compliant with legal and ethical standards.</p> <p>The UIM Protocol addresses these challenges by providing a standardized, secure method for direct AI agent-web service interaction, enabling:</p> <ul> <li>Streamlined Interaction: Eliminates the need for simulated user actions</li> <li>Enhanced Functionality: Exposes a wide range of web service functionalities as intents</li> <li>New Revenue Streams: Allows service providers to monetize intent access/usage</li> <li>Improved Efficiency: Reduces task completion time and enhances user experience</li> <li>Robust Security: Incorporates encrypted communications and secure authentication</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Read the Specification to understand the protocol in detail</li> <li>Follow the Guides to implement the protocol in your applications</li> <li>Explore the Reference for technical details</li> <li>Check out the Prototypes to see the protocol in action</li> <li>Join the Community to contribute to the protocol's development</li> </ul>"},{"location":"#current-status","title":"Current Status","text":"<p>The UIM Protocol is currently in the draft proposal stage. We're inviting developers, AI providers, service operators, and tech/AI enthusiasts to review the specification, test the implementation, and share feedback.</p> Read the Specification Get Started"},{"location":"community/","title":"UIM Protocol Community","text":"<p>Welcome to the UIM Protocol Community section. This section provides information about how to get involved with the UIM Protocol project, contribute to its development, and connect with other community members.</p>"},{"location":"community/#community-resources","title":"Community Resources","text":"<ul> <li>Contributing: Guidelines for contributing to the UIM Protocol project</li> <li>Roadmap: The future development plans for the UIM Protocol</li> <li>FAQ: Frequently asked questions about the UIM Protocol</li> <li>Governance: Information about the governance model for the UIM Protocol</li> </ul>"},{"location":"community/#get-involved","title":"Get Involved","text":"<p>There are many ways to get involved with the UIM Protocol project:</p>"},{"location":"community/#join-the-discussion","title":"Join the Discussion","text":"<ul> <li>GitHub Discussions: Join the conversation on our GitHub Discussions page.</li> <li>Discord: Join our Discord server to chat with other community members and the development team.</li> <li>Twitter: Follow us on Twitter for updates and announcements.</li> </ul>"},{"location":"community/#contribute-to-the-project","title":"Contribute to the Project","text":"<ul> <li>Report Issues: Report bugs and suggest features on our GitHub Issues page.</li> <li>Submit Pull Requests: Contribute code, documentation, or examples by submitting pull requests.</li> <li>Review Pull Requests: Help review and improve pull requests from other contributors.</li> <li>Write Documentation: Help improve the documentation by submitting corrections or additions.</li> <li>Share Examples: Share examples of how you're using the UIM Protocol in your projects.</li> </ul>"},{"location":"community/#spread-the-word","title":"Spread the Word","text":"<ul> <li>Write Blog Posts: Share your experiences with the UIM Protocol on your blog or Medium.</li> <li>Give Talks: Present the UIM Protocol at conferences, meetups, or webinars.</li> <li>Share on Social Media: Share the UIM Protocol with your network on social media.</li> </ul>"},{"location":"community/#code-of-conduct","title":"Code of Conduct","text":"<p>We are committed to providing a welcoming and inclusive environment for all community members. We expect all community members to adhere to our Code of Conduct.</p>"},{"location":"community/#community-meetings","title":"Community Meetings","text":"<p>We hold regular community meetings to discuss the development of the UIM Protocol, share updates, and answer questions. Check our Discord server for the schedule of upcoming meetings.</p>"},{"location":"community/#contact","title":"Contact","text":"<p>If you have questions or need help, you can reach us at:</p> <ul> <li>Email: contact@uimprotocol.org</li> <li>Discord: discord.gg/uimprotocol</li> <li>GitHub: github.com/synaptiai/uim-protocol</li> </ul> <p>We look forward to your participation in the UIM Protocol community!</p>"},{"location":"community/code-of-conduct/","title":"Code of Conduct","text":""},{"location":"community/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"community/code-of-conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"community/code-of-conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"community/code-of-conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"community/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at the Discussions section in GitHub. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"community/code-of-conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"community/code-of-conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"community/code-of-conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"community/code-of-conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"community/code-of-conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"community/code-of-conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"community/contributing/","title":"Contributing to the UIM Protocol","text":"<p>Thank you for your interest in contributing to the Unified Intent Mediator (UIM) Protocol! This guide will help you get started with contributing to the project.</p>"},{"location":"community/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct. Please read it before contributing.</p>"},{"location":"community/contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<p>There are many ways to contribute to the UIM Protocol:</p> <ol> <li>Code Contributions: Implement new features, fix bugs, or improve performance.</li> <li>Documentation: Improve existing documentation or create new guides and tutorials.</li> <li>Testing: Test the protocol in different environments and report issues.</li> <li>Use Cases: Share how you're using the UIM Protocol in your projects.</li> <li>Feedback: Provide feedback on the protocol design and implementation.</li> <li>Community Support: Help answer questions and support other users.</li> </ol>"},{"location":"community/contributing/#getting-started","title":"Getting Started","text":""},{"location":"community/contributing/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Git</li> <li>Node.js (for JavaScript implementations)</li> <li>Python (for Python implementations)</li> <li>A code editor of your choice</li> </ul>"},{"location":"community/contributing/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/synaptiai/uim-protocol.git\ncd uim-protocol\n</code></pre></li> <li>Add the upstream repository as a remote:    <pre><code>git remote add upstream https://github.com/synaptiai/uim-protocol.git\n</code></pre></li> <li>Create a new branch for your changes:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> </ol>"},{"location":"community/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Make your changes in your feature branch.</li> <li>Write or update tests for your changes.</li> <li>Ensure all tests pass:    <pre><code>npm test  # For JavaScript implementations\npytest    # For Python implementations\n</code></pre></li> <li>Update documentation if necessary.</li> <li>Commit your changes with a descriptive commit message:    <pre><code>git commit -m \"Add feature: your feature description\"\n</code></pre></li> <li>Push your changes to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Create a pull request from your fork to the main repository.</li> </ol>"},{"location":"community/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>When submitting a pull request, please follow these guidelines:</p> <ol> <li>One Pull Request Per Feature: Keep your pull requests focused on a single feature or bug fix.</li> <li>Follow Coding Standards: Adhere to the coding standards used in the project.</li> <li>Write Tests: Include tests for your changes.</li> <li>Update Documentation: Update relevant documentation.</li> <li>Descriptive Pull Request: Provide a clear description of your changes in the pull request.</li> <li>Reference Issues: Reference any related issues in your pull request.</li> </ol>"},{"location":"community/contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"community/contributing/#javascript","title":"JavaScript","text":"<ul> <li>Use ES6+ features.</li> <li>Follow the Airbnb JavaScript Style Guide.</li> <li>Use async/await for asynchronous code.</li> <li>Document your code using JSDoc comments.</li> </ul>"},{"location":"community/contributing/#python","title":"Python","text":"<ul> <li>Follow PEP 8 style guide.</li> <li>Use type hints.</li> <li>Document your code using docstrings.</li> <li>Use f-strings for string formatting.</li> </ul>"},{"location":"community/contributing/#documentation-guidelines","title":"Documentation Guidelines","text":"<p>When contributing to documentation, please follow these guidelines:</p> <ol> <li>Use clear and concise language.</li> <li>Provide examples where appropriate.</li> <li>Use proper Markdown formatting.</li> <li>Check for spelling and grammar errors.</li> <li>Ensure links are working.</li> </ol>"},{"location":"community/contributing/#issue-reporting","title":"Issue Reporting","text":"<p>If you find a bug or have a feature request, please create an issue on GitHub. When creating an issue, please include:</p> <ol> <li>A clear and descriptive title.</li> <li>A detailed description of the issue or feature request.</li> <li>Steps to reproduce the issue (for bugs).</li> <li>Expected behavior and actual behavior (for bugs).</li> <li>Screenshots or code snippets if applicable.</li> <li>Environment information (OS, browser, version, etc.).</li> </ol>"},{"location":"community/contributing/#community-discussions","title":"Community Discussions","text":"<p>Join our community discussions:</p> <ul> <li>GitHub Discussions: For general questions and discussions.</li> <li>Issue Tracker: For bug reports and feature requests.</li> <li>Discord: For real-time discussions and community support.</li> </ul>"},{"location":"community/contributing/#governance","title":"Governance","text":"<p>The UIM Protocol is governed by a steering committee that oversees the project's direction and development. For more information, see the Governance page.</p>"},{"location":"community/contributing/#license","title":"License","text":"<p>By contributing to the UIM Protocol, you agree that your contributions will be licensed under the project's Apache License 2.0.</p>"},{"location":"community/contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in the following ways:</p> <ol> <li>Contributors List: All contributors are listed in the Contributors page.</li> <li>Release Notes: Significant contributions are mentioned in release notes.</li> <li>Maintainer Status: Regular contributors may be invited to become maintainers.</li> </ol>"},{"location":"community/contributing/#questions","title":"Questions?","text":"<p>If you have any questions about contributing, please reach out to us through GitHub Discussions or Discord.</p> <p>Thank you for contributing to the UIM Protocol!</p>"},{"location":"community/contributors/","title":"Contributors","text":"<p>This page recognizes the individuals and organizations who have contributed to the Unified Intent Mediator (UIM) Protocol. We are grateful for their time, expertise, and dedication to making this project a success.</p>"},{"location":"community/contributors/#core-team","title":"Core Team","text":"<p>The core team is responsible for the day-to-day development and maintenance of the UIM Protocol.</p> <ul> <li>Daniel Bentes - Project Lead</li> <li>AI Integration Team - Protocol Design and Implementation</li> <li>Web Services Team - API Design and Implementation</li> <li>Documentation Team - Documentation and Tutorials</li> </ul>"},{"location":"community/contributors/#individual-contributors","title":"Individual Contributors","text":"<p>We would like to thank the following individuals for their contributions to the UIM Protocol:</p> <ul> <li>John Smith - Protocol Design</li> <li>Jane Doe - Security Enhancements</li> <li>Alex Johnson - Documentation Improvements</li> <li>Sam Wilson - Testing and Bug Fixes</li> <li>Taylor Brown - Example Implementations</li> </ul>"},{"location":"community/contributors/#organizational-contributors","title":"Organizational Contributors","text":"<p>We would like to thank the following organizations for their support and contributions to the UIM Protocol:</p> <ul> <li>AI Research Institute - Research and Development</li> <li>Web Services Association - API Standards</li> <li>Open Source Initiative - Licensing and Governance</li> <li>Security Research Group - Security Auditing</li> </ul>"},{"location":"community/contributors/#how-to-become-a-contributor","title":"How to Become a Contributor","text":"<p>We welcome contributions from individuals and organizations who are interested in improving the UIM Protocol. To become a contributor, please follow these steps:</p> <ol> <li>Read the Contributing Guide to understand our contribution process.</li> <li>Find an issue or feature to work on in our GitHub repository.</li> <li>Submit a pull request with your changes.</li> <li>Engage with the community and participate in discussions.</li> </ol>"},{"location":"community/contributors/#recognition-criteria","title":"Recognition Criteria","text":"<p>Contributors are recognized based on the following criteria:</p> <ol> <li>Code Contributions: Implementing new features, fixing bugs, or improving performance.</li> <li>Documentation: Improving existing documentation or creating new guides and tutorials.</li> <li>Testing: Testing the protocol in different environments and reporting issues.</li> <li>Community Support: Helping answer questions and supporting other users.</li> <li>Advocacy: Promoting the UIM Protocol and helping grow the community.</li> </ol>"},{"location":"community/contributors/#contributor-levels","title":"Contributor Levels","text":"<p>We recognize different levels of contribution to the UIM Protocol:</p>"},{"location":"community/contributors/#1-occasional-contributor","title":"1. Occasional Contributor","text":"<p>Occasional contributors have made one or more small contributions to the project, such as fixing a bug, improving documentation, or reporting issues.</p>"},{"location":"community/contributors/#2-regular-contributor","title":"2. Regular Contributor","text":"<p>Regular contributors have made multiple significant contributions to the project over time, such as implementing new features, improving existing features, or creating comprehensive documentation.</p>"},{"location":"community/contributors/#3-core-contributor","title":"3. Core Contributor","text":"<p>Core contributors have made substantial and sustained contributions to the project, have deep knowledge of the codebase, and actively participate in the project's direction and community.</p>"},{"location":"community/contributors/#4-maintainer","title":"4. Maintainer","text":"<p>Maintainers are core contributors who have been granted commit access to the repository and are responsible for reviewing and merging pull requests, triaging issues, and maintaining the project's quality.</p>"},{"location":"community/contributors/#becoming-a-maintainer","title":"Becoming a Maintainer","text":"<p>Maintainers are selected from the pool of core contributors based on their technical expertise, contribution history, and community involvement. The process for becoming a maintainer includes:</p> <ol> <li>Consistently contributing high-quality code, documentation, or other contributions.</li> <li>Demonstrating a deep understanding of the project's codebase and architecture.</li> <li>Actively participating in the community by answering questions, reviewing pull requests, and helping others.</li> <li>Being nominated by an existing maintainer and approved by the core team.</li> </ol>"},{"location":"community/contributors/#thank-you","title":"Thank You","text":"<p>We would like to express our sincere gratitude to all contributors who have helped make the UIM Protocol what it is today. Your contributions, big or small, are greatly appreciated and have a significant impact on the project's success.</p> <p>If you have contributed to the UIM Protocol and your name is not listed here, please let us know so we can add you to the list.</p>"},{"location":"community/faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>This page answers common questions about the Unified Intent Mediator (UIM) Protocol. If you don't find the answer to your question here, please reach out to us through GitHub Discussions or Discord.</p>"},{"location":"community/faq/#general-questions","title":"General Questions","text":""},{"location":"community/faq/#what-is-the-uim-protocol","title":"What is the UIM Protocol?","text":"<p>The Unified Intent Mediator (UIM) Protocol is a standardized framework that enables AI agents to interact with web services through well-defined intents, metadata, and execution methods. It provides a consistent way for AI agents to discover and use web service capabilities while ensuring security, privacy, and compliance.</p>"},{"location":"community/faq/#why-was-the-uim-protocol-created","title":"Why was the UIM Protocol created?","text":"<p>The UIM Protocol was created to address the fragmentation and inconsistency in how AI agents interact with web services. Before UIM, each AI agent had to implement custom integrations for each web service, leading to duplication of effort, inconsistent user experiences, and security concerns. UIM provides a standardized approach that benefits both AI agents and web services.</p>"},{"location":"community/faq/#who-can-use-the-uim-protocol","title":"Who can use the UIM Protocol?","text":"<p>The UIM Protocol is designed for:</p> <ul> <li>AI Agent Developers: Those building AI assistants, chatbots, or other AI systems that need to interact with web services.</li> <li>Web Service Providers: Organizations that want to make their services accessible to AI agents in a secure and standardized way.</li> <li>Platform Providers: Companies building platforms that connect AI agents and web services.</li> <li>Researchers: Those studying AI-web service interactions and developing new approaches.</li> </ul>"},{"location":"community/faq/#is-the-uim-protocol-open-source","title":"Is the UIM Protocol open source?","text":"<p>Yes, the UIM Protocol is open source and available under the Apache License 2.0. This means you can freely use, modify, and distribute it for both personal and commercial purposes.</p>"},{"location":"community/faq/#how-does-the-uim-protocol-relate-to-other-standards","title":"How does the UIM Protocol relate to other standards?","text":"<p>The UIM Protocol complements existing standards like OpenAPI, JSON Schema, and OAuth. It builds on these standards while adding specific features for AI-web service interactions, such as intent-based communication, policy adherence, and discovery mechanisms.</p>"},{"location":"community/faq/#technical-questions","title":"Technical Questions","text":""},{"location":"community/faq/#how-does-service-discovery-work-in-the-uim-protocol","title":"How does service discovery work in the UIM Protocol?","text":"<p>Service discovery in the UIM Protocol works through two main mechanisms:</p> <ol> <li>DNS TXT Records: Web services can publish TXT records in their DNS that point to their <code>agents.json</code> file, policy file, and discovery endpoint.</li> <li>agents.json File: This file contains information about the service, its intents, and its policies.</li> </ol> <p>AI agents can use these mechanisms to discover services and their capabilities without prior knowledge.</p>"},{"location":"community/faq/#what-is-a-policy-adherence-token-pat","title":"What is a Policy Adherence Token (PAT)?","text":"<p>A Policy Adherence Token (PAT) is a signed JWT (JSON Web Token) that indicates an AI agent has agreed to adhere to a web service's policies. The AI agent obtains a PAT by signing the service's policy with its private key and sending the signature to the service. The service verifies the signature and issues a PAT, which the AI agent then uses for subsequent intent executions.</p>"},{"location":"community/faq/#how-are-intents-defined-in-the-uim-protocol","title":"How are intents defined in the UIM Protocol?","text":"<p>Intents in the UIM Protocol are defined with the following components:</p> <ul> <li>Intent UID: A unique identifier for the intent (e.g., <code>example.com:searchProducts:v1</code>).</li> <li>Intent Name: A human-readable name for the intent (e.g., <code>SearchProducts</code>).</li> <li>Description: A description of what the intent does.</li> <li>Input Parameters: The parameters required to execute the intent.</li> <li>Output Parameters: The parameters returned by the intent.</li> <li>Endpoint: The URL endpoint for executing the intent.</li> <li>Tags: Optional tags for categorizing the intent.</li> </ul>"},{"location":"community/faq/#how-does-the-uim-protocol-handle-versioning","title":"How does the UIM Protocol handle versioning?","text":"<p>The UIM Protocol handles versioning through intent UIDs. Each intent UID includes a version component (e.g., <code>example.com:searchProducts:v1</code>). When a web service updates an intent in a backward-incompatible way, it creates a new version of the intent with a new UID. This allows AI agents to continue using the old version while transitioning to the new one.</p>"},{"location":"community/faq/#how-does-the-uim-protocol-ensure-security","title":"How does the UIM Protocol ensure security?","text":"<p>The UIM Protocol ensures security through several mechanisms:</p> <ol> <li>Policy Adherence Tokens (PATs): These tokens ensure that AI agents have agreed to adhere to a service's policies.</li> <li>RSA Key Pairs: AI agents and web services use RSA key pairs for signing and verifying signatures.</li> <li>HTTPS: All communication between AI agents and web services is encrypted using HTTPS.</li> <li>Rate Limiting: Web services can implement rate limiting to prevent abuse.</li> <li>Scoped Permissions: PATs can be scoped to specific intents and operations.</li> </ol>"},{"location":"community/faq/#can-the-uim-protocol-work-in-a-decentralized-environment","title":"Can the UIM Protocol work in a decentralized environment?","text":"<p>Yes, the UIM Protocol is designed to work in both centralized and decentralized environments. In a decentralized environment, AI agents can discover services directly through DNS TXT records and <code>agents.json</code> files, without relying on a central registry.</p>"},{"location":"community/faq/#implementation-questions","title":"Implementation Questions","text":""},{"location":"community/faq/#how-do-i-implement-the-uim-protocol-in-my-ai-agent","title":"How do I implement the UIM Protocol in my AI agent?","text":"<p>To implement the UIM Protocol in your AI agent, follow these steps:</p> <ol> <li>Set up your development environment with the necessary libraries for HTTP requests, JSON processing, and cryptography.</li> <li>Generate an RSA key pair for your AI agent.</li> <li>Implement service discovery using DNS TXT records and <code>agents.json</code> files.</li> <li>Implement intent discovery using the service's discovery endpoint.</li> <li>Implement policy retrieval and PAT acquisition.</li> <li>Implement intent execution.</li> </ol> <p>For detailed instructions, see the AI Agent Implementation Guide.</p>"},{"location":"community/faq/#how-do-i-implement-the-uim-protocol-in-my-web-service","title":"How do I implement the UIM Protocol in my web service?","text":"<p>To implement the UIM Protocol in your web service, follow these steps:</p> <ol> <li>Set up your development environment with the necessary libraries for HTTP requests, JSON processing, and cryptography.</li> <li>Generate an RSA key pair for your web service.</li> <li>Define your intents with their parameters, endpoints, and metadata.</li> <li>Define your policy that AI agents must adhere to.</li> <li>Create an <code>agents.json</code> file that describes your service and its intents.</li> <li>Configure DNS TXT records to help AI agents discover your service.</li> <li>Implement the discovery API that allows AI agents to search for intents.</li> <li>Implement the policy API that allows AI agents to retrieve the policy.</li> <li>Implement the PAT issuance API that allows AI agents to request PATs.</li> <li>Implement the intent execution API that allows AI agents to execute intents.</li> </ol> <p>For detailed instructions, see the Service Provider Implementation Guide.</p>"},{"location":"community/faq/#are-there-any-sdks-or-libraries-for-implementing-the-uim-protocol","title":"Are there any SDKs or libraries for implementing the UIM Protocol?","text":"<p>Yes, we provide SDKs and libraries for implementing the UIM Protocol in various programming languages:</p> <ul> <li>JavaScript/TypeScript: <code>uim-protocol-js</code></li> <li>Python: <code>uim-protocol-py</code></li> <li>Java: <code>uim-protocol-java</code></li> <li>Go: <code>uim-protocol-go</code></li> </ul> <p>These SDKs provide high-level abstractions for working with the UIM Protocol, making it easier to implement in your applications.</p>"},{"location":"community/faq/#how-can-i-test-my-uim-protocol-implementation","title":"How can I test my UIM Protocol implementation?","text":"<p>You can test your UIM Protocol implementation using the following tools:</p> <ol> <li>UIM Protocol CLI: A command-line tool for testing UIM Protocol implementations.</li> <li>UIM Protocol Validator: A tool for validating UIM Protocol implementations against the specification.</li> <li>Mock Agent and Mock Webservice: Reference implementations that you can use for testing.</li> </ol> <p>For more information, see the Testing Guide.</p>"},{"location":"community/faq/#business-questions","title":"Business Questions","text":""},{"location":"community/faq/#what-are-the-benefits-of-implementing-the-uim-protocol-for-my-web-service","title":"What are the benefits of implementing the UIM Protocol for my web service?","text":"<p>Implementing the UIM Protocol for your web service offers several benefits:</p> <ol> <li>Increased Reach: Make your service accessible to a wide range of AI agents.</li> <li>Standardized Integration: Reduce the effort required to integrate with AI agents.</li> <li>Enhanced Security: Ensure that AI agents adhere to your policies.</li> <li>Improved User Experience: Provide a consistent and seamless experience for users.</li> <li>New Revenue Streams: Monetize access to your service through the UIM Protocol.</li> </ol>"},{"location":"community/faq/#how-can-i-monetize-my-web-service-using-the-uim-protocol","title":"How can I monetize my web service using the UIM Protocol?","text":"<p>You can monetize your web service using the UIM Protocol in several ways:</p> <ol> <li>Usage-based Pricing: Charge based on the number of intent executions.</li> <li>Subscription-based Pricing: Offer different tiers of access with varying capabilities.</li> <li>Freemium Model: Provide basic intents for free and charge for premium intents.</li> <li>Pay-per-Result: Charge based on the value of the results provided.</li> </ol> <p>The UIM Protocol's policy framework allows you to define and enforce these monetization models.</p>"},{"location":"community/faq/#how-does-the-uim-protocol-handle-compliance-with-regulations","title":"How does the UIM Protocol handle compliance with regulations?","text":"<p>The UIM Protocol helps with compliance in several ways:</p> <ol> <li>Policy Framework: Define and enforce policies that comply with regulations.</li> <li>Audit Logging: Track intent executions for compliance reporting.</li> <li>Data Minimization: Only share the data necessary for intent execution.</li> <li>User Consent: Implement consent mechanisms through policies.</li> <li>Regional Compliance: Define different policies for different regions.</li> </ol>"},{"location":"community/faq/#how-can-i-get-support-for-implementing-the-uim-protocol","title":"How can I get support for implementing the UIM Protocol?","text":"<p>You can get support for implementing the UIM Protocol through:</p> <ol> <li>GitHub Discussions: Ask questions and get help from the community.</li> <li>Discord: Join our Discord server for real-time discussions and support.</li> <li>Documentation: Refer to our comprehensive documentation.</li> <li>Workshops and Webinars: Attend our workshops and webinars to learn more.</li> <li>Professional Services: Contact us for professional implementation services.</li> </ol>"},{"location":"community/faq/#community-questions","title":"Community Questions","text":""},{"location":"community/faq/#how-can-i-contribute-to-the-uim-protocol","title":"How can I contribute to the UIM Protocol?","text":"<p>You can contribute to the UIM Protocol in several ways:</p> <ol> <li>Code Contributions: Implement new features, fix bugs, or improve performance.</li> <li>Documentation: Improve existing documentation or create new guides and tutorials.</li> <li>Testing: Test the protocol in different environments and report issues.</li> <li>Use Cases: Share how you're using the UIM Protocol in your projects.</li> <li>Feedback: Provide feedback on the protocol design and implementation.</li> </ol> <p>For more information, see the Contributing Guide.</p>"},{"location":"community/faq/#is-there-a-community-for-uim-protocol-users-and-developers","title":"Is there a community for UIM Protocol users and developers?","text":"<p>Yes, we have an active community of UIM Protocol users and developers. You can join us through:</p> <ol> <li>GitHub Discussions: For general questions and discussions.</li> <li>Discord: For real-time discussions and community support.</li> <li>Twitter: For announcements and updates.</li> <li>Meetups: For in-person and virtual events.</li> </ol>"},{"location":"community/faq/#how-is-the-uim-protocol-governed","title":"How is the UIM Protocol governed?","text":"<p>The UIM Protocol is governed by a steering committee that oversees the project's direction and development. The committee includes representatives from various stakeholders, including AI agent developers, web service providers, and the open-source community.</p> <p>For more information, see the Governance page.</p>"},{"location":"community/faq/#what-is-the-roadmap-for-the-uim-protocol","title":"What is the roadmap for the UIM Protocol?","text":"<p>The UIM Protocol roadmap includes:</p> <ol> <li>Short-term: Enhancing discovery mechanisms, improving the policy framework, and developing developer tools.</li> <li>Medium-term: Adding security enhancements, optimizing performance, and expanding the ecosystem.</li> <li>Long-term: Standardization, enterprise features, and specialized extensions.</li> </ol> <p>For more information, see the Roadmap page.</p>"},{"location":"community/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"community/faq/#im-getting-a-policy-rejected-error-when-requesting-a-pat-what-should-i-do","title":"I'm getting a \"Policy Rejected\" error when requesting a PAT. What should I do?","text":"<p>This error occurs when the web service rejects the policy signature. Check the following:</p> <ol> <li>Signature Algorithm: Ensure you're using the correct algorithm (RSA-SHA256).</li> <li>Policy Format: Ensure you're signing the exact policy returned by the service.</li> <li>Key Pair: Verify that you're using the correct key pair.</li> <li>Service Requirements: Check if the service has specific requirements for policy acceptance.</li> </ol>"},{"location":"community/faq/#my-ai-agent-cant-discover-a-service-what-should-i-check","title":"My AI agent can't discover a service. What should I check?","text":"<p>If your AI agent can't discover a service, check the following:</p> <ol> <li>DNS TXT Records: Verify that the service has published the correct TXT records.</li> <li>agents.json File: Ensure the <code>agents.json</code> file is accessible and correctly formatted.</li> <li>HTTPS: Verify that the service is using HTTPS.</li> <li>Network Issues: Check for network connectivity issues.</li> <li>Service Status: Verify that the service is online and operational.</li> </ol>"},{"location":"community/faq/#intent-execution-is-failing-with-a-400-error-what-could-be-the-issue","title":"Intent execution is failing with a 400 error. What could be the issue?","text":"<p>A 400 error during intent execution could be due to:</p> <ol> <li>Invalid Parameters: Check that you're providing all required parameters with the correct types.</li> <li>Parameter Format: Ensure parameters are formatted correctly (e.g., dates in ISO 8601 format).</li> <li>Intent UID: Verify that you're using the correct intent UID.</li> <li>PAT: Ensure your PAT is valid and has not expired.</li> <li>Rate Limiting: Check if you've exceeded the service's rate limits.</li> </ol>"},{"location":"community/faq/#how-can-i-debug-uim-protocol-interactions","title":"How can I debug UIM Protocol interactions?","text":"<p>To debug UIM Protocol interactions:</p> <ol> <li>Enable Verbose Logging: Turn on detailed logging in your implementation.</li> <li>Use the UIM Protocol CLI: The CLI provides debugging tools for UIM Protocol interactions.</li> <li>Check Network Requests: Use tools like Wireshark or browser developer tools to inspect network requests.</li> <li>Validate JSON: Ensure your JSON payloads are valid and correctly formatted.</li> <li>Test with Mock Services: Use mock services to isolate and debug specific issues.</li> </ol>"},{"location":"community/governance/","title":"Governance","text":"<p>This page outlines the governance model for the Unified Intent Mediator (UIM) Protocol project. It explains how decisions are made, how the project is structured, and how community members can participate in the governance process.</p>"},{"location":"community/governance/#governance-model","title":"Governance Model","text":"<p>The UIM Protocol follows a community-driven governance model with a steering committee providing oversight and direction. This model is designed to balance the need for clear leadership with the benefits of community participation and transparency.</p>"},{"location":"community/governance/#steering-committee","title":"Steering Committee","text":"<p>The Steering Committee is responsible for the overall direction and health of the UIM Protocol project. It consists of representatives from various stakeholder groups, including AI agent developers, web service providers, and the open-source community.</p>"},{"location":"community/governance/#responsibilities","title":"Responsibilities","text":"<p>The Steering Committee is responsible for:</p> <ol> <li>Strategic Direction: Setting the long-term vision and roadmap for the UIM Protocol.</li> <li>Technical Oversight: Ensuring technical excellence and coherence in the protocol design and implementation.</li> <li>Community Management: Fostering a healthy and inclusive community.</li> <li>Resource Allocation: Allocating resources to different aspects of the project.</li> <li>Conflict Resolution: Resolving conflicts that cannot be resolved through normal community processes.</li> <li>Brand and Marketing: Overseeing the project's brand and marketing efforts.</li> </ol>"},{"location":"community/governance/#composition","title":"Composition","text":"<p>The Steering Committee consists of 7 members:</p> <ul> <li>2 representatives from AI agent developers</li> <li>2 representatives from web service providers</li> <li>2 representatives from the open-source community</li> <li>1 chairperson</li> </ul>"},{"location":"community/governance/#selection-process","title":"Selection Process","text":"<p>Steering Committee members are selected through a combination of appointment and election:</p> <ol> <li>Initial Committee: The initial committee was appointed by the project founders.</li> <li>Subsequent Members: Subsequent members are elected by the community through a transparent voting process.</li> <li>Term Length: Committee members serve for a term of 2 years, with staggered terms to ensure continuity.</li> <li>Term Limits: Committee members can serve a maximum of 2 consecutive terms.</li> </ol>"},{"location":"community/governance/#decision-making","title":"Decision Making","text":"<p>The Steering Committee makes decisions through a consensus-seeking process:</p> <ol> <li>Proposals: Any committee member can make a proposal.</li> <li>Discussion: The proposal is discussed by the committee.</li> <li>Consensus Seeking: The committee seeks consensus on the proposal.</li> <li>Voting: If consensus cannot be reached, a vote is taken, with a simple majority required for approval.</li> <li>Transparency: All decisions and their rationales are documented and shared with the community.</li> </ol>"},{"location":"community/governance/#technical-committee","title":"Technical Committee","text":"<p>The Technical Committee is responsible for the technical aspects of the UIM Protocol, including the specification, reference implementations, and technical documentation.</p>"},{"location":"community/governance/#responsibilities_1","title":"Responsibilities","text":"<p>The Technical Committee is responsible for:</p> <ol> <li>Specification Development: Developing and maintaining the UIM Protocol specification.</li> <li>Reference Implementations: Overseeing the development of reference implementations.</li> <li>Technical Documentation: Ensuring comprehensive and accurate technical documentation.</li> <li>Technical Decisions: Making technical decisions about the protocol design and implementation.</li> <li>Technical Roadmap: Developing and maintaining the technical roadmap.</li> </ol>"},{"location":"community/governance/#composition_1","title":"Composition","text":"<p>The Technical Committee consists of 5 members:</p> <ul> <li>3 core developers with significant contributions to the UIM Protocol</li> <li>2 technical experts from the community</li> </ul>"},{"location":"community/governance/#selection-process_1","title":"Selection Process","text":"<p>Technical Committee members are selected based on their technical expertise and contributions to the project:</p> <ol> <li>Initial Committee: The initial committee was appointed by the Steering Committee.</li> <li>Subsequent Members: Subsequent members are nominated by the community and appointed by the Steering Committee.</li> <li>Term Length: Committee members serve for a term of 1 year, with the possibility of renewal.</li> </ol>"},{"location":"community/governance/#decision-making_1","title":"Decision Making","text":"<p>The Technical Committee makes decisions through a technical consensus process:</p> <ol> <li>Proposals: Technical proposals are submitted as GitHub issues or pull requests.</li> <li>Discussion: The proposal is discussed by the committee and the community.</li> <li>Technical Consensus: The committee seeks technical consensus on the proposal.</li> <li>Implementation: Once consensus is reached, the proposal is implemented.</li> </ol>"},{"location":"community/governance/#working-groups","title":"Working Groups","text":"<p>Working Groups are formed to address specific aspects of the UIM Protocol project. They are temporary or permanent groups focused on particular areas of work.</p>"},{"location":"community/governance/#current-working-groups","title":"Current Working Groups","text":"<ol> <li>Specification Working Group: Focused on developing and maintaining the UIM Protocol specification.</li> <li>Implementation Working Group: Focused on developing reference implementations and SDKs.</li> <li>Documentation Working Group: Focused on creating and maintaining documentation.</li> <li>Community Working Group: Focused on community building and engagement.</li> <li>Security Working Group: Focused on security aspects of the protocol.</li> </ol>"},{"location":"community/governance/#formation-and-dissolution","title":"Formation and Dissolution","text":"<p>Working Groups are formed and dissolved by the Steering Committee based on the project's needs:</p> <ol> <li>Formation: A Working Group is formed when there is a need for focused work on a specific aspect of the project.</li> <li>Charter: Each Working Group has a charter that defines its scope, goals, and timeline.</li> <li>Dissolution: A Working Group is dissolved when its goals have been achieved or when it is no longer needed.</li> </ol>"},{"location":"community/governance/#participation","title":"Participation","text":"<p>Participation in Working Groups is open to all community members:</p> <ol> <li>Joining: Community members can join a Working Group by expressing interest and demonstrating relevant expertise or willingness to contribute.</li> <li>Leadership: Each Working Group has a lead appointed by the Steering Committee.</li> <li>Reporting: Working Groups report regularly to the Steering Committee on their progress.</li> </ol>"},{"location":"community/governance/#community-participation","title":"Community Participation","text":"<p>The UIM Protocol is a community-driven project, and community participation is essential to its success. There are several ways for community members to participate in the governance process:</p>"},{"location":"community/governance/#contribution-paths","title":"Contribution Paths","text":"<ol> <li>Code Contributions: Contributing code to the UIM Protocol repositories.</li> <li>Documentation: Improving the documentation.</li> <li>Issue Reporting: Reporting bugs and suggesting features.</li> <li>Discussion Participation: Participating in discussions on GitHub, Discord, and other platforms.</li> <li>Working Group Participation: Joining Working Groups to contribute to specific aspects of the project.</li> <li>Community Events: Participating in community events such as meetups and conferences.</li> </ol>"},{"location":"community/governance/#recognition-and-advancement","title":"Recognition and Advancement","text":"<p>The UIM Protocol project recognizes and rewards community contributions:</p> <ol> <li>Contributors: Anyone who contributes to the project in any way.</li> <li>Committers: Contributors who have made significant contributions and have been granted commit access.</li> <li>Maintainers: Committers who have demonstrated leadership and are responsible for maintaining specific parts of the project.</li> <li>Committee Members: Maintainers who have been elected or appointed to the Steering or Technical Committees.</li> </ol>"},{"location":"community/governance/#code-of-conduct","title":"Code of Conduct","text":"<p>All community members are expected to adhere to the Code of Conduct. The Code of Conduct outlines the expected behavior and the consequences of violating it.</p>"},{"location":"community/governance/#decision-making-process","title":"Decision Making Process","text":"<p>The UIM Protocol project follows a transparent and inclusive decision-making process:</p>"},{"location":"community/governance/#types-of-decisions","title":"Types of Decisions","text":"<ol> <li>Strategic Decisions: Made by the Steering Committee.</li> <li>Technical Decisions: Made by the Technical Committee.</li> <li>Working Group Decisions: Made by the respective Working Groups.</li> <li>Day-to-Day Decisions: Made by maintainers and committers.</li> </ol>"},{"location":"community/governance/#process","title":"Process","text":"<ol> <li>Proposal: A proposal is made through the appropriate channel (GitHub issue, pull request, discussion, etc.).</li> <li>Discussion: The proposal is discussed by the community and the relevant committee or group.</li> <li>Refinement: The proposal is refined based on feedback.</li> <li>Decision: A decision is made through the appropriate process (consensus, voting, etc.).</li> <li>Implementation: The decision is implemented.</li> <li>Review: The implementation is reviewed and adjusted as needed.</li> </ol>"},{"location":"community/governance/#transparency","title":"Transparency","text":"<p>All decisions and their rationales are documented and shared with the community:</p> <ol> <li>GitHub: Technical decisions are documented in GitHub issues and pull requests.</li> <li>Meeting Notes: Committee meetings are documented with notes shared with the community.</li> <li>Announcements: Major decisions are announced through the project's communication channels.</li> <li>Documentation: Decisions that affect the protocol specification or implementation are documented in the appropriate documentation.</li> </ol>"},{"location":"community/governance/#conflict-resolution","title":"Conflict Resolution","text":"<p>Conflicts are inevitable in any community. The UIM Protocol project has a clear process for resolving conflicts:</p> <ol> <li>Direct Communication: Parties involved in a conflict are encouraged to communicate directly to resolve the issue.</li> <li>Mediation: If direct communication fails, a neutral third party can be brought in to mediate.</li> <li>Committee Intervention: If mediation fails, the relevant committee (Steering or Technical) can intervene to resolve the conflict.</li> <li>Final Decision: In rare cases where all other methods fail, the Steering Committee can make a final decision.</li> </ol>"},{"location":"community/governance/#changes-to-governance","title":"Changes to Governance","text":"<p>The governance model itself can evolve over time to better serve the project and community:</p> <ol> <li>Proposal: Changes to the governance model can be proposed by any community member.</li> <li>Discussion: The proposal is discussed by the community and the Steering Committee.</li> <li>Decision: The Steering Committee makes a decision on the proposal.</li> <li>Implementation: If approved, the changes are implemented and documented.</li> </ol>"},{"location":"community/governance/#conclusion","title":"Conclusion","text":"<p>The UIM Protocol's governance model is designed to be transparent, inclusive, and effective. It balances the need for clear leadership with the benefits of community participation. By following this model, we aim to create a healthy and sustainable project that serves the needs of all stakeholders.</p> <p>For questions about governance or how to get involved, please reach out to the Steering Committee or join the community discussions on GitHub or Discord.</p>"},{"location":"community/roadmap/","title":"UIM Protocol Roadmap","text":"<p>This roadmap outlines the planned development and evolution of the Unified Intent Mediator (UIM) Protocol. It provides a high-level overview of our goals, priorities, and timeline for future releases.</p>"},{"location":"community/roadmap/#current-status","title":"Current Status","text":"<p>The UIM Protocol is currently in the Alpha stage. We are actively developing the core components and gathering feedback from early adopters.</p>"},{"location":"community/roadmap/#development-phases","title":"Development Phases","text":""},{"location":"community/roadmap/#phase-1-foundation-current","title":"Phase 1: Foundation (Current)","text":"<p>Timeline: Q1-Q2 2025</p> <p>The focus of this phase is to establish the core components of the protocol and create initial reference implementations.</p> <p>Key Milestones: - \u2705 Define the core protocol specification - \u2705 Implement basic discovery mechanisms - \u2705 Create reference implementations for AI agents and web services - \u2705 Establish documentation and community guidelines - \ud83d\udd04 Gather feedback from early adopters - \ud83d\udd04 Refine the protocol based on initial feedback</p>"},{"location":"community/roadmap/#phase-2-expansion","title":"Phase 2: Expansion","text":"<p>Timeline: Q3-Q4 2025</p> <p>In this phase, we will expand the protocol's capabilities and improve its robustness.</p> <p>Key Milestones: - \ud83d\udccb Enhance security features - \ud83d\udccb Implement advanced policy mechanisms - \ud83d\udccb Develop tools for protocol compliance testing - \ud83d\udccb Create SDKs for popular programming languages - \ud83d\udccb Establish a certification program for compliant implementations - \ud83d\udccb Expand the ecosystem with more integrations</p>"},{"location":"community/roadmap/#phase-3-standardization","title":"Phase 3: Standardization","text":"<p>Timeline: Q1-Q2 2026</p> <p>This phase focuses on standardization and wider adoption.</p> <p>Key Milestones: - \ud83d\udccb Submit the protocol for standardization - \ud83d\udccb Develop enterprise-grade features - \ud83d\udccb Create a marketplace for UIM-compatible services - \ud83d\udccb Implement advanced analytics and monitoring - \ud83d\udccb Establish a governance model for long-term sustainability - \ud83d\udccb Expand to additional platforms and environments</p>"},{"location":"community/roadmap/#phase-4-ecosystem-growth","title":"Phase 4: Ecosystem Growth","text":"<p>Timeline: Q3-Q4 2026 and beyond</p> <p>The final phase focuses on growing the ecosystem and ensuring long-term sustainability.</p> <p>Key Milestones: - \ud83d\udccb Foster a vibrant community of developers and users - \ud83d\udccb Support integration with emerging technologies - \ud83d\udccb Develop specialized extensions for different industries - \ud83d\udccb Establish partnerships with major platforms and services - \ud83d\udccb Create educational resources and certification programs - \ud83d\udccb Ensure backward compatibility and sustainable evolution</p>"},{"location":"community/roadmap/#upcoming-features","title":"Upcoming Features","text":""},{"location":"community/roadmap/#short-term-next-3-months","title":"Short-term (Next 3 Months)","text":"<ol> <li>Enhanced Discovery Mechanism</li> <li>Improved DNS-based discovery</li> <li>Support for decentralized discovery</li> <li> <p>Better caching and performance</p> </li> <li> <p>Advanced Policy Framework</p> </li> <li>More flexible policy definition</li> <li>Support for complex constraints</li> <li> <p>Enhanced policy enforcement</p> </li> <li> <p>Developer Tools</p> </li> <li>CLI tools for testing and debugging</li> <li>Protocol validation tools</li> <li>Integration with popular development environments</li> </ol>"},{"location":"community/roadmap/#medium-term-3-6-months","title":"Medium-term (3-6 Months)","text":"<ol> <li>Security Enhancements</li> <li>Advanced authentication mechanisms</li> <li>Fine-grained authorization</li> <li> <p>Audit logging and compliance features</p> </li> <li> <p>Performance Optimizations</p> </li> <li>Reduced latency for intent execution</li> <li>Optimized PAT issuance and verification</li> <li> <p>Efficient caching strategies</p> </li> <li> <p>Ecosystem Expansion</p> </li> <li>SDKs for additional programming languages</li> <li>Integration with popular AI platforms</li> <li>Support for more web service frameworks</li> </ol>"},{"location":"community/roadmap/#long-term-6-months","title":"Long-term (6+ Months)","text":"<ol> <li>Standardization</li> <li>Formal specification for standardization</li> <li>Compliance testing suite</li> <li> <p>Certification program</p> </li> <li> <p>Enterprise Features</p> </li> <li>Multi-tenant support</li> <li>Advanced monitoring and analytics</li> <li> <p>High availability and disaster recovery</p> </li> <li> <p>Specialized Extensions</p> </li> <li>Industry-specific intent libraries</li> <li>Custom policy templates</li> <li>Domain-specific language extensions</li> </ol>"},{"location":"community/roadmap/#how-to-contribute","title":"How to Contribute","text":"<p>We welcome contributions to help us achieve the goals outlined in this roadmap. Here are some ways you can contribute:</p> <ol> <li>Implement Features: Pick a feature from the roadmap and implement it.</li> <li>Provide Feedback: Share your thoughts on the roadmap and suggest improvements.</li> <li>Test and Report Issues: Test the protocol and report any issues you find.</li> <li>Create Integrations: Integrate the UIM Protocol with other systems and services.</li> <li>Improve Documentation: Help improve the documentation to make it more accessible.</li> </ol> <p>For more information on how to contribute, see the Contributing Guide.</p>"},{"location":"community/roadmap/#feedback-and-suggestions","title":"Feedback and Suggestions","text":"<p>We value your feedback and suggestions for the UIM Protocol roadmap. If you have ideas for features or improvements, please share them through:</p> <ul> <li>GitHub Issues: For specific feature requests or bug reports</li> <li>GitHub Discussions: For general discussions about the roadmap</li> <li>Community Forums: For broader discussions about the protocol's direction</li> </ul>"},{"location":"community/roadmap/#disclaimer","title":"Disclaimer","text":"<p>This roadmap represents our current plans and is subject to change based on feedback, resources, and priorities. We will update it regularly to reflect the latest developments and plans.</p>"},{"location":"community/roadmap/#stay-updated","title":"Stay Updated","text":"<p>To stay updated on the UIM Protocol's progress:</p> <ul> <li>Watch the GitHub repository</li> <li>Join our Discord community</li> <li>Subscribe to our newsletter</li> <li>Follow us on Twitter</li> </ul> <p>Thank you for your interest in the UIM Protocol!</p>"},{"location":"guides/","title":"UIM Protocol Implementation Guides","text":"<p>Welcome to the UIM Protocol Implementation Guides. This section provides practical guidance for implementing the UIM Protocol in your applications, whether you're developing an AI agent or a web service.</p>"},{"location":"guides/#available-guides","title":"Available Guides","text":"<ul> <li>Getting Started: A quick introduction to the UIM Protocol and how to get started with implementation</li> <li>AI Agent Guide: Detailed guide for implementing the UIM Protocol in AI agents</li> <li>Service Provider Guide: Comprehensive guide for web service providers implementing the UIM Protocol</li> <li>Integration Examples: Real-world examples of UIM Protocol integration</li> </ul>"},{"location":"guides/#implementation-approach","title":"Implementation Approach","text":"<p>When implementing the UIM Protocol, we recommend the following approach:</p> <ol> <li>Understand the Core Concepts: Familiarize yourself with the core concepts of the UIM Protocol, including intents, metadata, and the execute method.</li> <li>Choose an Architecture: Decide which architecture (centralized, decentralized, or hybrid) best suits your needs.</li> <li>Implement Core Components: Implement the core components of the protocol, including discovery mechanisms, policy management, and intent execution.</li> <li>Test and Validate: Test your implementation against the validation suite to ensure compliance with the specification.</li> <li>Deploy and Monitor: Deploy your implementation and monitor its performance and security.</li> </ol>"},{"location":"guides/#implementation-checklist","title":"Implementation Checklist","text":""},{"location":"guides/#for-ai-agents","title":"For AI Agents","text":"<ul> <li> Implement intent discovery mechanisms</li> <li> Implement policy agreement and PAT management</li> <li> Implement intent execution</li> <li> Implement error handling and recovery</li> <li> Implement security measures</li> </ul>"},{"location":"guides/#for-web-services","title":"For Web Services","text":"<ul> <li> Define intents and metadata</li> <li> Implement discovery endpoints</li> <li> Implement policy management and PAT issuance</li> <li> Implement intent execution endpoints</li> <li> Implement security measures</li> </ul>"},{"location":"guides/#support-and-community","title":"Support and Community","text":"<p>If you need help with your implementation, you can:</p> <ul> <li>Join our Discord server for real-time support</li> <li>Ask questions on our GitHub Discussions</li> <li>Contribute to the protocol's development through GitHub Issues</li> </ul> <p>We're here to help you succeed with your UIM Protocol implementation!</p>"},{"location":"guides/ai-agent-guide/","title":"AI Agent Implementation Guide","text":"<p>This guide provides step-by-step instructions for implementing the UIM Protocol in an AI agent. It covers discovery, policy adherence, and intent execution.</p>"},{"location":"guides/ai-agent-guide/#overview","title":"Overview","text":"<p>AI agents use the UIM Protocol to discover and interact with web services through well-defined intents. This guide will walk you through the process of implementing the UIM Protocol in your AI agent, from discovery to execution.</p>"},{"location":"guides/ai-agent-guide/#prerequisites","title":"Prerequisites","text":"<p>Before implementing the UIM Protocol in your AI agent, you should have:</p> <ul> <li>A basic understanding of the UIM Protocol concepts (intents, metadata, PATs)</li> <li>A development environment for your AI agent</li> <li>Knowledge of HTTP requests and JSON processing</li> <li>Cryptographic capabilities for signing and verifying signatures</li> </ul>"},{"location":"guides/ai-agent-guide/#implementation-steps","title":"Implementation Steps","text":""},{"location":"guides/ai-agent-guide/#1-set-up-your-development-environment","title":"1. Set Up Your Development Environment","text":"<p>First, set up your development environment with the necessary libraries for HTTP requests, JSON processing, and cryptography. Here's an example using Python:</p> <pre><code># Required libraries\nimport requests\nimport json\nimport jwt\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives.hashes import SHA256\n</code></pre>"},{"location":"guides/ai-agent-guide/#2-generate-key-pair","title":"2. Generate Key Pair","text":"<p>Generate an RSA key pair for your AI agent. This will be used for signing policies and verifying signatures:</p> <pre><code>def generate_key_pair():\n    # Generate RSA key pair\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048\n    )\n    public_key = private_key.public_key()\n\n    # Serialize keys\n    private_pem = private_key.private_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PrivateFormat.PKCS8,\n        encryption_algorithm=serialization.NoEncryption()\n    )\n    public_pem = public_key.public_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PublicFormat.SubjectPublicKeyInfo\n    )\n\n    return private_pem, public_pem\n</code></pre>"},{"location":"guides/ai-agent-guide/#3-implement-service-discovery","title":"3. Implement Service Discovery","text":"<p>Implement service discovery using DNS TXT records and <code>agents.json</code> files:</p> <pre><code>def discover_service(domain):\n    \"\"\"\n    Discover a service using DNS TXT records and agents.json\n    \"\"\"\n    try:\n        # In a real implementation, this would use DNS queries\n        # For simplicity, we'll simulate it\n        agents_json_url = f\"https://{domain}/agents.json\"\n        return fetch_agents_json(agents_json_url)\n    except Exception as e:\n        print(f\"Error discovering service: {e}\")\n        return None\n\ndef fetch_agents_json(url):\n    \"\"\"\n    Fetch and parse the agents.json file\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n    except Exception as e:\n        print(f\"Error fetching agents.json: {e}\")\n        return None\n</code></pre>"},{"location":"guides/ai-agent-guide/#4-implement-intent-discovery","title":"4. Implement Intent Discovery","text":"<p>Implement intent discovery using the service's discovery endpoint:</p> <pre><code>def search_intents(service_url, query=None, tags=None):\n    \"\"\"\n    Search for intents using the service's discovery endpoint\n    \"\"\"\n    # Build query parameters\n    params = {}\n    if query:\n        params[\"query\"] = query\n    if tags:\n        params[\"tags\"] = \",\".join(tags)\n\n    try:\n        response = requests.get(\n            f\"{service_url}/uim/intents/search\",\n            params=params\n        )\n        response.raise_for_status()\n        return response.json()[\"intents\"]\n    except Exception as e:\n        print(f\"Error searching intents: {e}\")\n        return []\n</code></pre>"},{"location":"guides/ai-agent-guide/#5-implement-policy-retrieval-and-pat-acquisition","title":"5. Implement Policy Retrieval and PAT Acquisition","text":"<p>Implement policy retrieval and PAT acquisition:</p> <pre><code>def get_policy(policy_url):\n    \"\"\"\n    Retrieve the policy from the service\n    \"\"\"\n    try:\n        response = requests.get(policy_url)\n        response.raise_for_status()\n        return response.json()\n    except Exception as e:\n        print(f\"Error fetching policy: {e}\")\n        return None\n\ndef sign_policy(policy, private_key):\n    \"\"\"\n    Sign the policy using the private key\n    \"\"\"\n    private_key_obj = serialization.load_pem_private_key(\n        private_key,\n        password=None\n    )\n    policy_json = json.dumps(policy).encode('utf-8')\n    signature = private_key_obj.sign(\n        policy_json,\n        padding.PKCS1v15(),\n        SHA256()\n    )\n    return signature\n\ndef request_pat(service_url, agent_id, signed_policy, public_key):\n    \"\"\"\n    Request a PAT from the service\n    \"\"\"\n    try:\n        response = requests.post(\n            f\"{service_url}/pat/issue\",\n            json={\n                \"agent_id\": agent_id,\n                \"signed_policy\": signed_policy.hex(),\n                \"agent_public_key\": public_key.decode('utf-8')\n            }\n        )\n        response.raise_for_status()\n        return response.json()[\"uim-pat\"]\n    except Exception as e:\n        print(f\"Error requesting PAT: {e}\")\n        return None\n</code></pre>"},{"location":"guides/ai-agent-guide/#6-implement-intent-execution","title":"6. Implement Intent Execution","text":"<p>Implement intent execution:</p> <pre><code>def execute_intent(service_url, intent_uid, parameters, pat):\n    \"\"\"\n    Execute an intent\n    \"\"\"\n    try:\n        response = requests.post(\n            f\"{service_url}/uim/execute\",\n            headers={\n                \"Authorization\": f\"Bearer {pat}\",\n                \"Content-Type\": \"application/json\"\n            },\n            json={\n                \"intent_uid\": intent_uid,\n                \"parameters\": parameters\n            }\n        )\n        response.raise_for_status()\n        return response.json()\n    except Exception as e:\n        print(f\"Error executing intent: {e}\")\n        return None\n</code></pre>"},{"location":"guides/ai-agent-guide/#7-put-it-all-together","title":"7. Put It All Together","text":"<p>Now, let's put it all together in a complete AI agent implementation:</p> <pre><code>class UIMAgent:\n    def __init__(self, agent_id):\n        self.agent_id = agent_id\n        self.private_key, self.public_key = generate_key_pair()\n        self.pats = {}  # Store PATs for different services\n\n    def discover_service(self, domain):\n        return discover_service(domain)\n\n    def search_intents(self, service_url, query=None, tags=None):\n        return search_intents(service_url, query, tags)\n\n    def get_policy(self, policy_url):\n        return get_policy(policy_url)\n\n    def sign_policy(self, policy):\n        return sign_policy(policy, self.private_key)\n\n    def request_pat(self, service_url, signed_policy):\n        pat = request_pat(service_url, self.agent_id, signed_policy, self.public_key)\n        if pat:\n            self.pats[service_url] = pat\n        return pat\n\n    def execute_intent(self, service_url, intent_uid, parameters):\n        pat = self.pats.get(service_url)\n        if not pat:\n            print(f\"No PAT available for {service_url}\")\n            return None\n\n        return execute_intent(service_url, intent_uid, parameters, pat)\n\n    def interact_with_service(self, domain, query=None, tags=None):\n        \"\"\"\n        High-level method to interact with a service\n        \"\"\"\n        # Discover service\n        service_info = self.discover_service(domain)\n        if not service_info:\n            return None\n\n        # Get service details\n        policy_url = service_info[\"uim-policy-file\"]\n        service_url = service_info[\"service-info\"][\"service_url\"]\n\n        # Get policy and request PAT\n        policy = self.get_policy(policy_url)\n        if not policy:\n            return None\n\n        signed_policy = self.sign_policy(policy)\n        pat = self.request_pat(service_url, signed_policy)\n        if not pat:\n            return None\n\n        # Search for intents\n        intents = self.search_intents(service_url, query, tags)\n        return intents\n\n    def execute_intent_by_name(self, domain, intent_name, parameters):\n        \"\"\"\n        Execute an intent by name\n        \"\"\"\n        # Discover service\n        service_info = self.discover_service(domain)\n        if not service_info:\n            return None\n\n        # Get service details\n        policy_url = service_info[\"uim-policy-file\"]\n        service_url = service_info[\"service-info\"][\"service_url\"]\n\n        # Get policy and request PAT if needed\n        if service_url not in self.pats:\n            policy = self.get_policy(policy_url)\n            if not policy:\n                return None\n\n            signed_policy = self.sign_policy(policy)\n            pat = self.request_pat(service_url, signed_policy)\n            if not pat:\n                return None\n\n        # Search for the intent\n        intents = self.search_intents(service_url, intent_name=intent_name)\n        if not intents:\n            return None\n\n        # Find the intent with the matching name\n        intent = next((i for i in intents if i[\"intent_name\"] == intent_name), None)\n        if not intent:\n            return None\n\n        # Execute the intent\n        return self.execute_intent(service_url, intent[\"intent_uid\"], parameters)\n</code></pre>"},{"location":"guides/ai-agent-guide/#example-usage","title":"Example Usage","text":"<p>Here's an example of how to use the UIM agent to interact with a web service:</p> <pre><code># Create an AI agent\nagent = UIMAgent(\"ai-agent-123\")\n\n# Interact with a service\nintents = agent.interact_with_service(\"example.com\", tags=[\"e-commerce\", \"search\"])\n\n# Print available intents\nfor intent in intents:\n    print(f\"Intent: {intent['intent_name']}\")\n    print(f\"Description: {intent['description']}\")\n    print(f\"UID: {intent['intent_uid']}\")\n    print(\"---\")\n\n# Execute an intent\nresult = agent.execute_intent_by_name(\n    \"example.com\",\n    \"SearchProducts\",\n    {\"query\": \"laptop\", \"category\": \"electronics\"}\n)\n\n# Process the result\nif result:\n    print(f\"Found {result['total_results']} products:\")\n    for product in result['products']:\n        print(f\"- {product['name']} (${product['price']})\")\n</code></pre>"},{"location":"guides/ai-agent-guide/#error-handling","title":"Error Handling","text":"<p>When implementing the UIM Protocol, it's important to handle errors properly. Here are some common errors and how to handle them:</p>"},{"location":"guides/ai-agent-guide/#discovery-errors","title":"Discovery Errors","text":"<ul> <li>DNS Resolution Errors: Handle DNS resolution errors by providing clear error messages and fallback mechanisms.</li> <li>Network Errors: Handle network errors by implementing retry logic with exponential backoff.</li> </ul>"},{"location":"guides/ai-agent-guide/#policy-and-pat-errors","title":"Policy and PAT Errors","text":"<ul> <li>Policy Retrieval Errors: Handle policy retrieval errors by providing clear error messages and fallback mechanisms.</li> <li>PAT Issuance Errors: Handle PAT issuance errors by checking the error response and taking appropriate action.</li> </ul>"},{"location":"guides/ai-agent-guide/#intent-execution-errors","title":"Intent Execution Errors","text":"<ul> <li>Validation Errors: Handle validation errors by checking the input parameters before sending the request.</li> <li>Execution Errors: Handle execution errors by checking the error response and taking appropriate action.</li> <li>Rate Limiting Errors: Handle rate limiting errors by implementing retry logic with exponential backoff.</li> </ul>"},{"location":"guides/ai-agent-guide/#best-practices","title":"Best Practices","text":"<p>Here are some best practices for implementing the UIM Protocol in your AI agent:</p>"},{"location":"guides/ai-agent-guide/#security","title":"Security","text":"<ul> <li>Secure Key Storage: Store private keys securely, using hardware security modules (HSMs) when possible.</li> <li>Policy Validation: Validate policies before agreeing to them, ensuring they are reasonable and do not pose security risks.</li> <li>PAT Management: Securely store PATs and renew them before they expire.</li> </ul>"},{"location":"guides/ai-agent-guide/#performance","title":"Performance","text":"<ul> <li>Caching: Cache discovery results, policies, and PATs to reduce the number of network requests.</li> <li>Connection Pooling: Use connection pooling to reduce the overhead of establishing new connections.</li> <li>Asynchronous Requests: Use asynchronous requests to improve performance when making multiple requests.</li> </ul>"},{"location":"guides/ai-agent-guide/#reliability","title":"Reliability","text":"<ul> <li>Retry Logic: Implement retry logic with exponential backoff for transient errors.</li> <li>Circuit Breakers: Implement circuit breakers to prevent cascading failures.</li> <li>Fallbacks: Implement fallback mechanisms for critical functionality.</li> </ul>"},{"location":"guides/ai-agent-guide/#conclusion","title":"Conclusion","text":"<p>By following this guide, you should now have a basic understanding of how to implement the UIM Protocol in your AI agent. Remember to handle errors properly, follow best practices, and test your implementation thoroughly.</p> <p>For more information, refer to the UIM Protocol Specification and the API Reference.</p>"},{"location":"guides/getting-started/","title":"Getting Started with the UIM Protocol","text":"<p>This guide will help you get started with implementing the UIM Protocol in your applications. Whether you're developing an AI agent or a web service, this guide will provide you with the information you need to begin.</p>"},{"location":"guides/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you start implementing the UIM Protocol, you should have:</p> <ul> <li>Basic knowledge of web development and APIs</li> <li>Familiarity with JSON and HTTP</li> <li>Understanding of authentication and security concepts</li> <li>Development environment set up for your preferred programming language</li> </ul>"},{"location":"guides/getting-started/#implementation-overview","title":"Implementation Overview","text":"<p>Implementing the UIM Protocol involves several steps, depending on whether you're developing an AI agent or a web service. Here's a high-level overview of the process:</p>"},{"location":"guides/getting-started/#for-ai-agents","title":"For AI Agents","text":"<ol> <li>Discover Intents: Implement mechanisms to discover available intents from web services.</li> <li>Agree to Policies: Implement policy agreement and PAT management.</li> <li>Execute Intents: Implement intent execution with proper authentication and error handling.</li> </ol>"},{"location":"guides/getting-started/#for-web-services","title":"For Web Services","text":"<ol> <li>Define Intents: Define the intents your service will offer, including metadata and parameters.</li> <li>Implement Discovery: Set up discovery mechanisms like DNS TXT records and <code>agents.json</code> files.</li> <li>Manage Policies: Implement policy management and PAT issuance.</li> <li>Execute Intents: Implement intent execution endpoints with proper validation and error handling.</li> </ol>"},{"location":"guides/getting-started/#quick-start-ai-agent","title":"Quick Start: AI Agent","text":"<p>Here's a quick guide to implementing a basic AI agent that can discover and execute intents:</p>"},{"location":"guides/getting-started/#1-discover-intents","title":"1. Discover Intents","text":"<p>First, you need to discover available intents from web services. You can do this by querying DNS TXT records and retrieving <code>agents.json</code> files:</p> <pre><code>import dns.resolver\nimport requests\nimport json\n\ndef discover_service(domain):\n    # Query DNS TXT records\n    try:\n        answers = dns.resolver.resolve(domain, 'TXT')\n        for rdata in answers:\n            for txt_string in rdata.strings:\n                txt_string = txt_string.decode('utf-8')\n                if txt_string.startswith('uim-agents='):\n                    agents_json_url = txt_string.split('=', 1)[1]\n                    return fetch_agents_json(agents_json_url)\n    except Exception as e:\n        print(f\"Error querying DNS: {e}\")\n\n    # Try default location\n    return fetch_agents_json(f\"https://{domain}/agents.json\")\n\ndef fetch_agents_json(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n    except Exception as e:\n        print(f\"Error fetching agents.json: {e}\")\n        return None\n\n# Example usage\nservice_info = discover_service('example.com')\nif service_info:\n    print(f\"Service: {service_info['service-info']['name']}\")\n    print(f\"Intents: {len(service_info['intents'])}\")\n    for intent in service_info['intents']:\n        print(f\"  - {intent['intent_name']}: {intent['description']}\")\n</code></pre>"},{"location":"guides/getting-started/#2-agree-to-policies-and-obtain-pat","title":"2. Agree to Policies and Obtain PAT","text":"<p>Next, you need to agree to the service's policies and obtain a Policy Adherence Token (PAT):</p> <pre><code>import jwt\nimport requests\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives.hashes import SHA256\n\ndef generate_key_pair():\n    # Generate RSA key pair\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048\n    )\n    public_key = private_key.public_key()\n\n    # Serialize keys\n    private_pem = private_key.private_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PrivateFormat.PKCS8,\n        encryption_algorithm=serialization.NoEncryption()\n    )\n    public_pem = public_key.public_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PublicFormat.SubjectPublicKeyInfo\n    )\n\n    return private_pem, public_pem\n\ndef get_policy(policy_url):\n    try:\n        response = requests.get(policy_url)\n        response.raise_for_status()\n        return response.json()\n    except Exception as e:\n        print(f\"Error fetching policy: {e}\")\n        return None\n\ndef sign_policy(policy, private_key):\n    # Sign the policy using the private key\n    private_key_obj = serialization.load_pem_private_key(\n        private_key,\n        password=None\n    )\n    policy_json = json.dumps(policy).encode('utf-8')\n    signature = private_key_obj.sign(\n        policy_json,\n        padding.PKCS1v15(),\n        SHA256()\n    )\n    return signature\n\ndef request_pat(service_url, agent_id, signed_policy, public_key):\n    try:\n        response = requests.post(\n            f\"{service_url}/pat/issue\",\n            json={\n                \"agent_id\": agent_id,\n                \"signed_policy\": signed_policy.hex(),\n                \"agent_public_key\": public_key.decode('utf-8')\n            }\n        )\n        response.raise_for_status()\n        return response.json()[\"uim-pat\"]\n    except Exception as e:\n        print(f\"Error requesting PAT: {e}\")\n        return None\n\n# Example usage\nprivate_key, public_key = generate_key_pair()\npolicy = get_policy(\"https://example.com/uim-policy.json\")\nif policy:\n    signed_policy = sign_policy(policy, private_key)\n    pat = request_pat(\n        \"https://api.example.com\",\n        \"ai-agent-123\",\n        signed_policy,\n        public_key\n    )\n    if pat:\n        print(f\"PAT obtained: {pat}\")\n</code></pre>"},{"location":"guides/getting-started/#3-execute-intents","title":"3. Execute Intents","text":"<p>Finally, you can execute intents using the PAT:</p> <pre><code>def execute_intent(service_url, intent_uid, parameters, pat):\n    try:\n        response = requests.post(\n            f\"{service_url}/uim/execute\",\n            headers={\n                \"Authorization\": f\"Bearer {pat}\",\n                \"Content-Type\": \"application/json\"\n            },\n            json={\n                \"intent_uid\": intent_uid,\n                \"parameters\": parameters\n            }\n        )\n        response.raise_for_status()\n        return response.json()\n    except Exception as e:\n        print(f\"Error executing intent: {e}\")\n        return None\n\n# Example usage\nresult = execute_intent(\n    \"https://api.example.com\",\n    \"example.com:search-products:v1\",\n    {\"query\": \"laptop\"},\n    pat\n)\nif result:\n    print(f\"Result: {result}\")\n</code></pre>"},{"location":"guides/getting-started/#quick-start-web-service","title":"Quick Start: Web Service","text":"<p>Here's a quick guide to implementing a basic web service that offers intents:</p>"},{"location":"guides/getting-started/#1-define-intents","title":"1. Define Intents","text":"<p>First, define the intents your service will offer:</p> <pre><code>intents = [\n    {\n        \"intent_uid\": \"example.com:search-products:v1\",\n        \"intent_name\": \"SearchProducts\",\n        \"description\": \"Search for products based on criteria\",\n        \"input_parameters\": [\n            {\n                \"name\": \"query\",\n                \"type\": \"string\",\n                \"required\": True,\n                \"description\": \"Search query string\"\n            }\n        ],\n        \"output_parameters\": [\n            {\n                \"name\": \"products\",\n                \"type\": \"array\",\n                \"description\": \"List of matching products\"\n            }\n        ],\n        \"endpoint\": {\n            \"url\": \"https://api.example.com/products/search\",\n            \"method\": \"POST\",\n            \"content_type\": \"application/json\"\n        },\n        \"tags\": [\n            \"e-commerce\",\n            \"search\",\n            \"products\"\n        ]\n    }\n]\n</code></pre>"},{"location":"guides/getting-started/#2-set-up-discovery","title":"2. Set Up Discovery","text":"<p>Next, set up discovery mechanisms:</p>"},{"location":"guides/getting-started/#dns-txt-records","title":"DNS TXT Records","text":"<p>Add the following TXT records to your domain:</p> <pre><code>_uim.example.com. IN TXT \"uim-agents=https://example.com/agents.json\"\n_uim.example.com. IN TXT \"uim-discovery=https://api.example.com/discovery\"\n_uim.example.com. IN TXT \"uim-policy=https://example.com/policy.json\"\n</code></pre>"},{"location":"guides/getting-started/#agentsjson-file","title":"<code>agents.json</code> File","text":"<p>Create an <code>agents.json</code> file with information about your service and intents:</p> <pre><code>import json\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n\ndef generate_key_pair():\n    # Generate RSA key pair\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048\n    )\n    public_key = private_key.public_key()\n\n    # Serialize keys\n    private_pem = private_key.private_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PrivateFormat.PKCS8,\n        encryption_algorithm=serialization.NoEncryption()\n    )\n    public_pem = public_key.public_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PublicFormat.SubjectPublicKeyInfo\n    )\n\n    return private_pem, public_pem\n\ndef create_agents_json(service_name, service_description, service_url, intents):\n    private_key, public_key = generate_key_pair()\n\n    # Save private key to file\n    with open(\"private_key.pem\", \"wb\") as f:\n        f.write(private_key)\n\n    agents_json = {\n        \"service-info\": {\n            \"name\": service_name,\n            \"description\": service_description,\n            \"service_url\": service_url,\n            \"service_logo_url\": f\"{service_url}/logo.png\",\n            \"service_terms_of_service_url\": f\"{service_url}/terms\",\n            \"service_privacy_policy_url\": f\"{service_url}/privacy\"\n        },\n        \"intents\": intents,\n        \"uim-public-key\": public_key.decode('utf-8'),\n        \"uim-policy-file\": f\"{service_url}/uim-policy.json\",\n        \"uim-api-discovery\": f\"{service_url}/uim/intents/search\",\n        \"uim-compliance\": {\n            \"standards\": [\"ISO27001\", \"GDPR\"],\n            \"regional-compliance\": {\n                \"EU\": \"GDPR\",\n                \"US-CA\": \"CCPA\"\n            },\n            \"notes\": \"Data is encrypted in transit and at rest.\"\n        }\n    }\n\n    # Save agents.json to file\n    with open(\"agents.json\", \"w\") as f:\n        json.dump(agents_json, f, indent=2)\n\n    return agents_json\n\n# Example usage\nagents_json = create_agents_json(\n    \"Example E-commerce Service\",\n    \"Provides e-commerce functionalities\",\n    \"https://api.example.com\",\n    intents\n)\n</code></pre>"},{"location":"guides/getting-started/#3-implement-policy-management-and-pat-issuance","title":"3. Implement Policy Management and PAT Issuance","text":"<p>Implement policy management and PAT issuance:</p> <pre><code>import jwt\nimport json\nimport time\nimport uuid\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.primitives.hashes import SHA256\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\ndef load_private_key():\n    with open(\"private_key.pem\", \"rb\") as f:\n        private_key = serialization.load_pem_private_key(\n            f.read(),\n            password=None\n        )\n    return private_key\n\ndef verify_signed_policy(signed_policy_hex, agent_public_key_pem):\n    try:\n        # Convert hex to bytes\n        signed_policy = bytes.fromhex(signed_policy_hex)\n\n        # Load agent's public key\n        agent_public_key = serialization.load_pem_public_key(\n            agent_public_key_pem.encode('utf-8')\n        )\n\n        # Load policy\n        with open(\"uim-policy.json\", \"rb\") as f:\n            policy = f.read()\n\n        # Verify signature\n        agent_public_key.verify(\n            signed_policy,\n            policy,\n            padding.PKCS1v15(),\n            SHA256()\n        )\n\n        return True\n    except Exception as e:\n        print(f\"Error verifying signed policy: {e}\")\n        return False\n\n@app.route(\"/pat/issue\", methods=[\"POST\"])\ndef issue_pat():\n    data = request.json\n    agent_id = data.get(\"agent_id\")\n    signed_policy = data.get(\"signed_policy\")\n    agent_public_key = data.get(\"agent_public_key\")\n\n    if not agent_id or not signed_policy or not agent_public_key:\n        return jsonify({\"error\": \"Missing required parameters\"}), 400\n\n    if not verify_signed_policy(signed_policy, agent_public_key):\n        return jsonify({\"error\": \"Invalid policy signature\"}), 400\n\n    # Generate PAT\n    private_key = load_private_key()\n    pat = {\n        \"iss\": \"example.com\",\n        \"sub\": agent_id,\n        \"exp\": int(time.time()) + 86400,  # 24 hours\n        \"nbf\": int(time.time()),\n        \"jti\": str(uuid.uuid4()),\n        \"scope\": [\"example.com:search-products:v1:execute\"],\n        \"pol\": \"https://example.com/uim-policy.json\",\n        \"lmt\": {\n            \"rate\": 100,\n            \"period\": 3600\n        }\n    }\n\n    # Sign PAT\n    token = jwt.encode(pat, private_key, algorithm=\"RS256\")\n\n    return jsonify({\"uim-pat\": token})\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=4000)\n</code></pre>"},{"location":"guides/getting-started/#4-implement-intent-execution","title":"4. Implement Intent Execution","text":"<p>Finally, implement intent execution:</p> <pre><code>import jwt\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\ndef verify_pat(pat):\n    try:\n        # Load public key\n        with open(\"public_key.pem\", \"rb\") as f:\n            public_key = f.read()\n\n        # Verify PAT\n        decoded_pat = jwt.decode(\n            pat,\n            public_key,\n            algorithms=[\"RS256\"],\n            options={\"verify_aud\": False}\n        )\n\n        return decoded_pat\n    except Exception as e:\n        print(f\"Error verifying PAT: {e}\")\n        return None\n\n@app.route(\"/uim/execute\", methods=[\"POST\"])\ndef execute_intent():\n    # Get PAT from Authorization header\n    auth_header = request.headers.get(\"Authorization\")\n    if not auth_header or not auth_header.startswith(\"Bearer \"):\n        return jsonify({\"error\": \"Missing or invalid Authorization header\"}), 401\n\n    pat = auth_header.split(\" \")[1]\n    decoded_pat = verify_pat(pat)\n    if not decoded_pat:\n        return jsonify({\"error\": \"Invalid PAT\"}), 401\n\n    # Get intent and parameters\n    data = request.json\n    intent_uid = data.get(\"intent_uid\")\n    parameters = data.get(\"parameters\", {})\n\n    if not intent_uid:\n        return jsonify({\"error\": \"Missing intent_uid\"}), 400\n\n    # Check if intent is allowed by PAT\n    if f\"{intent_uid}:execute\" not in decoded_pat.get(\"scope\", []):\n        return jsonify({\"error\": \"Intent not allowed by PAT\"}), 403\n\n    # Execute intent\n    if intent_uid == \"example.com:search-products:v1\":\n        query = parameters.get(\"query\")\n        if not query:\n            return jsonify({\"error\": \"Missing required parameter: query\"}), 400\n\n        # Simulate search\n        products = [\n            {\n                \"id\": \"123\",\n                \"name\": \"Laptop\",\n                \"price\": 1000,\n                \"description\": \"A powerful laptop\"\n            }\n        ]\n\n        return jsonify({\n            \"products\": products,\n            \"total_results\": len(products)\n        })\n    else:\n        return jsonify({\"error\": \"Unknown intent\"}), 400\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=4000)\n</code></pre>"},{"location":"guides/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have a basic understanding of how to implement the UIM Protocol, you can:</p> <ul> <li>Explore the AI Agent Guide for more detailed information on implementing an AI agent.</li> <li>Check out the Service Provider Guide for more detailed information on implementing a web service.</li> <li>See the Integration Examples for real-world examples of UIM Protocol integration.</li> <li>Refer to the Specification for detailed information about the protocol.</li> </ul>"},{"location":"guides/getting-started/#resources","title":"Resources","text":"<ul> <li>UIM Protocol GitHub Repository</li> <li>UIM Protocol Discord Server</li> <li>UIM Protocol Twitter</li> </ul>"},{"location":"guides/integration-examples/","title":"Integration Examples","text":"<p>This page provides practical examples of how AI agents and web services can integrate with each other using the UIM Protocol. These examples demonstrate the key concepts and workflows of the protocol in real-world scenarios.</p>"},{"location":"guides/integration-examples/#e-commerce-integration-example","title":"E-commerce Integration Example","text":"<p>This example demonstrates how an AI agent can interact with an e-commerce web service to search for products and place orders.</p>"},{"location":"guides/integration-examples/#scenario","title":"Scenario","text":"<p>A user asks an AI assistant to find and purchase a laptop with specific requirements:</p> <p>\"I need a laptop with at least 16GB RAM, an i7 processor, and a budget of around $1500.\"</p>"},{"location":"guides/integration-examples/#implementation-steps","title":"Implementation Steps","text":""},{"location":"guides/integration-examples/#1-service-discovery","title":"1. Service Discovery","text":"<p>The AI agent first discovers the e-commerce service using DNS TXT records:</p> <pre><code>import dns.resolver\nimport requests\nimport json\n\n# Query DNS TXT records\ntxt_records = dns.resolver.resolve('ecommerce.example.com', 'TXT')\nagents_json_url = None\n\n# Parse TXT records\nfor record in txt_records:\n    for txt_string in record.strings:\n        txt_string = txt_string.decode('utf-8')\n        if txt_string.startswith('uim-agents-file='):\n            agents_json_url = txt_string.split('=')[1]\n            break\n\n# Fetch agents.json\nif agents_json_url:\n    response = requests.get(agents_json_url)\n    agents_json = response.json()\n</code></pre>"},{"location":"guides/integration-examples/#2-intent-discovery","title":"2. Intent Discovery","text":"<p>The AI agent searches for relevant intents:</p> <pre><code># Get discovery endpoint from agents.json\ndiscovery_endpoint = agents_json.get('uim-api-discovery')\n\n# Search for intents\nresponse = requests.get(\n    discovery_endpoint,\n    params={\n        'tags': 'e-commerce,search,products'\n    }\n)\nintents = response.json().get('intents', [])\n\n# Find the search intent\nsearch_intent = next((i for i in intents if i['intent_name'] == 'SearchProducts'), None)\n</code></pre>"},{"location":"guides/integration-examples/#3-policy-retrieval-and-pat-acquisition","title":"3. Policy Retrieval and PAT Acquisition","text":"<p>The AI agent retrieves the policy and requests a PAT:</p> <pre><code># Get policy URL from agents.json\npolicy_url = agents_json.get('uim-policy-file')\n\n# Retrieve policy\nresponse = requests.get(policy_url)\npolicy = response.json()\n\n# Sign policy\npolicy_json = json.dumps(policy).encode('utf-8')\nsignature = private_key.sign(\n    policy_json,\n    padding.PKCS1v15(),\n    SHA256()\n)\n\n# Request PAT\nresponse = requests.post(\n    f\"{agents_json['service-info']['service_url']}/pat/issue\",\n    json={\n        'agent_id': 'ai-agent-123',\n        'signed_policy': signature.hex(),\n        'agent_public_key': public_key.decode('utf-8')\n    }\n)\npat = response.json().get('uim-pat')\n</code></pre>"},{"location":"guides/integration-examples/#4-intent-execution","title":"4. Intent Execution","text":"<p>The AI agent executes the search intent:</p> <pre><code># Execute search intent\nresponse = requests.post(\n    f\"{agents_json['service-info']['service_url']}/uim/execute\",\n    headers={\n        'Authorization': f'Bearer {pat}',\n        'Content-Type': 'application/json'\n    },\n    json={\n        'intent_uid': search_intent['intent_uid'],\n        'parameters': {\n            'query': 'laptop',\n            'category': 'electronics',\n            'filters': {\n                'ram': '16GB+',\n                'processor': 'i7',\n                'price_range': '1000-2000'\n            }\n        }\n    }\n)\nsearch_results = response.json()\n\n# Process search results\nlaptops = search_results.get('products', [])\nfor laptop in laptops:\n    print(f\"Found: {laptop['name']} - ${laptop['price']}\")\n</code></pre>"},{"location":"guides/integration-examples/#5-order-placement","title":"5. Order Placement","text":"<p>After the user selects a laptop, the AI agent executes the order intent:</p> <pre><code># Find the order intent\norder_intent = next((i for i in intents if i['intent_name'] == 'PlaceOrder'), None)\n\n# Execute order intent\nresponse = requests.post(\n    f\"{agents_json['service-info']['service_url']}/uim/execute\",\n    headers={\n        'Authorization': f'Bearer {pat}',\n        'Content-Type': 'application/json'\n    },\n    json={\n        'intent_uid': order_intent['intent_uid'],\n        'parameters': {\n            'product_id': selected_laptop['id'],\n            'quantity': 1,\n            'shipping_address': {\n                'name': 'John Doe',\n                'street': '123 Main St',\n                'city': 'Anytown',\n                'state': 'CA',\n                'zip': '12345',\n                'country': 'USA'\n            },\n            'payment_method': {\n                'type': 'credit_card',\n                'token': 'payment-token-123'\n            }\n        }\n    }\n)\norder_result = response.json()\nprint(f\"Order placed: {order_result['order_id']}\")\n</code></pre>"},{"location":"guides/integration-examples/#content-management-integration-example","title":"Content Management Integration Example","text":"<p>This example demonstrates how an AI agent can interact with a content management system (CMS) to create and publish content.</p>"},{"location":"guides/integration-examples/#scenario_1","title":"Scenario","text":"<p>A user asks an AI assistant to create a blog post about a specific topic and publish it on their website:</p> <p>\"Create a blog post about the benefits of artificial intelligence in healthcare and publish it on my website.\"</p>"},{"location":"guides/integration-examples/#implementation-steps_1","title":"Implementation Steps","text":""},{"location":"guides/integration-examples/#1-service-discovery-and-intent-discovery","title":"1. Service Discovery and Intent Discovery","text":"<p>Similar to the e-commerce example, the AI agent discovers the CMS service and its intents.</p>"},{"location":"guides/integration-examples/#2-content-creation","title":"2. Content Creation","text":"<p>The AI agent executes the content creation intent:</p> <pre><code># Execute content creation intent\nresponse = requests.post(\n    f\"{agents_json['service-info']['service_url']}/uim/execute\",\n    headers={\n        'Authorization': f'Bearer {pat}',\n        'Content-Type': 'application/json'\n    },\n    json={\n        'intent_uid': 'cms.example.com:create-content:v1',\n        'parameters': {\n            'title': 'The Benefits of AI in Healthcare',\n            'content_type': 'blog_post',\n            'content': {\n                'body': '# The Benefits of AI in Healthcare\\n\\nArtificial intelligence is transforming healthcare in numerous ways...',\n                'excerpt': 'Discover how AI is revolutionizing healthcare delivery and patient outcomes.',\n                'format': 'markdown'\n            },\n            'metadata': {\n                'author': 'AI Assistant',\n                'categories': ['Healthcare', 'Technology', 'AI'],\n                'tags': ['artificial intelligence', 'healthcare', 'medical technology']\n            }\n        }\n    }\n)\ncontent_result = response.json()\ncontent_id = content_result['content_id']\n</code></pre>"},{"location":"guides/integration-examples/#3-content-publication","title":"3. Content Publication","text":"<p>The AI agent executes the content publication intent:</p> <pre><code># Execute content publication intent\nresponse = requests.post(\n    f\"{agents_json['service-info']['service_url']}/uim/execute\",\n    headers={\n        'Authorization': f'Bearer {pat}',\n        'Content-Type': 'application/json'\n    },\n    json={\n        'intent_uid': 'cms.example.com:publish-content:v1',\n        'parameters': {\n            'content_id': content_id,\n            'publish_date': '2025-03-13T16:00:00Z',\n            'status': 'published'\n        }\n    }\n)\npublication_result = response.json()\nprint(f\"Content published: {publication_result['url']}\")\n</code></pre>"},{"location":"guides/integration-examples/#calendar-integration-example","title":"Calendar Integration Example","text":"<p>This example demonstrates how an AI agent can interact with a calendar service to schedule meetings.</p>"},{"location":"guides/integration-examples/#scenario_2","title":"Scenario","text":"<p>A user asks an AI assistant to schedule a meeting with their team:</p> <p>\"Schedule a team meeting for next Tuesday at 2 PM for 1 hour with the marketing team.\"</p>"},{"location":"guides/integration-examples/#implementation-steps_2","title":"Implementation Steps","text":""},{"location":"guides/integration-examples/#1-service-discovery-and-intent-discovery_1","title":"1. Service Discovery and Intent Discovery","text":"<p>Similar to the previous examples, the AI agent discovers the calendar service and its intents.</p>"},{"location":"guides/integration-examples/#2-availability-check","title":"2. Availability Check","text":"<p>The AI agent executes the availability check intent:</p> <pre><code># Execute availability check intent\nresponse = requests.post(\n    f\"{agents_json['service-info']['service_url']}/uim/execute\",\n    headers={\n        'Authorization': f'Bearer {pat}',\n        'Content-Type': 'application/json'\n    },\n    json={\n        'intent_uid': 'calendar.example.com:check-availability:v1',\n        'parameters': {\n            'date': '2025-03-18',\n            'start_time': '14:00',\n            'end_time': '15:00',\n            'timezone': 'America/New_York',\n            'attendees': ['marketing-team@example.com']\n        }\n    }\n)\navailability_result = response.json()\n</code></pre>"},{"location":"guides/integration-examples/#3-meeting-creation","title":"3. Meeting Creation","text":"<p>If everyone is available, the AI agent executes the meeting creation intent:</p> <pre><code># Execute meeting creation intent\nresponse = requests.post(\n    f\"{agents_json['service-info']['service_url']}/uim/execute\",\n    headers={\n        'Authorization': f'Bearer {pat}',\n        'Content-Type': 'application/json'\n    },\n    json={\n        'intent_uid': 'calendar.example.com:create-event:v1',\n        'parameters': {\n            'title': 'Marketing Team Meeting',\n            'description': 'Weekly team sync to discuss ongoing projects and priorities.',\n            'date': '2025-03-18',\n            'start_time': '14:00',\n            'end_time': '15:00',\n            'timezone': 'America/New_York',\n            'location': 'Conference Room A',\n            'attendees': ['marketing-team@example.com'],\n            'reminders': [\n                {'type': 'email', 'minutes_before': 60},\n                {'type': 'notification', 'minutes_before': 10}\n            ]\n        }\n    }\n)\nmeeting_result = response.json()\nprint(f\"Meeting scheduled: {meeting_result['event_id']}\")\n</code></pre>"},{"location":"guides/integration-examples/#conclusion","title":"Conclusion","text":"<p>These examples demonstrate how the UIM Protocol enables AI agents to interact with web services in a standardized way. By following the protocol's discovery, policy adherence, and intent execution workflows, AI agents can provide users with seamless access to a wide range of services.</p> <p>For more detailed implementation guidance, refer to the AI Agent Implementation Guide and Service Provider Implementation Guide.</p>"},{"location":"guides/service-provider-guide/","title":"Service Provider Implementation Guide","text":"<p>This guide provides step-by-step instructions for implementing the UIM Protocol in a web service. It covers service registration, intent definition, policy management, and intent execution.</p>"},{"location":"guides/service-provider-guide/#overview","title":"Overview","text":"<p>Web services use the UIM Protocol to expose their capabilities to AI agents through well-defined intents. This guide will walk you through the process of implementing the UIM Protocol in your web service, from service registration to intent execution.</p>"},{"location":"guides/service-provider-guide/#prerequisites","title":"Prerequisites","text":"<p>Before implementing the UIM Protocol in your web service, you should have:</p> <ul> <li>A basic understanding of the UIM Protocol concepts (intents, metadata, PATs)</li> <li>A web service with an API</li> <li>Knowledge of HTTP requests and JSON processing</li> <li>Cryptographic capabilities for signing and verifying signatures</li> </ul>"},{"location":"guides/service-provider-guide/#implementation-steps","title":"Implementation Steps","text":""},{"location":"guides/service-provider-guide/#1-set-up-your-development-environment","title":"1. Set Up Your Development Environment","text":"<p>First, set up your development environment with the necessary libraries for HTTP requests, JSON processing, and cryptography. Here's an example using Node.js:</p> <pre><code>// Required libraries\nconst express = require('express');\nconst crypto = require('crypto');\nconst jwt = require('jsonwebtoken');\nconst fs = require('fs');\n</code></pre>"},{"location":"guides/service-provider-guide/#2-generate-key-pair","title":"2. Generate Key Pair","text":"<p>Generate an RSA key pair for your web service. This will be used for signing PATs and verifying signatures:</p> <pre><code>function generateKeyPair() {\n  return crypto.generateKeyPairSync('rsa', {\n    modulusLength: 2048,\n    publicKeyEncoding: {\n      type: 'spki',\n      format: 'pem'\n    },\n    privateKeyEncoding: {\n      type: 'pkcs8',\n      format: 'pem'\n    }\n  });\n}\n\n// Generate and save keys\nconst { privateKey, publicKey } = generateKeyPair();\nfs.writeFileSync('private-key.pem', privateKey);\nfs.writeFileSync('public-key.pem', publicKey);\n</code></pre>"},{"location":"guides/service-provider-guide/#3-define-your-intents","title":"3. Define Your Intents","text":"<p>Define the intents that your web service will expose to AI agents:</p> <pre><code>const intents = [\n  {\n    intent_uid: 'example.com:search-products:v1',\n    intent_name: 'SearchProducts',\n    description: 'Search for products based on criteria',\n    input_parameters: [\n      { name: 'query', type: 'string', required: true, description: 'Search query' },\n      { name: 'category', type: 'string', required: false, description: 'Product category' },\n      { name: 'price_range', type: 'string', required: false, description: 'Price range (e.g., \"10-100\")' },\n      { name: 'sort_by', type: 'string', required: false, description: 'Sort criteria' }\n    ],\n    output_parameters: [\n      { name: 'products', type: 'array', description: 'List of matching products' },\n      { name: 'total_results', type: 'integer', description: 'Total number of matching products' }\n    ],\n    endpoint: 'https://api.example.com/products/search',\n    tags: ['e-commerce', 'search', 'products']\n  },\n  {\n    intent_uid: 'example.com:get-product-details:v1',\n    intent_name: 'GetProductDetails',\n    description: 'Get detailed information about a specific product',\n    input_parameters: [\n      { name: 'product_id', type: 'string', required: true, description: 'Product ID' }\n    ],\n    output_parameters: [\n      { name: 'product', type: 'object', description: 'Product details' }\n    ],\n    endpoint: 'https://api.example.com/products/details',\n    tags: ['e-commerce', 'product', 'details']\n  }\n];\n</code></pre>"},{"location":"guides/service-provider-guide/#4-define-your-policy","title":"4. Define Your Policy","text":"<p>Define the policy that AI agents must adhere to when using your web service:</p> <pre><code>const policy = {\n  '@context': 'http://www.w3.org/ns/odrl.jsonld',\n  'uid': 'http://example.com/policy/12345',\n  'type': 'Set',\n  'profile': 'http://example.com/profile/odrl-uim',\n  'permission': [\n    {\n      'target': 'http://example.com/api/intents',\n      'action': 'execute',\n      'constraint': [\n        {\n          'leftOperand': 'http://example.com/vocab/rateLimit',\n          'operator': 'lte',\n          'rightOperand': 1000,\n          'unit': 'http://example.com/vocab/hour'\n        }\n      ],\n      'duty': [\n        {\n          'action': 'pay',\n          'target': 'http://example.com/vocab/intentPrice',\n          'amount': 0.01,\n          'unit': 'http://example.com/vocab/USD'\n        }\n      ]\n    }\n  ],\n  'prohibition': [\n    {\n      'target': 'http://example.com/api/intents',\n      'action': 'exceedRateLimit'\n    }\n  ],\n  'obligation': [\n    {\n      'action': 'signPayload',\n      'assignee': 'http://example.com/ai-agent/1',\n      'target': 'http://example.com/vocab/payload',\n      'constraint': [\n        {\n          'leftOperand': 'http://example.com/vocab/publicKey',\n          'operator': 'use',\n          'rightOperand': 'MIIBIjANBgkqh...'\n        }\n      ]\n    }\n  ]\n};\n</code></pre>"},{"location":"guides/service-provider-guide/#5-create-the-agentsjson-file","title":"5. Create the <code>agents.json</code> File","text":"<p>Create an <code>agents.json</code> file that describes your web service and its intents:</p> <pre><code>const agentsJson = {\n  'service-info': {\n    'name': 'Example E-commerce Service',\n    'description': 'Provides e-commerce functionalities',\n    'service_url': 'https://api.example.com',\n    'service_logo_url': 'https://example.com/logo.png',\n    'service_terms_of_service_url': 'https://example.com/terms',\n    'service_privacy_policy_url': 'https://example.com/privacy'\n  },\n  'intents': intents,\n  'uim-public-key': publicKey,\n  'uim-policy-file': 'https://example.com/uim-policy.json',\n  'uim-api-discovery': 'https://api.example.com/uim/intents/search',\n  'uim-compliance': {\n    'standards': ['ISO27001', 'GDPR'],\n    'regional-compliance': {\n      'EU': 'GDPR',\n      'US-CA': 'CCPA'\n    },\n    'notes': 'Data is encrypted in transit and at rest.'\n  },\n  'uim-license': 'https://uimprotocol.com/licenses/uim-by-nc-v1.0'\n};\n\n// Save the agents.json file\nfs.writeFileSync('public/agents.json', JSON.stringify(agentsJson, null, 2));\n</code></pre>"},{"location":"guides/service-provider-guide/#6-configure-dns-txt-records","title":"6. Configure DNS TXT Records","text":"<p>Configure DNS TXT records to help AI agents discover your web service:</p> <pre><code>uim-agents-file=https://example.com/agents.json\nuim-api-discovery=https://api.example.com/uim/intents/search\nuim-policy-file=https://example.com/uim-policy.json\nuim-license=https://uimprotocol.com/licenses/uim-by-nc-v1.0\n</code></pre>"},{"location":"guides/service-provider-guide/#7-implement-the-discovery-api","title":"7. Implement the Discovery API","text":"<p>Implement the discovery API that allows AI agents to search for intents:</p> <pre><code>const app = express();\napp.use(express.json());\n\n// Intent search endpoint\napp.get('/uim/intents/search', (req, res) =&gt; {\n  const { query, tags, intent_name, uid, namespace, description } = req.query;\n\n  // Filter intents based on query parameters\n  let filteredIntents = [...intents];\n\n  if (query) {\n    const queryLower = query.toLowerCase();\n    filteredIntents = filteredIntents.filter(intent =&gt;\n      intent.intent_name.toLowerCase().includes(queryLower) ||\n      intent.description.toLowerCase().includes(queryLower)\n    );\n  }\n\n  if (tags) {\n    const tagList = tags.split(',');\n    filteredIntents = filteredIntents.filter(intent =&gt;\n      tagList.some(tag =&gt; intent.tags.includes(tag))\n    );\n  }\n\n  if (intent_name) {\n    filteredIntents = filteredIntents.filter(intent =&gt;\n      intent.intent_name.toLowerCase() === intent_name.toLowerCase()\n    );\n  }\n\n  if (uid) {\n    filteredIntents = filteredIntents.filter(intent =&gt;\n      intent.intent_uid === uid\n    );\n  }\n\n  if (namespace) {\n    filteredIntents = filteredIntents.filter(intent =&gt;\n      intent.intent_uid.split(':')[0] === namespace\n    );\n  }\n\n  if (description) {\n    const descLower = description.toLowerCase();\n    filteredIntents = filteredIntents.filter(intent =&gt;\n      intent.description.toLowerCase().includes(descLower)\n    );\n  }\n\n  // Pagination\n  const page = parseInt(req.query.page) || 1;\n  const pageSize = parseInt(req.query.page_size) || 10;\n  const startIndex = (page - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedIntents = filteredIntents.slice(startIndex, endIndex);\n\n  res.json({\n    intents: paginatedIntents,\n    pagination: {\n      total_results: filteredIntents.length,\n      total_pages: Math.ceil(filteredIntents.length / pageSize),\n      current_page: page,\n      page_size: pageSize\n    }\n  });\n});\n\n// Intent details endpoint\napp.get('/uim/intents/:intent_uid', (req, res) =&gt; {\n  const intent = intents.find(i =&gt; i.intent_uid === req.params.intent_uid);\n\n  if (!intent) {\n    return res.status(404).json({\n      error: {\n        code: 'NOT_FOUND',\n        message: `The intent '${req.params.intent_uid}' was not found.`\n      }\n    });\n  }\n\n  res.json(intent);\n});\n</code></pre>"},{"location":"guides/service-provider-guide/#8-implement-the-policy-api","title":"8. Implement the Policy API","text":"<p>Implement the policy API that allows AI agents to retrieve the policy:</p> <pre><code>// Policy endpoint\napp.get('/uim-policy.json', (req, res) =&gt; {\n  res.json(policy);\n});\n</code></pre>"},{"location":"guides/service-provider-guide/#9-implement-the-pat-issuance-api","title":"9. Implement the PAT Issuance API","text":"<p>Implement the PAT issuance API that allows AI agents to request PATs:</p> <pre><code>// PAT issuance endpoint\napp.post('/pat/issue', (req, res) =&gt; {\n  const { agent_id, signed_policy, agent_public_key } = req.body;\n\n  // Validate request\n  if (!agent_id || !signed_policy || !agent_public_key) {\n    return res.status(400).json({\n      error: {\n        code: 'INVALID_PARAMETER',\n        message: 'Missing required parameters.'\n      }\n    });\n  }\n\n  try {\n    // Verify the signature\n    const policyJson = JSON.stringify(policy);\n    const verifier = crypto.createVerify('SHA256');\n    verifier.update(policyJson);\n    const isValid = verifier.verify(\n      agent_public_key,\n      Buffer.from(signed_policy, 'hex')\n    );\n\n    if (!isValid) {\n      return res.status(400).json({\n        error: {\n          code: 'INVALID_SIGNATURE',\n          message: 'The signature is invalid.'\n        }\n      });\n    }\n\n    // Generate PAT\n    const pat = {\n      iss: 'example.com',\n      sub: agent_id,\n      exp: Math.floor(Date.now() / 1000) + 86400, // 24 hours\n      nbf: Math.floor(Date.now() / 1000),\n      jti: crypto.randomBytes(16).toString('hex'),\n      scope: intents.map(intent =&gt; `${intent.intent_uid}:execute`),\n      pol: 'https://example.com/uim-policy.json',\n      lmt: {\n        rate: 100,\n        period: 3600\n      }\n    };\n\n    // Sign PAT\n    const token = jwt.sign(pat, privateKey, { algorithm: 'RS256' });\n\n    res.json({\n      'uim-pat': token,\n      'expires_at': new Date(pat.exp * 1000).toISOString()\n    });\n  } catch (error) {\n    console.error('Error issuing PAT:', error);\n    res.status(500).json({\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'An unexpected error occurred on the server.'\n      }\n    });\n  }\n});\n</code></pre>"},{"location":"guides/service-provider-guide/#10-implement-the-intent-execution-api","title":"10. Implement the Intent Execution API","text":"<p>Implement the intent execution API that allows AI agents to execute intents:</p> <pre><code>// Intent execution endpoint\napp.post('/uim/execute', (req, res) =&gt; {\n  const { intent_uid, parameters } = req.body;\n\n  // Validate request\n  if (!intent_uid || !parameters) {\n    return res.status(400).json({\n      error: {\n        code: 'INVALID_PARAMETER',\n        message: 'Missing required parameters.'\n      }\n    });\n  }\n\n  // Verify PAT\n  const authHeader = req.headers.authorization;\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({\n      error: {\n        code: 'UNAUTHORIZED',\n        message: 'Missing or invalid Authorization header.'\n      }\n    });\n  }\n\n  const token = authHeader.split(' ')[1];\n  try {\n    const decoded = jwt.verify(token, publicKey, { algorithms: ['RS256'] });\n\n    // Check if the PAT allows executing this intent\n    if (!decoded.scope.includes(`${intent_uid}:execute`)) {\n      return res.status(403).json({\n        error: {\n          code: 'FORBIDDEN',\n          message: 'The PAT does not grant permission to execute this intent.'\n        }\n      });\n    }\n\n    // Check rate limit\n    // In a real implementation, you would use a rate limiting library or database\n\n    // Find the intent\n    const intent = intents.find(i =&gt; i.intent_uid === intent_uid);\n    if (!intent) {\n      return res.status(404).json({\n        error: {\n          code: 'NOT_FOUND',\n          message: `The intent '${intent_uid}' was not found.`\n        }\n      });\n    }\n\n    // Validate parameters\n    for (const param of intent.input_parameters) {\n      if (param.required &amp;&amp; !parameters[param.name]) {\n        return res.status(400).json({\n          error: {\n            code: 'INVALID_PARAMETER',\n            message: `Missing required parameter: ${param.name}`\n          }\n        });\n      }\n    }\n\n    // Execute the intent\n    // In a real implementation, you would call your actual business logic here\n    if (intent_uid === 'example.com:search-products:v1') {\n      // Simulate a product search\n      const products = [\n        {\n          id: '123',\n          name: 'Laptop',\n          price: 1000,\n          description: 'A powerful laptop'\n        }\n      ];\n\n      res.json({\n        products,\n        total_results: products.length\n      });\n    } else if (intent_uid === 'example.com:get-product-details:v1') {\n      // Simulate getting product details\n      res.json({\n        product: {\n          id: parameters.product_id,\n          name: 'Laptop',\n          price: 1000,\n          description: 'A powerful laptop',\n          specifications: {\n            processor: 'Intel Core i7',\n            memory: '16GB',\n            storage: '512GB SSD'\n          }\n        }\n      });\n    } else {\n      res.status(400).json({\n        error: {\n          code: 'INTENT_NOT_SUPPORTED',\n          message: `The intent '${intent_uid}' is not supported.`\n        }\n      });\n    }\n  } catch (error) {\n    if (error.name === 'JsonWebTokenError') {\n      return res.status(401).json({\n        error: {\n          code: 'UNAUTHORIZED',\n          message: 'Invalid PAT.'\n        }\n      });\n    } else if (error.name === 'TokenExpiredError') {\n      return res.status(401).json({\n        error: {\n          code: 'UNAUTHORIZED',\n          message: 'PAT has expired.'\n        }\n      });\n    }\n\n    console.error('Error executing intent:', error);\n    res.status(500).json({\n      error: {\n        code: 'INTERNAL_SERVER_ERROR',\n        message: 'An unexpected error occurred on the server.'\n      }\n    });\n  }\n});\n</code></pre>"},{"location":"guides/service-provider-guide/#11-start-the-server","title":"11. Start the Server","text":"<p>Start the server:</p> <pre><code>const PORT = process.env.PORT || 3000;\napp.listen(PORT, () =&gt; {\n  console.log(`Server running on port ${PORT}`);\n});\n</code></pre>"},{"location":"guides/service-provider-guide/#complete-example","title":"Complete Example","text":"<p>Here's a complete example of a web service that implements the UIM Protocol:</p> <p>```javascript const express = require('express'); const crypto = require('crypto'); const jwt = require('jsonwebtoken'); const fs = require('fs');</p> <p>// Generate key pair function generateKeyPair() {   return crypto.generateKeyPairSync('rsa', {     modulusLength: 2048,     publicKeyEncoding: {       type: 'spki',       format: 'pem'     },     privateKeyEncoding: {       type: 'pkcs8',       format: 'pem'     }   }); }</p> <p>// Load or generate keys let privateKey, publicKey; try {   privateKey = fs.readFileSync('private-key.pem', 'utf8');   publicKey = fs.readFileSync('public-key.pem', 'utf8'); } catch (error) {   console.log('Generating new key pair...');   const keys = generateKeyPair();   privateKey = keys.privateKey;   publicKey = keys.publicKey;   fs.writeFileSync('private-key.pem', privateKey);   fs.writeFileSync('public-key.pem', publicKey); }</p> <p>// Define intents const intents = [   {     intent_uid: 'example.com:search-products:v1',     intent_name: 'SearchProducts',     description: 'Search for products based on criteria',     input_parameters: [       { name: 'query', type: 'string', required: true, description: 'Search query' },       { name: 'category', type: 'string', required: false, description: 'Product category' },       { name: 'price_range', type: 'string', required: false, description: 'Price range (e.g., \"10-100\")' },       { name: 'sort_by', type: 'string', required: false, description: 'Sort criteria' }     ],     output_parameters: [       { name: 'products', type: 'array', description: 'List of matching products' },       { name: 'total_results', type: 'integer', description: 'Total number of matching products' }     ],     endpoint: 'https://api.example.com/products/search',     tags: ['e-commerce', 'search', 'products']   },   {     intent_uid: 'example.com:get-product-details:v1',     intent_name: 'GetProductDetails',     description: 'Get detailed information about a specific product',     input_parameters: [       { name: 'product_id', type: 'string', required: true, description: 'Product ID' }     ],     output_parameters: [       { name: 'product', type: 'object', description: 'Product details' }     ],     endpoint: 'https://api.example.com/products/details',     tags: ['e-commerce', 'product', 'details']   } ];</p> <p>// Define policy const policy = {   '@context': 'http://www.w3.org/ns/odrl.jsonld',   'uid': 'http://example.com/policy/12345',   'type': 'Set',   'profile': 'http://example.com/profile/odrl-uim',   'permission': [     {       'target': 'http://example.com/api/intents',       'action': 'execute',       'constraint': [         {           'leftOperand': 'http://example.com/vocab/rateLimit',           'operator': 'lte',           'rightOperand': 1000,           'unit': 'http://example.com/vocab/hour'         }       ],       'duty': [         {           'action': 'pay',           'target': 'http://example.com/vocab/intentPrice',           'amount': 0.01,           'unit': 'http://example.com/vocab/USD'         }       ]     }   ],   'prohibition': [     {       'target': 'http://example.com/api/intents',       'action': 'exceedRateLimit'     }   ],   'obligation': [     {       'action': 'signPayload',       'assignee': 'http://example.com/ai-agent/1',       'target': 'http://example.com/vocab/payload',       'constraint': [         {           'leftOperand': 'http://example.com/vocab/publicKey',           'operator': 'use',           'rightOperand': 'MIIBIjANBgkqh...'         }       ]     }   ] };</p> <p>// Create agents.json const agentsJson = {   'service-info': {     'name': 'Example E-commerce Service',     'description': 'Provides e-commerce functionalities',     'service_url': 'https://api.example.com',     'service_logo_url': 'https://example.com/logo.png',     'service_terms_of_service_url': 'https://example.com/terms',     'service_privacy_policy_url': 'https://example.com/privacy'   },   'intents': intents,   'uim-public-key': publicKey,   'uim-policy-file': 'https://example.com/uim-policy.json',   'uim-api-discovery': 'https://api.example.com/uim/intents/search',   'uim-compliance': {     'standards': ['ISO27001', 'GDPR'],     'regional-compliance': {       'EU': 'GDPR',       'US-CA': 'CCPA'     },     'notes': 'Data is encrypted in transit and at rest.'   } };</p> <p>// Ensure public directory exists if (!fs.existsSync('public')) {   fs.mkdirSync('public'); }</p> <p>// Save agents.json fs.writeFileSync('public/agents.json', JSON.stringify(agentsJson, null, 2));</p> <p>// Create Express app const app = express(); app.use(express.json()); app.use(express.static('public'));</p> <p>// Intent search endpoint app.get('/uim/intents/search', (req, res) =&gt; {   const { query, tags, intent_name, uid, namespace, description } = req.query;</p> <p>// Filter intents based on query parameters   let filteredIntents = [...intents];</p> <p>if (query) {     const queryLower = query.toLowerCase();     filteredIntents = filteredIntents.filter(intent =&gt;       intent.intent_name.toLowerCase().includes(queryLower) ||       intent.description.toLowerCase().includes(queryLower)     );   }</p> <p>if (tags) {     const tagList = tags.split(',');     filteredIntents = filteredIntents.filter(intent =&gt;       tagList.some(tag =&gt; intent.tags.includes(tag))     );   }</p> <p>if (intent_name) {     filteredIntents = filteredIntents.filter(intent =&gt;       intent.intent_name.toLowerCase() === intent_name.toLowerCase()     );   }</p> <p>if (uid) {     filteredIntents = filteredIntents.filter(intent =&gt;       intent.intent_uid === uid     );   }</p> <p>if (namespace) {     filteredIntents = filteredIntents.filter(intent =&gt;       intent.intent_uid.split(':')[0] === namespace     );   }</p> <p>if (description) {     const descLower = description.toLowerCase();     filteredIntents = filteredIntents.filter(intent =&gt;       intent.description.toLowerCase().includes(descLower)     );   }</p> <p>// Pagination   const page = parseInt(req.query.page) || 1;   const pageSize = parseInt(req.query.page_size) || 10;   const startIndex = (page - 1) * pageSize;   const endIndex = startIndex + pageSize;   const paginatedIntents = filteredIntents.slice(startIndex, endIndex);</p> <p>res.json({     intents: paginatedIntents,     pagination: {       total_results: filteredIntents.length,       total_pages: Math.ceil(filteredIntents.length / pageSize),       current_page: page,       page_size: pageSize     }   }); });</p> <p>// Intent details endpoint app.get('/uim/intents/:intent_uid', (req, res) =&gt; {   const intent = intents.find(i =&gt; i.intent_uid === req.params.intent_uid);</p> <p>if (!intent) {     return res.status(404).json({       error: {         code: 'NOT_FOUND',         message: <code>The intent '${req.params.intent_uid}' was not found.</code>       }     });   }</p> <p>res.json(intent); });</p> <p>// Policy endpoint app.get('/uim-policy.json', (req, res) =&gt; {   res.json(policy); });</p> <p>// PAT issuance endpoint app.post('/pat/issue', (req, res) =&gt; {   const { agent_id, signed_policy, agent_public_key } = req.body;</p> <p>// Validate request   if (!agent_id || !signed_policy || !agent_public_key) {     return res.status(400).json({       error: {         code: 'INVALID_PARAMETER',         message: 'Missing required parameters.'       }     });   }</p> <p>try {     // Verify the signature     const policyJson = JSON.stringify(policy);     const verifier = crypto.createVerify('SHA256');     verifier.update(policyJson);     const isValid = verifier.verify(       agent_public_key,       Buffer.from(signed_policy, 'hex')     );</p> <pre><code>if (!isValid) {\n  return res.status(400).json({\n    error: {\n      code: 'INVALID_SIGNATURE',\n      message: 'The signature is invalid.'\n    }\n  });\n}\n\n// Generate PAT\nconst pat = {\n  iss: 'example.com',\n  sub: agent_id,\n  exp: Math.floor(Date.now() / 1000) + 86400, // 24 hours\n  nbf: Math.floor(Date.now() / 1000),\n  jti: crypto.randomBytes(16).toString('hex'),\n  scope: intents.map(intent =&gt; `${intent.intent_uid}:execute`),\n  pol: 'https://example.com/uim-policy.json',\n  lmt: {\n    rate: 100,\n    period: 3600\n  }\n};\n\n// Sign PAT\nconst token = jwt.sign(pat, privateKey, { algorithm: 'RS256' });\n\nres.json({\n  'uim-pat': token,\n  'expires_at': new Date(pat.exp * 1000).toISOString()\n});\n</code></pre> <p>} catch (error) {     console.error('Error issuing PAT:', error);     res.status(500).json({       error: {         code: 'INTERNAL_SERVER_ERROR',         message: 'An unexpected error occurred on the server.'       }     });   } });</p> <p>// Intent execution endpoint app.post('/uim/execute', (req, res) =&gt; {   const { intent_uid, parameters } = req.body;</p> <p>// Validate request   if (!intent_uid || !parameters) {     return res.status(400).json({       error: {         code: 'INVALID_PARAMETER',         message: 'Missing required parameters.'       }     });   }</p> <p>// Verify PAT   const authHeader = req.headers.authorization;   if (!authHeader || !authHeader.startsWith('Bearer ')) {     return res.status(401).json({       error: {         code: 'UNAUTHORIZED',         message: 'Missing or invalid Authorization header.'       }     });   }</p> <p>const token = authHeader.split(' ')[1];   try {     const decoded = jwt.verify(token, publicKey, { algorithms: ['RS256'] });</p> <pre><code>// Check if the PAT allows executing this intent\nif (!decoded.scope.includes(`${intent_uid}:execute`)) {\n  return res.status(403).json({\n    error: {\n      code: 'FORBIDDEN',\n      message: 'The PAT does not grant permission to execute this intent.'\n    }\n  });\n}\n\n// Check rate limit\n// In a real implementation, you would use a rate limiting library or database\n\n// Find the intent\nconst intent = intents.find(i =&gt; i.intent_uid === intent_uid);\nif (!intent) {\n  return res.status(404).json({\n    error: {\n      code: 'NOT_FOUND',\n      message: `The intent '${intent_uid}' was not found.`\n    }\n  });\n}\n\n// Validate parameters\nfor (const param of intent.input_parameters) {\n  if (param.required &amp;&amp; !parameters[param.name]) {\n    return res.status(400).json({\n      error: {\n        code: 'INVALID_PARAMETER',\n        message: `Missing required parameter: ${param.name}`\n      }\n    });\n  }\n}\n\n// Execute the intent\n// In a real implementation, you would call your actual business logic here\nif (intent_uid === 'example.com:search-products:v1') {\n  // Simulate a product search\n  const products = [\n    {\n      id: '123',\n      name: 'Laptop',\n      price: 1000,\n      description: 'A powerful laptop'\n    }\n  ];\n\n  res.json({\n    products,\n    total_results: products.length\n  });\n} else if (intent_uid === 'example.com:get-product-details:v1') {\n  // Simulate getting product details\n  res.json({\n    product: {\n      id: parameters.product_id,\n      name: 'Laptop',\n      price: 1000,\n      description: 'A powerful laptop',\n      specifications: {\n        processor: 'Intel Core i7',\n        memory: '16GB',\n        storage: '512GB SSD'\n      }\n    }\n  });\n} else {\n  res.status(400).json({\n    error: {\n      code: 'INTENT_NOT_\n</code></pre>"},{"location":"guides/testing/","title":"Testing Guide","text":"<p>This guide provides instructions for testing your UIM Protocol implementation. It covers testing tools, methodologies, and best practices.</p>"},{"location":"guides/testing/#overview","title":"Overview","text":"<p>Testing is a critical part of implementing the UIM Protocol. It ensures that your implementation correctly follows the specification and can interoperate with other implementations. This guide will help you test your UIM Protocol implementation, whether you're developing an AI agent or a web service.</p>"},{"location":"guides/testing/#testing-tools","title":"Testing Tools","text":"<p>The UIM Protocol ecosystem provides several tools to help you test your implementation:</p>"},{"location":"guides/testing/#uim-protocol-cli","title":"UIM Protocol CLI","text":"<p>The UIM Protocol CLI is a command-line tool that allows you to interact with UIM-compatible web services. It can be used to:</p> <ul> <li>Discover services and intents</li> <li>Retrieve policies</li> <li>Request PATs</li> <li>Execute intents</li> <li>Validate responses</li> </ul>"},{"location":"guides/testing/#installation","title":"Installation","text":"<pre><code>npm install -g uim-protocol-cli\n</code></pre>"},{"location":"guides/testing/#usage","title":"Usage","text":"<pre><code># Discover a service\nuim-cli discover --domain example.com\n\n# Search for intents\nuim-cli search-intents --service-url https://api.example.com --tags e-commerce,search\n\n# Get a PAT\nuim-cli get-pat --service-url https://api.example.com\n\n# Execute an intent\nuim-cli execute --service-url https://api.example.com --intent-uid example.com:searchProducts:v1 --parameters '{\"query\": \"laptop\", \"category\": \"electronics\"}'\n</code></pre>"},{"location":"guides/testing/#uim-protocol-validator","title":"UIM Protocol Validator","text":"<p>The UIM Protocol Validator is a tool that validates your implementation against the specification. It can be used to:</p> <ul> <li>Validate intent definitions</li> <li>Validate policy definitions</li> <li>Validate PAT issuance</li> <li>Validate intent execution</li> <li>Validate error handling</li> </ul>"},{"location":"guides/testing/#installation_1","title":"Installation","text":"<pre><code>npm install -g uim-protocol-validator\n</code></pre>"},{"location":"guides/testing/#usage_1","title":"Usage","text":"<pre><code># Validate a service\nuim-validator service --url https://api.example.com\n\n# Validate an agent\nuim-validator agent --agent-id my-agent\n</code></pre>"},{"location":"guides/testing/#mock-implementations","title":"Mock Implementations","text":"<p>The UIM Protocol provides mock implementations that you can use for testing:</p> <ul> <li>Mock Agent: A simulated AI agent that implements the UIM Protocol.</li> <li>Mock Webservice: A simulated web service that implements the UIM Protocol.</li> </ul> <p>These mock implementations can be used to test your own implementation without having to set up a complete environment.</p>"},{"location":"guides/testing/#testing-methodologies","title":"Testing Methodologies","text":""},{"location":"guides/testing/#unit-testing","title":"Unit Testing","text":"<p>Unit testing focuses on testing individual components of your implementation in isolation. For example:</p> <ul> <li>Testing the policy signing function</li> <li>Testing the intent discovery function</li> <li>Testing the PAT verification function</li> </ul>"},{"location":"guides/testing/#example-unit-test-javascript","title":"Example Unit Test (JavaScript)","text":"<pre><code>const { expect } = require('chai');\nconst { signPolicy } = require('../implementations/policy');\n\ndescribe('Policy Signing', () =&gt; {\n  it('should sign a policy correctly', () =&gt; {\n    const policy = { /* policy object */ };\n    const privateKey = '...';\n\n    const signature = signPolicy(policy, privateKey);\n\n    expect(signature).to.be.a('string');\n    expect(signature.length).to.be.greaterThan(0);\n  });\n});\n</code></pre>"},{"location":"guides/testing/#integration-testing","title":"Integration Testing","text":"<p>Integration testing focuses on testing the interaction between different components of your implementation. For example:</p> <ul> <li>Testing the flow from policy retrieval to PAT acquisition</li> <li>Testing the flow from intent discovery to intent execution</li> <li>Testing error handling across components</li> </ul>"},{"location":"guides/testing/#example-integration-test-javascript","title":"Example Integration Test (JavaScript)","text":"<pre><code>const { expect } = require('chai');\nconst { UIMAgent } = require('../implementations/agent');\n\ndescribe('Intent Execution Flow', () =&gt; {\n  it('should execute an intent successfully', async () =&gt; {\n    const agent = new UIMAgent('test-agent');\n\n    // Discover service\n    const service = await agent.discoverService('example.com');\n    expect(service).to.not.be.null;\n\n    // Get policy and PAT\n    const pat = await agent.getPAT(service.policyUrl);\n    expect(pat).to.not.be.null;\n\n    // Execute intent\n    const result = await agent.executeIntent(\n      service.url,\n      'example.com:searchProducts:v1',\n      { query: 'laptop' },\n      pat\n    );\n\n    expect(result).to.not.be.null;\n    expect(result.products).to.be.an('array');\n  });\n});\n</code></pre>"},{"location":"guides/testing/#end-to-end-testing","title":"End-to-End Testing","text":"<p>End-to-end testing focuses on testing the complete flow from an AI agent to a web service. For example:</p> <ul> <li>Testing the discovery, policy acquisition, and intent execution flow</li> <li>Testing error handling and recovery</li> <li>Testing performance and scalability</li> </ul>"},{"location":"guides/testing/#example-end-to-end-test-javascript","title":"Example End-to-End Test (JavaScript)","text":"<pre><code>const { expect } = require('chai');\nconst { UIMAgent } = require('../implementations/agent');\nconst { MockWebservice } = require('uim-mock-webservice');\n\ndescribe('End-to-End Flow', () =&gt; {\n  let webservice;\n\n  before(async () =&gt; {\n    // Start mock webservice\n    webservice = new MockWebservice();\n    await webservice.start();\n  });\n\n  after(async () =&gt; {\n    // Stop mock webservice\n    await webservice.stop();\n  });\n\n  it('should complete the full flow successfully', async () =&gt; {\n    const agent = new UIMAgent('test-agent');\n\n    // Discover service\n    const service = await agent.discoverService('localhost');\n    expect(service).to.not.be.null;\n\n    // Get policy and PAT\n    const pat = await agent.getPAT(service.policyUrl);\n    expect(pat).to.not.be.null;\n\n    // Search for intents\n    const intents = await agent.searchIntents(service.url, { tags: ['e-commerce'] });\n    expect(intents).to.be.an('array');\n    expect(intents.length).to.be.greaterThan(0);\n\n    // Execute intent\n    const intent = intents[0];\n    const result = await agent.executeIntent(\n      service.url,\n      intent.intent_uid,\n      { query: 'laptop' },\n      pat\n    );\n\n    expect(result).to.not.be.null;\n    expect(result.products).to.be.an('array');\n  });\n});\n</code></pre>"},{"location":"guides/testing/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"guides/testing/#test-coverage","title":"Test Coverage","text":"<p>Ensure that your tests cover all aspects of the UIM Protocol:</p> <ul> <li>Service discovery</li> <li>Intent discovery</li> <li>Policy retrieval</li> <li>PAT acquisition</li> <li>Intent execution</li> <li>Error handling</li> </ul>"},{"location":"guides/testing/#test-edge-cases","title":"Test Edge Cases","text":"<p>Test edge cases and error conditions:</p> <ul> <li>Invalid parameters</li> <li>Expired PATs</li> <li>Network errors</li> <li>Rate limiting</li> <li>Invalid signatures</li> </ul>"},{"location":"guides/testing/#test-interoperability","title":"Test Interoperability","text":"<p>Test your implementation with other implementations:</p> <ul> <li>Test AI agents with different web services</li> <li>Test web services with different AI agents</li> <li>Test with the mock implementations</li> </ul>"},{"location":"guides/testing/#continuous-integration","title":"Continuous Integration","text":"<p>Set up continuous integration to run tests automatically:</p> <ul> <li>Run tests on every commit</li> <li>Run tests on every pull request</li> <li>Run tests on every release</li> </ul>"},{"location":"guides/testing/#performance-testing","title":"Performance Testing","text":"<p>Test the performance of your implementation:</p> <ul> <li>Test with a large number of intents</li> <li>Test with a large number of requests</li> <li>Test with a large number of clients</li> </ul>"},{"location":"guides/testing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/testing/#common-issues","title":"Common Issues","text":""},{"location":"guides/testing/#dns-resolution-errors","title":"DNS Resolution Errors","text":"<p>If you're having trouble with DNS resolution:</p> <ol> <li>Check that the domain exists and has TXT records</li> <li>Try using a different DNS server</li> <li>Use verbose logging to see more detailed error information</li> </ol>"},{"location":"guides/testing/#pat-acquisition-errors","title":"PAT Acquisition Errors","text":"<p>If you're having trouble acquiring PATs:</p> <ol> <li>Check that your keys are generated correctly</li> <li>Verify that the policy is accessible</li> <li>Ensure that your agent ID is valid</li> <li>Use verbose logging to see more detailed error information</li> </ol>"},{"location":"guides/testing/#intent-execution-errors","title":"Intent Execution Errors","text":"<p>If you're having trouble executing intents:</p> <ol> <li>Check that you have a valid PAT</li> <li>Verify that the intent UID is correct</li> <li>Ensure that the parameters are valid</li> <li>Use verbose logging to see more detailed error information</li> </ol>"},{"location":"guides/testing/#debugging","title":"Debugging","text":"<p>To debug UIM Protocol interactions:</p> <ol> <li>Enable Verbose Logging: Turn on detailed logging in your implementation.</li> <li>Use the UIM Protocol CLI: The CLI provides debugging tools for UIM Protocol interactions.</li> <li>Check Network Requests: Use tools like Wireshark or browser developer tools to inspect network requests.</li> <li>Validate JSON: Ensure your JSON payloads are valid and correctly formatted.</li> <li>Test with Mock Services: Use mock services to isolate and debug specific issues.</li> </ol>"},{"location":"guides/testing/#conclusion","title":"Conclusion","text":"<p>Testing is a critical part of implementing the UIM Protocol. By following the methodologies and best practices outlined in this guide, you can ensure that your implementation correctly follows the specification and can interoperate with other implementations.</p> <p>For more information, see the AI Agent Implementation Guide and Service Provider Implementation Guide.</p>"},{"location":"guides/visual-differentiation-example/","title":"Visual Differentiation Example","text":"<p>This page demonstrates how to use the visual differentiation styling to clearly distinguish between specification content and implementation content.</p>"},{"location":"guides/visual-differentiation-example/#using-admonition-blocks","title":"Using Admonition Blocks","text":""},{"location":"guides/visual-differentiation-example/#specification-content","title":"Specification Content","text":"<p>You can use the <code>spec</code> admonition to highlight specification content:</p> <p>Specification: Intent Format</p> <p>An intent must follow this format:</p> <pre><code>{\n  \"intent_uid\": \"namespace:intent_name:version\",\n  \"parameters\": {\n    \"param1\": \"value1\",\n    \"param2\": \"value2\"\n  }\n}\n</code></pre> <p>The <code>intent_uid</code> is a required field and must follow the format <code>namespace:intent_name:version</code>.</p>"},{"location":"guides/visual-differentiation-example/#implementation-content","title":"Implementation Content","text":"<p>You can use the <code>implementation</code> admonition to highlight implementation content:</p> <p>Implementation: JavaScript Example</p> <p>Here's how you might implement an intent in JavaScript:</p> Implementation: Creating an Intent<pre><code>function createIntent(namespace, intentName, version, parameters) {\n  return {\n    intent_uid: `${namespace}:${intentName}:${version}`,\n    parameters: parameters || {}\n  };\n}\n\n// Example usage\nconst searchIntent = createIntent(\n  'ecommerce.com',\n  'SearchProducts',\n  'v1',\n  {\n    query: 'laptop',\n    category: 'electronics'\n  }\n);\n</code></pre>"},{"location":"guides/visual-differentiation-example/#using-section-headers","title":"Using Section Headers","text":"<p>You can also use section headers to differentiate between specification and implementation content:</p>"},{"location":"guides/visual-differentiation-example/#specification-intent-discovery","title":"Specification: Intent Discovery","text":"<p>The UIM Protocol defines a standard way for AI agents to discover available intents from web services. This is done through DNS TXT records and the <code>agents.json</code> file.</p>"},{"location":"guides/visual-differentiation-example/#implementation-intent-discovery-in-nodejs","title":"Implementation: Intent Discovery in Node.js","text":"<p>Here's an example of how you might implement intent discovery in Node.js:</p> Implementation: Intent Discovery<pre><code>const dns = require('dns');\nconst axios = require('axios');\n\nasync function discoverIntents(domain) {\n  try {\n    // Look up DNS TXT records\n    const txtRecords = await dns.promises.resolveTxt(domain);\n\n    // Find the record with the agents.json URL\n    const agentsRecord = txtRecords.find(record =&gt;\n      record[0].startsWith('uim-agents-file=')\n    );\n\n    if (!agentsRecord) {\n      throw new Error('No agents.json URL found in DNS TXT records');\n    }\n\n    // Extract the URL\n    const agentsUrl = agentsRecord[0].split('=')[1];\n\n    // Fetch the agents.json file\n    const response = await axios.get(agentsUrl);\n\n    return response.data;\n  } catch (error) {\n    console.error('Error discovering intents:', error);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"guides/visual-differentiation-example/#using-code-block-titles","title":"Using Code Block Titles","text":"<p>You can also use code block titles to differentiate between specification and implementation content:</p> Specification: agents.json Format<pre><code>{\n  \"service_info\": {\n    \"name\": \"Example E-commerce Service\",\n    \"description\": \"An e-commerce service that provides product search and ordering capabilities\",\n    \"logo_url\": \"https://example.com/logo.png\",\n    \"website\": \"https://example.com\",\n    \"terms_url\": \"https://example.com/terms\",\n    \"privacy_url\": \"https://example.com/privacy\"\n  },\n  \"intents\": [\n    {\n      \"intent_uid\": \"ecommerce.com:SearchProducts:v1\",\n      \"name\": \"Search Products\",\n      \"description\": \"Search for products based on criteria\",\n      \"endpoint\": \"https://api.example.com/uim/intents/search\",\n      \"parameters\": {\n        \"query\": {\n          \"type\": \"string\",\n          \"description\": \"Search query\",\n          \"required\": true\n        },\n        \"category\": {\n          \"type\": \"string\",\n          \"description\": \"Product category\",\n          \"required\": false\n        }\n      }\n    }\n  ],\n  \"policy_url\": \"https://example.com/uim-policy.json\"\n}\n</code></pre> <p>```python title=\"Implementation: Python Intent Discovery\" import dns.resolver import requests</p> <p>def discover_intents(domain):     try:         # Look up DNS TXT records         txt_records = dns.resolver.resolve(domain, 'TXT')</p> <pre><code>    # Find the record with the agents.json URL\n    agents_url = None\n    for record in txt_records:\n        for txt in record.strings:\n            txt_str = txt.decode('utf-8')\n            if txt_str.startswith('uim-agents-file='):\n                agents_url = txt_str.split('=')[1]\n                break\n        if agents_url:\n            break\n\n    if not agents_url:\n        raise Exception('No agents.json URL found in DNS TXT records')\n\n    # Fetch the agents.json file\n    response = requests.get(agents_url)\n    response.raise_for_status()\n\n    return response.json()\nexcept Exception as e:\n    print(f'Error discovering intents: {e}')\n    raise\n</code></pre>"},{"location":"prototypes/","title":"UIM Protocol Prototype Implementations","text":"<p>Welcome to the UIM Protocol Prototype Implementations section. This section provides information about the reference implementations of the UIM Protocol, which demonstrate how the protocol works in practice.</p>"},{"location":"prototypes/#available-prototypes","title":"Available Prototypes","text":"<ul> <li>Overview: A high-level overview of the prototype implementations</li> <li>Discovery Service: Documentation for the centralized discovery service</li> <li>Mock Agent: Documentation for the mock AI agent</li> <li>Mock Webservice: Documentation for the mock web service</li> </ul>"},{"location":"prototypes/#purpose-of-prototypes","title":"Purpose of Prototypes","text":"<p>The prototype implementations serve several important purposes:</p> <ol> <li>Demonstration: They demonstrate how the UIM Protocol works in practice, showing the interactions between AI agents and web services.</li> <li>Validation: They validate the protocol specification, ensuring that it is implementable and functional.</li> <li>Reference: They provide a reference for developers implementing the protocol in their own applications.</li> <li>Testing: They enable testing of the protocol in a controlled environment.</li> </ol>"},{"location":"prototypes/#architecture","title":"Architecture","text":"<p>The prototype implementations follow a hybrid architecture, combining elements of both centralized and decentralized approaches:</p> <pre><code>graph TD\n    A[Mock Agent] --&gt;|1. Queries for services| B[Centralized Discovery Service]\n    B --&gt;|2. Returns matching services| A\n    A --&gt;|3. Authenticates &amp; sends intent| C[Mock Webservice]\n    C --&gt;|4. Processes intent &amp; responds| A\n\n    subgraph \"UIM Protocol Components\"\n        D[Intent Format] -.-&gt; A\n        D -.-&gt; C\n        E[Authentication System] -.-&gt; A\n        E -.-&gt; C\n        F[Policy Management] -.-&gt; C\n    end</code></pre>"},{"location":"prototypes/#getting-started-with-prototypes","title":"Getting Started with Prototypes","text":"<p>To get started with the prototype implementations:</p> <ol> <li> <p>Clone the Repository:    <pre><code>git clone https://github.com/synaptiai/uim-protocol.git\n</code></pre></p> </li> <li> <p>Set Up the Discovery Service:    <pre><code>cd uim-protocol/implementations/centralized-discovery-service\n# Follow instructions in discovery-service.md\n</code></pre></p> </li> <li> <p>Set Up the Mock Webservice:    <pre><code>cd uim-protocol/implementations/uim-mock-webservice\n# Follow instructions in mock-webservice.md\n</code></pre></p> </li> <li> <p>Set Up the Mock Agent:    <pre><code>cd uim-protocol/implementations/uim-mock-agent\n# Follow instructions in mock-agent.md\n</code></pre></p> </li> <li> <p>Test the Interactions:    <pre><code># Follow instructions in overview.md\n</code></pre></p> </li> </ol>"},{"location":"prototypes/#development-status","title":"Development Status","text":"<p>The prototype implementations are currently in active development. They are functional but may not implement all features of the protocol specification. We welcome contributions to improve and extend the prototypes.</p>"},{"location":"prototypes/#contributing","title":"Contributing","text":"<p>If you'd like to contribute to the prototype implementations, please see the Contributing Guide for more information.</p>"},{"location":"prototypes/discovery-service/","title":"Discovery Service","text":"<p>The Discovery Service is a centralized implementation of the Unified Intent Mediator (UIM) Protocol's discovery mechanism. It allows AI agents to discover web services and their intents through a centralized registry.</p>"},{"location":"prototypes/discovery-service/#overview","title":"Overview","text":"<p>While the UIM Protocol supports decentralized discovery through DNS TXT records and <code>agents.json</code> files, a centralized discovery service can provide additional benefits such as search capabilities, curation, and analytics. The Discovery Service prototype demonstrates how such a centralized service can be implemented.</p>"},{"location":"prototypes/discovery-service/#features","title":"Features","text":"<ul> <li>Service Registration: Allows web services to register their intents and policies.</li> <li>Intent Discovery: Provides a search API for AI agents to discover intents.</li> <li>Service Verification: Verifies the authenticity of registered services.</li> <li>Analytics: Tracks usage patterns and provides insights.</li> <li>Curation: Curates high-quality services and intents.</li> <li>Web Interface: Provides a web interface for browsing and managing services and intents.</li> <li>API: Offers a comprehensive API for programmatic access.</li> </ul>"},{"location":"prototypes/discovery-service/#architecture","title":"Architecture","text":"<p>The Discovery Service is built with a modular architecture that separates concerns and promotes maintainability:</p> <pre><code>+------------------+\n|   Web Interface  |\n+------------------+\n         |\n+------------------+\n|    API Layer     |\n+------------------+\n         |\n+------------------+     +------------------+     +------------------+\n| Registry Module  |     | Search Module    |     | Analytics Module |\n+------------------+     +------------------+     +------------------+\n         |                       |                        |\n+------------------+     +------------------+     +------------------+\n| Verification     |     | Curation         |     | Notification     |\n| Module           |     | Module           |     | Module           |\n+------------------+     +------------------+     +------------------+\n         |                       |                        |\n+------------------+\n|  Data Storage    |\n+------------------+\n</code></pre>"},{"location":"prototypes/discovery-service/#components","title":"Components","text":"<ol> <li>Web Interface: Provides a user interface for browsing and managing services and intents.</li> <li>API Layer: Handles HTTP requests and responses.</li> <li>Registry Module: Manages service and intent registration.</li> <li>Search Module: Provides search capabilities for discovering services and intents.</li> <li>Analytics Module: Tracks usage patterns and provides insights.</li> <li>Verification Module: Verifies the authenticity of registered services.</li> <li>Curation Module: Curates high-quality services and intents.</li> <li>Notification Module: Sends notifications about new services and intents.</li> <li>Data Storage: Manages persistent storage of services, intents, and other data.</li> </ol>"},{"location":"prototypes/discovery-service/#installation","title":"Installation","text":""},{"location":"prototypes/discovery-service/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package manager)</li> <li>MongoDB (for production deployments)</li> </ul>"},{"location":"prototypes/discovery-service/#steps","title":"Steps","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/synaptiai/uim-protocol.git\ncd uim-protocol/implementations/centralized-discovery-service\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Configure the service (see Configuration section).</p> </li> <li> <p>Initialize the database:    <pre><code>python manage.py init-db\n</code></pre></p> </li> <li> <p>Start the service:    <pre><code>python manage.py runserver\n</code></pre></p> </li> </ol>"},{"location":"prototypes/discovery-service/#configuration","title":"Configuration","text":"<p>The Discovery Service can be configured using a configuration file or environment variables.</p>"},{"location":"prototypes/discovery-service/#configuration-file","title":"Configuration File","text":"<p>Create a file named <code>.env</code> in the service's directory:</p> <pre><code># Server Configuration\nHOST=localhost\nPORT=5000\nDEBUG=True\n\n# Database Configuration\nDB_TYPE=mongodb\nDB_HOST=localhost\nDB_PORT=27017\nDB_NAME=uim_discovery\nDB_USER=\nDB_PASSWORD=\n\n# Security Configuration\nSECRET_KEY=your-secret-key\nJWT_SECRET=your-jwt-secret\nADMIN_USERNAME=admin\nADMIN_PASSWORD=admin\nADMIN_EMAIL=admin@example.com\n\n# Verification Configuration\nVERIFY_SERVICES=True\nVERIFICATION_TIMEOUT=30\n\n# Curation Configuration\nENABLE_CURATION=True\nAUTO_APPROVE_SERVICES=False\n\n# Analytics Configuration\nENABLE_ANALYTICS=True\nANALYTICS_RETENTION_DAYS=90\n\n# Notification Configuration\nENABLE_NOTIFICATIONS=True\nSMTP_HOST=smtp.example.com\nSMTP_PORT=587\nSMTP_USER=user@example.com\nSMTP_PASSWORD=your-smtp-password\nNOTIFICATION_FROM=noreply@example.com\n</code></pre>"},{"location":"prototypes/discovery-service/#environment-variables","title":"Environment Variables","text":"<p>You can also use environment variables to configure the service. The environment variables have the same names as the keys in the <code>.env</code> file.</p>"},{"location":"prototypes/discovery-service/#usage","title":"Usage","text":""},{"location":"prototypes/discovery-service/#accessing-the-web-interface","title":"Accessing the Web Interface","text":"<p>Once the service is running, you can access the web interface at <code>http://localhost:5000</code> (or the URL you configured).</p> <p>The web interface provides:</p> <ul> <li>A dashboard with service statistics</li> <li>A list of registered services and intents</li> <li>Search functionality</li> <li>Service and intent details</li> <li>Administration tools</li> </ul>"},{"location":"prototypes/discovery-service/#api-endpoints","title":"API Endpoints","text":"<p>The Discovery Service provides the following API endpoints:</p>"},{"location":"prototypes/discovery-service/#service-endpoints","title":"Service Endpoints","text":"<ul> <li><code>GET /api/services</code>: Lists all registered services</li> <li><code>GET /api/services/{service_id}</code>: Returns details for a specific service</li> <li><code>POST /api/services</code>: Registers a new service</li> <li><code>PUT /api/services/{service_id}</code>: Updates a service</li> <li><code>DELETE /api/services/{service_id}</code>: Deletes a service</li> </ul>"},{"location":"prototypes/discovery-service/#intent-endpoints","title":"Intent Endpoints","text":"<ul> <li><code>GET /api/intents</code>: Lists all registered intents</li> <li><code>GET /api/intents/{intent_id}</code>: Returns details for a specific intent</li> <li><code>GET /api/intents/search</code>: Searches for intents based on query parameters</li> <li><code>POST /api/intents</code>: Registers a new intent</li> <li><code>PUT /api/intents/{intent_id}</code>: Updates an intent</li> <li><code>DELETE /api/intents/{intent_id}</code>: Deletes an intent</li> </ul>"},{"location":"prototypes/discovery-service/#authentication-endpoints","title":"Authentication Endpoints","text":"<ul> <li><code>POST /api/auth/login</code>: Authenticates a user and returns a JWT</li> <li><code>POST /api/auth/register</code>: Registers a new user</li> <li><code>POST /api/auth/refresh</code>: Refreshes a JWT</li> <li><code>POST /api/auth/logout</code>: Logs out a user</li> </ul>"},{"location":"prototypes/discovery-service/#admin-endpoints","title":"Admin Endpoints","text":"<ul> <li><code>GET /api/admin/users</code>: Lists all users</li> <li><code>GET /api/admin/analytics</code>: Returns analytics data</li> <li><code>POST /api/admin/verify-service/{service_id}</code>: Verifies a service</li> <li><code>POST /api/admin/curate-intent/{intent_id}</code>: Curates an intent</li> </ul>"},{"location":"prototypes/discovery-service/#service-registration","title":"Service Registration","text":"<p>Web services can register with the Discovery Service using the API or the web interface.</p>"},{"location":"prototypes/discovery-service/#api-registration","title":"API Registration","text":"<pre><code>curl -X POST http://localhost:5000/api/services \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer your-jwt-token\" \\\n  -d '{\n    \"name\": \"E-commerce Service\",\n    \"description\": \"A service for e-commerce operations\",\n    \"url\": \"https://api.example.com\",\n    \"logo_url\": \"https://example.com/logo.png\",\n    \"terms_url\": \"https://example.com/terms\",\n    \"privacy_url\": \"https://example.com/privacy\",\n    \"policy_url\": \"https://example.com/uim-policy.json\",\n    \"discovery_url\": \"https://api.example.com/uim/intents/search\",\n    \"intents\": [\n      {\n        \"intent_uid\": \"example.com:searchProducts:v1\",\n        \"intent_name\": \"SearchProducts\",\n        \"description\": \"Search for products based on criteria\",\n        \"input_parameters\": [\n          {\"name\": \"query\", \"type\": \"string\", \"required\": true},\n          {\"name\": \"category\", \"type\": \"string\", \"required\": false},\n          {\"name\": \"price_range\", \"type\": \"string\", \"required\": false},\n          {\"name\": \"sort_by\", \"type\": \"string\", \"required\": false}\n        ],\n        \"output_parameters\": [\n          {\"name\": \"products\", \"type\": \"array\"},\n          {\"name\": \"total_results\", \"type\": \"integer\"}\n        ],\n        \"endpoint\": \"https://api.example.com/products/search\",\n        \"tags\": [\"e-commerce\", \"search\", \"products\"]\n      }\n    ]\n  }'\n</code></pre>"},{"location":"prototypes/discovery-service/#web-interface-registration","title":"Web Interface Registration","text":"<ol> <li>Log in to the web interface</li> <li>Navigate to the \"Services\" section</li> <li>Click \"Register New Service\"</li> <li>Fill out the service details</li> <li>Add intents</li> <li>Submit the registration</li> </ol>"},{"location":"prototypes/discovery-service/#intent-discovery","title":"Intent Discovery","text":"<p>AI agents can discover intents using the API or the web interface.</p>"},{"location":"prototypes/discovery-service/#api-discovery","title":"API Discovery","text":"<pre><code>curl -X GET \"http://localhost:5000/api/intents/search?query=product&amp;tags=e-commerce,search\"\n</code></pre> <p>This will return a list of intents that match the query and tags.</p>"},{"location":"prototypes/discovery-service/#web-interface-discovery","title":"Web Interface Discovery","text":"<ol> <li>Navigate to the \"Intents\" section</li> <li>Use the search bar to search for intents</li> <li>Filter by tags, service, or other criteria</li> <li>View intent details</li> </ol>"},{"location":"prototypes/discovery-service/#deployment","title":"Deployment","text":"<p>The Discovery Service can be deployed in various environments:</p>"},{"location":"prototypes/discovery-service/#docker","title":"Docker","text":"<p>A Dockerfile is provided for containerized deployment:</p> <pre><code>docker build -t uim-discovery-service .\ndocker run -p 5000:5000 uim-discovery-service\n</code></pre>"},{"location":"prototypes/discovery-service/#docker-compose","title":"Docker Compose","text":"<p>A docker-compose.yml file is provided for multi-container deployment:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"prototypes/discovery-service/#cloud-deployment","title":"Cloud Deployment","text":"<p>Instructions for deploying to various cloud platforms are available in the <code>deployment</code> directory.</p>"},{"location":"prototypes/discovery-service/#integration-with-uim-protocol","title":"Integration with UIM Protocol","text":"<p>The Discovery Service integrates with the UIM Protocol in the following ways:</p>"},{"location":"prototypes/discovery-service/#for-web-services","title":"For Web Services","text":"<p>Web services can register their intents and policies with the Discovery Service, making them discoverable by AI agents.</p>"},{"location":"prototypes/discovery-service/#for-ai-agents","title":"For AI Agents","text":"<p>AI agents can use the Discovery Service to find web services and intents that match their requirements.</p>"},{"location":"prototypes/discovery-service/#complementary-to-decentralized-discovery","title":"Complementary to Decentralized Discovery","text":"<p>The Discovery Service complements the decentralized discovery mechanism of the UIM Protocol. AI agents can use both methods to discover services and intents.</p>"},{"location":"prototypes/discovery-service/#extending-the-discovery-service","title":"Extending the Discovery Service","text":"<p>The Discovery Service is designed to be extensible. Here are some ways you can extend it:</p>"},{"location":"prototypes/discovery-service/#adding-new-features","title":"Adding New Features","text":"<p>To add a new feature:</p> <ol> <li>Create a new module in the appropriate directory</li> <li>Implement the feature</li> <li>Register the module in the application</li> </ol>"},{"location":"prototypes/discovery-service/#adding-storage-backends","title":"Adding Storage Backends","text":"<p>The Discovery Service supports different storage backends. To add a new one:</p> <ol> <li>Create a new file in the <code>storage</code> directory</li> <li>Implement the storage interface</li> <li>Register the storage backend in <code>storage/__init__.py</code></li> </ol>"},{"location":"prototypes/discovery-service/#adding-authentication-methods","title":"Adding Authentication Methods","text":"<p>To add a new authentication method:</p> <ol> <li>Create a new file in the <code>auth</code> directory</li> <li>Implement the authentication interface</li> <li>Register the authentication method in <code>auth/__init__.py</code></li> </ol>"},{"location":"prototypes/discovery-service/#testing","title":"Testing","text":"<p>The Discovery Service includes a comprehensive test suite to ensure its functionality:</p> <pre><code>pytest\n</code></pre> <p>For more detailed test output:</p> <pre><code>pytest -v\n</code></pre> <p>To run specific tests:</p> <pre><code>pytest tests/test_registry.py\n</code></pre>"},{"location":"prototypes/discovery-service/#troubleshooting","title":"Troubleshooting","text":""},{"location":"prototypes/discovery-service/#common-issues","title":"Common Issues","text":""},{"location":"prototypes/discovery-service/#server-wont-start","title":"Server Won't Start","text":"<p>If the server won't start:</p> <ol> <li>Check that the port is not already in use</li> <li>Verify that the configuration file is valid</li> <li>Ensure that the database is running and accessible</li> <li>Check the logs for error messages</li> </ol>"},{"location":"prototypes/discovery-service/#registration-errors","title":"Registration Errors","text":"<p>If service registration is failing:</p> <ol> <li>Check that the service details are valid</li> <li>Verify that the service URL is accessible</li> <li>Ensure that the intents are properly formatted</li> <li>Check the logs for error messages</li> </ol>"},{"location":"prototypes/discovery-service/#search-errors","title":"Search Errors","text":"<p>If intent search is failing:</p> <ol> <li>Check that the search parameters are valid</li> <li>Verify that the database is running and accessible</li> <li>Ensure that there are intents in the database</li> <li>Check the logs for error messages</li> </ol>"},{"location":"prototypes/discovery-service/#logging","title":"Logging","text":"<p>The Discovery Service logs information to the console and to a log file. To change the log level:</p> <pre><code>export DEBUG=True\npython manage.py runserver\n</code></pre> <p>Log files are stored in the <code>logs</code> directory.</p>"},{"location":"prototypes/discovery-service/#contributing","title":"Contributing","text":"<p>We welcome contributions to the Discovery Service! Please see the Contributing Guide for more information.</p>"},{"location":"prototypes/discovery-service/#license","title":"License","text":"<p>The Discovery Service is licensed under the Apache License 2.0. See the LICENSE file for details.</p>"},{"location":"prototypes/mock-agent/","title":"Mock Agent","text":"<p>The Mock Agent is a simulated AI agent that implements the Unified Intent Mediator (UIM) Protocol. It serves as a reference implementation and testing tool for developers working with the protocol.</p>"},{"location":"prototypes/mock-agent/#overview","title":"Overview","text":"<p>The Mock Agent demonstrates how AI agents can discover services, request Policy Adherence Tokens (PATs), and execute intents using the UIM Protocol. It provides a command-line interface for interacting with UIM-compatible web services.</p>"},{"location":"prototypes/mock-agent/#features","title":"Features","text":"<ul> <li>Service Discovery: Discovers web services using DNS TXT records and <code>agents.json</code> files.</li> <li>Intent Discovery: Searches for intents based on various criteria.</li> <li>Policy Retrieval: Retrieves and parses policies from web services.</li> <li>Policy Signing: Signs policies using RSA key pairs.</li> <li>PAT Acquisition: Requests and manages PATs from web services.</li> <li>Intent Execution: Executes intents with the appropriate parameters and PATs.</li> <li>Command-Line Interface: Provides a user-friendly CLI for interacting with the agent.</li> </ul>"},{"location":"prototypes/mock-agent/#architecture","title":"Architecture","text":"<p>The Mock Agent is built with a modular architecture that separates concerns and promotes maintainability:</p> <pre><code>+------------------+\n|     CLI Layer    |\n+------------------+\n         |\n+------------------+\n|   Agent Core     |\n+------------------+\n         |\n+------------------+     +------------------+     +------------------+\n| Discovery Module |     |  Policy Module   |     | Execution Module |\n+------------------+     +------------------+     +------------------+\n         |                       |                        |\n+------------------+     +------------------+     +------------------+\n| Network Layer    |     | Crypto Layer     |     | Storage Layer    |\n+------------------+     +------------------+     +------------------+\n</code></pre>"},{"location":"prototypes/mock-agent/#components","title":"Components","text":"<ol> <li>CLI Layer: Provides the command-line interface for users to interact with the agent.</li> <li>Agent Core: Coordinates the different modules and manages the agent's state.</li> <li>Discovery Module: Handles service and intent discovery.</li> <li>Policy Module: Manages policy retrieval, parsing, and signing.</li> <li>Execution Module: Handles intent execution and result processing.</li> <li>Network Layer: Manages HTTP requests and responses.</li> <li>Crypto Layer: Handles cryptographic operations like key generation and signing.</li> <li>Storage Layer: Manages persistent storage of keys, PATs, and other data.</li> </ol>"},{"location":"prototypes/mock-agent/#installation","title":"Installation","text":""},{"location":"prototypes/mock-agent/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package manager)</li> </ul>"},{"location":"prototypes/mock-agent/#steps","title":"Steps","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/synaptiai/uim-protocol.git\ncd uim-protocol/implementations/uim-mock-agent\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Generate keys (if not already present):    <pre><code>python mock_agent.py generate-keys\n</code></pre></p> </li> </ol>"},{"location":"prototypes/mock-agent/#usage","title":"Usage","text":""},{"location":"prototypes/mock-agent/#basic-commands","title":"Basic Commands","text":"<p>The Mock Agent provides several commands for interacting with UIM-compatible web services:</p>"},{"location":"prototypes/mock-agent/#discover-a-service","title":"Discover a Service","text":"<pre><code>python mock_agent.py discover --domain example.com\n</code></pre> <p>This command will: 1. Look up DNS TXT records for <code>example.com</code> 2. Fetch the <code>agents.json</code> file 3. Parse and display service information</p>"},{"location":"prototypes/mock-agent/#search-for-intents","title":"Search for Intents","text":"<pre><code>python mock_agent.py search-intents --service-url https://api.example.com --tags e-commerce,search\n</code></pre> <p>This command will: 1. Query the service's discovery endpoint 2. Filter intents based on the provided tags 3. Display the matching intents</p>"},{"location":"prototypes/mock-agent/#get-a-pat","title":"Get a PAT","text":"<pre><code>python mock_agent.py get-pat --service-url https://api.example.com\n</code></pre> <p>This command will: 1. Retrieve the service's policy 2. Sign the policy with the agent's private key 3. Request a PAT from the service 4. Store the PAT for future use</p>"},{"location":"prototypes/mock-agent/#execute-an-intent","title":"Execute an Intent","text":"<pre><code>python mock_agent.py execute --service-url https://api.example.com --intent-uid example.com:searchProducts:v1 --parameters '{\"query\": \"laptop\", \"category\": \"electronics\"}'\n</code></pre> <p>This command will: 1. Retrieve the PAT for the service (or request a new one if needed) 2. Execute the intent with the provided parameters 3. Display the result</p>"},{"location":"prototypes/mock-agent/#advanced-usage","title":"Advanced Usage","text":""},{"location":"prototypes/mock-agent/#interactive-mode","title":"Interactive Mode","text":"<p>The Mock Agent also provides an interactive mode for more complex interactions:</p> <pre><code>python mock_agent.py interactive\n</code></pre> <p>This will start an interactive shell where you can enter commands and see the results in real-time.</p>"},{"location":"prototypes/mock-agent/#batch-mode","title":"Batch Mode","text":"<p>For automated testing, you can use batch mode to execute a series of commands from a file:</p> <pre><code>python mock_agent.py batch --file commands.txt\n</code></pre> <p>Where <code>commands.txt</code> contains one command per line.</p>"},{"location":"prototypes/mock-agent/#verbose-mode","title":"Verbose Mode","text":"<p>To see more detailed information about what the agent is doing, use the <code>--verbose</code> flag:</p> <pre><code>python mock_agent.py discover --domain example.com --verbose\n</code></pre>"},{"location":"prototypes/mock-agent/#configuration","title":"Configuration","text":"<p>The Mock Agent can be configured using a configuration file or environment variables.</p>"},{"location":"prototypes/mock-agent/#configuration-file","title":"Configuration File","text":"<p>Create a file named <code>config.json</code> in the agent's directory:</p> <pre><code>{\n  \"agent_id\": \"mock-agent-123\",\n  \"keys_dir\": \"./keys\",\n  \"pats_dir\": \"./pats\",\n  \"log_level\": \"INFO\",\n  \"timeout\": 30,\n  \"verify_ssl\": true\n}\n</code></pre>"},{"location":"prototypes/mock-agent/#environment-variables","title":"Environment Variables","text":"<p>You can also use environment variables to configure the agent:</p> <ul> <li><code>UIM_AGENT_ID</code>: The identifier for the agent</li> <li><code>UIM_KEYS_DIR</code>: Directory for storing keys</li> <li><code>UIM_PATS_DIR</code>: Directory for storing PATs</li> <li><code>UIM_LOG_LEVEL</code>: Logging level (DEBUG, INFO, WARNING, ERROR)</li> <li><code>UIM_TIMEOUT</code>: Request timeout in seconds</li> <li><code>UIM_VERIFY_SSL</code>: Whether to verify SSL certificates</li> </ul>"},{"location":"prototypes/mock-agent/#extending-the-mock-agent","title":"Extending the Mock Agent","text":"<p>The Mock Agent is designed to be extensible. Here are some ways you can extend it:</p>"},{"location":"prototypes/mock-agent/#adding-new-commands","title":"Adding New Commands","text":"<p>To add a new command, create a new file in the <code>commands</code> directory:</p> <pre><code># commands/my_command.py\nfrom .base import BaseCommand\n\nclass MyCommand(BaseCommand):\n    name = \"my-command\"\n    description = \"Description of my command\"\n\n    def add_arguments(self, parser):\n        parser.add_argument(\"--my-arg\", help=\"Description of my argument\")\n\n    def execute(self, args):\n        # Implementation of the command\n        print(f\"Executing my command with arg: {args.my_arg}\")\n</code></pre> <p>Then register the command in <code>commands/__init__.py</code>.</p>"},{"location":"prototypes/mock-agent/#adding-new-modules","title":"Adding New Modules","text":"<p>To add a new module, create a new file in the <code>modules</code> directory:</p> <pre><code># modules/my_module.py\nclass MyModule:\n    def __init__(self, agent):\n        self.agent = agent\n\n    def my_function(self, arg):\n        # Implementation of the function\n        return f\"Result: {arg}\"\n</code></pre> <p>Then initialize the module in <code>agent.py</code>.</p>"},{"location":"prototypes/mock-agent/#testing","title":"Testing","text":"<p>The Mock Agent includes a comprehensive test suite to ensure its functionality:</p> <pre><code>pytest\n</code></pre> <p>For more detailed test output:</p> <pre><code>pytest -v\n</code></pre> <p>To run specific tests:</p> <pre><code>pytest tests/test_discovery.py\n</code></pre>"},{"location":"prototypes/mock-agent/#troubleshooting","title":"Troubleshooting","text":""},{"location":"prototypes/mock-agent/#common-issues","title":"Common Issues","text":""},{"location":"prototypes/mock-agent/#dns-resolution-errors","title":"DNS Resolution Errors","text":"<p>If you're having trouble with DNS resolution:</p> <ol> <li>Check that the domain exists and has TXT records</li> <li>Try using the <code>--dns-server</code> flag to specify a different DNS server</li> <li>Use the <code>--verbose</code> flag to see more detailed error information</li> </ol>"},{"location":"prototypes/mock-agent/#pat-acquisition-errors","title":"PAT Acquisition Errors","text":"<p>If you're having trouble acquiring PATs:</p> <ol> <li>Check that your keys are generated correctly</li> <li>Verify that the service's policy is accessible</li> <li>Ensure that your agent ID is valid</li> <li>Use the <code>--verbose</code> flag to see more detailed error information</li> </ol>"},{"location":"prototypes/mock-agent/#intent-execution-errors","title":"Intent Execution Errors","text":"<p>If you're having trouble executing intents:</p> <ol> <li>Check that you have a valid PAT for the service</li> <li>Verify that the intent UID is correct</li> <li>Ensure that the parameters are valid for the intent</li> <li>Use the <code>--verbose</code> flag to see more detailed error information</li> </ol>"},{"location":"prototypes/mock-agent/#logging","title":"Logging","text":"<p>The Mock Agent logs information to the console and to a log file. To change the log level:</p> <pre><code>python mock_agent.py --log-level DEBUG discover --domain example.com\n</code></pre> <p>Log files are stored in the <code>logs</code> directory.</p>"},{"location":"prototypes/mock-agent/#contributing","title":"Contributing","text":"<p>We welcome contributions to the Mock Agent! Please see the Contributing Guide for more information.</p>"},{"location":"prototypes/mock-agent/#license","title":"License","text":"<p>The Mock Agent is licensed under the Apache License 2.0. See the LICENSE file for details.</p>"},{"location":"prototypes/mock-webservice/","title":"Mock Webservice","text":"<p>The Mock Webservice is a simulated web service that implements the Unified Intent Mediator (UIM) Protocol. It serves as a reference implementation and testing tool for developers working with the protocol.</p>"},{"location":"prototypes/mock-webservice/#overview","title":"Overview","text":"<p>The Mock Webservice demonstrates how web services can expose intents, issue Policy Adherence Tokens (PATs), and process intent execution requests using the UIM Protocol. It provides a complete implementation of the server-side components of the protocol.</p>"},{"location":"prototypes/mock-webservice/#features","title":"Features","text":"<ul> <li>Intent Definition: Defines and exposes intents with their parameters and metadata.</li> <li>Policy Definition: Creates and serves policies that AI agents must adhere to.</li> <li>Discovery Endpoints: Provides endpoints for AI agents to discover intents.</li> <li>PAT Issuance: Issues PATs to AI agents that agree to adhere to policies.</li> <li>Intent Execution: Processes intent execution requests from AI agents.</li> <li>Simulated Business Logic: Includes simulated business logic for testing intent execution.</li> <li>Web Interface: Provides a web interface for monitoring and managing the service.</li> </ul>"},{"location":"prototypes/mock-webservice/#architecture","title":"Architecture","text":"<p>The Mock Webservice is built with a modular architecture that separates concerns and promotes maintainability:</p> <pre><code>+------------------+\n|   Web Interface  |\n+------------------+\n         |\n+------------------+\n|    API Layer     |\n+------------------+\n         |\n+------------------+     +------------------+     +------------------+\n| Discovery Module |     |  Policy Module   |     | Execution Module |\n+------------------+     +------------------+     +------------------+\n         |                       |                        |\n+------------------+     +------------------+     +------------------+\n| Intent Registry  |     | Crypto Service   |     | Business Logic   |\n+------------------+     +------------------+     +------------------+\n         |                       |                        |\n+------------------+\n|  Data Storage    |\n+------------------+\n</code></pre>"},{"location":"prototypes/mock-webservice/#components","title":"Components","text":"<ol> <li>Web Interface: Provides a user interface for monitoring and managing the service.</li> <li>API Layer: Handles HTTP requests and responses.</li> <li>Discovery Module: Manages intent discovery and service information.</li> <li>Policy Module: Handles policy definition, serving, and PAT issuance.</li> <li>Execution Module: Processes intent execution requests.</li> <li>Intent Registry: Stores and manages intent definitions.</li> <li>Crypto Service: Handles cryptographic operations like key management and signature verification.</li> <li>Business Logic: Implements the actual functionality behind intents.</li> <li>Data Storage: Manages persistent storage of intents, policies, and other data.</li> </ol>"},{"location":"prototypes/mock-webservice/#installation","title":"Installation","text":""},{"location":"prototypes/mock-webservice/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 14 or higher</li> <li>npm (Node.js package manager)</li> </ul>"},{"location":"prototypes/mock-webservice/#steps","title":"Steps","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/synaptiai/uim-protocol.git\ncd uim-protocol/implementations/uim-mock-webservice\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Generate keys (if not already present):    <pre><code>npm run generate-keys\n</code></pre></p> </li> <li> <p>Configure the service (see Configuration section).</p> </li> <li> <p>Start the service:    <pre><code>npm start\n</code></pre></p> </li> </ol>"},{"location":"prototypes/mock-webservice/#configuration","title":"Configuration","text":"<p>The Mock Webservice can be configured using a configuration file or environment variables.</p>"},{"location":"prototypes/mock-webservice/#configuration-file","title":"Configuration File","text":"<p>Create a file named <code>config.json</code> in the service's directory:</p> <pre><code>{\n  \"service\": {\n    \"name\": \"Mock E-commerce Service\",\n    \"description\": \"A mock e-commerce service for testing the UIM Protocol\",\n    \"url\": \"http://localhost:3000\",\n    \"logo_url\": \"http://localhost:3000/logo.png\",\n    \"terms_url\": \"http://localhost:3000/terms\",\n    \"privacy_url\": \"http://localhost:3000/privacy\"\n  },\n  \"server\": {\n    \"port\": 3000,\n    \"host\": \"localhost\"\n  },\n  \"keys\": {\n    \"private_key_path\": \"./keys/private-key.pem\",\n    \"public_key_path\": \"./keys/public-key.pem\"\n  },\n  \"policy\": {\n    \"rate_limit\": 1000,\n    \"rate_limit_period\": \"hour\",\n    \"intent_price\": 0.01,\n    \"currency\": \"USD\"\n  },\n  \"storage\": {\n    \"type\": \"memory\"\n  },\n  \"logging\": {\n    \"level\": \"info\",\n    \"file\": \"./logs/service.log\"\n  }\n}\n</code></pre>"},{"location":"prototypes/mock-webservice/#environment-variables","title":"Environment Variables","text":"<p>You can also use environment variables to configure the service:</p> <ul> <li><code>UIM_SERVICE_NAME</code>: The name of the service</li> <li><code>UIM_SERVICE_DESCRIPTION</code>: A description of the service</li> <li><code>UIM_SERVICE_URL</code>: The URL of the service</li> <li><code>UIM_SERVER_PORT</code>: The port to run the server on</li> <li><code>UIM_SERVER_HOST</code>: The host to run the server on</li> <li><code>UIM_PRIVATE_KEY_PATH</code>: Path to the private key file</li> <li><code>UIM_PUBLIC_KEY_PATH</code>: Path to the public key file</li> <li><code>UIM_RATE_LIMIT</code>: Rate limit for intent execution</li> <li><code>UIM_RATE_LIMIT_PERIOD</code>: Period for rate limiting (second, minute, hour, day)</li> <li><code>UIM_INTENT_PRICE</code>: Price per intent execution</li> <li><code>UIM_CURRENCY</code>: Currency for intent pricing</li> <li><code>UIM_STORAGE_TYPE</code>: Type of storage (memory, file, mongodb)</li> <li><code>UIM_LOG_LEVEL</code>: Logging level (debug, info, warn, error)</li> <li><code>UIM_LOG_FILE</code>: Path to the log file</li> </ul>"},{"location":"prototypes/mock-webservice/#usage","title":"Usage","text":""},{"location":"prototypes/mock-webservice/#accessing-the-web-interface","title":"Accessing the Web Interface","text":"<p>Once the service is running, you can access the web interface at <code>http://localhost:3000</code> (or the URL you configured).</p> <p>The web interface provides:</p> <ul> <li>A dashboard with service statistics</li> <li>A list of defined intents</li> <li>A log of intent executions</li> <li>Configuration options</li> <li>PAT management</li> </ul>"},{"location":"prototypes/mock-webservice/#defining-intents","title":"Defining Intents","text":"<p>Intents can be defined in the <code>intents.json</code> file or through the web interface.</p>"},{"location":"prototypes/mock-webservice/#example-intent-definition","title":"Example Intent Definition","text":"<pre><code>{\n  \"intent_uid\": \"mock-ecommerce:searchProducts:v1\",\n  \"intent_name\": \"SearchProducts\",\n  \"description\": \"Search for products based on criteria\",\n  \"input_parameters\": [\n    {\n      \"name\": \"query\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Search query\"\n    },\n    {\n      \"name\": \"category\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Product category\"\n    },\n    {\n      \"name\": \"price_range\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Price range (e.g., '10-100')\"\n    },\n    {\n      \"name\": \"sort_by\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Sort criteria\"\n    }\n  ],\n  \"output_parameters\": [\n    {\n      \"name\": \"products\",\n      \"type\": \"array\",\n      \"description\": \"List of matching products\"\n    },\n    {\n      \"name\": \"total_results\",\n      \"type\": \"integer\",\n      \"description\": \"Total number of matching products\"\n    }\n  ],\n  \"endpoint\": \"/api/products/search\",\n  \"tags\": [\"e-commerce\", \"search\", \"products\"]\n}\n</code></pre>"},{"location":"prototypes/mock-webservice/#implementing-business-logic","title":"Implementing Business Logic","text":"<p>The business logic for intents is implemented in the <code>handlers</code> directory. Each intent has a corresponding handler file.</p>"},{"location":"prototypes/mock-webservice/#example-handler","title":"Example Handler","text":"<pre><code>// handlers/searchProducts.js\nmodule.exports = async function searchProducts(parameters) {\n  const { query, category, price_range, sort_by } = parameters;\n\n  // In a real implementation, this would query a database\n  // For the mock service, we return simulated data\n  const products = [\n    {\n      id: '123',\n      name: 'Laptop',\n      price: 1500,\n      category: 'electronics',\n      description: 'A powerful laptop'\n    },\n    {\n      id: '456',\n      name: 'Smartphone',\n      price: 800,\n      category: 'electronics',\n      description: 'A feature-rich smartphone'\n    }\n  ];\n\n  // Filter by category if provided\n  let filteredProducts = products;\n  if (category) {\n    filteredProducts = filteredProducts.filter(p =&gt; p.category === category);\n  }\n\n  // Filter by price range if provided\n  if (price_range) {\n    const [min, max] = price_range.split('-').map(Number);\n    filteredProducts = filteredProducts.filter(p =&gt; p.price &gt;= min &amp;&amp; p.price &lt;= max);\n  }\n\n  // Sort if sort_by is provided\n  if (sort_by === 'price_asc') {\n    filteredProducts.sort((a, b) =&gt; a.price - b.price);\n  } else if (sort_by === 'price_desc') {\n    filteredProducts.sort((a, b) =&gt; b.price - a.price);\n  }\n\n  return {\n    products: filteredProducts,\n    total_results: filteredProducts.length\n  };\n};\n</code></pre>"},{"location":"prototypes/mock-webservice/#api-endpoints","title":"API Endpoints","text":"<p>The Mock Webservice provides the following API endpoints:</p>"},{"location":"prototypes/mock-webservice/#discovery-endpoints","title":"Discovery Endpoints","text":"<ul> <li><code>GET /agents.json</code>: Returns the service information and intents</li> <li><code>GET /uim/intents/search</code>: Searches for intents based on query parameters</li> <li><code>GET /uim/intents/:intent_uid</code>: Returns details for a specific intent</li> </ul>"},{"location":"prototypes/mock-webservice/#policy-endpoints","title":"Policy Endpoints","text":"<ul> <li><code>GET /uim-policy.json</code>: Returns the service's policy</li> <li><code>POST /pat/issue</code>: Issues a PAT to an AI agent</li> </ul>"},{"location":"prototypes/mock-webservice/#execution-endpoints","title":"Execution Endpoints","text":"<ul> <li><code>POST /uim/execute</code>: Executes an intent</li> </ul>"},{"location":"prototypes/mock-webservice/#dns-configuration","title":"DNS Configuration","text":"<p>To enable DNS-based discovery, you need to configure TXT records for your domain:</p> <pre><code>uim-agents-file=http://localhost:3000/agents.json\nuim-api-discovery=http://localhost:3000/uim/intents/search\nuim-policy-file=http://localhost:3000/uim-policy.json\n</code></pre> <p>For local testing, you can use a hosts file entry:</p> <pre><code>127.0.0.1 mock-service.local\n</code></pre> <p>And then configure the TXT records in a local DNS server or use a service like dnsmasq.</p>"},{"location":"prototypes/mock-webservice/#extending-the-mock-webservice","title":"Extending the Mock Webservice","text":"<p>The Mock Webservice is designed to be extensible. Here are some ways you can extend it:</p>"},{"location":"prototypes/mock-webservice/#adding-new-intents","title":"Adding New Intents","text":"<p>To add a new intent:</p> <ol> <li>Define the intent in <code>intents.json</code> or through the web interface</li> <li>Create a handler file in the <code>handlers</code> directory</li> <li>Implement the business logic for the intent</li> </ol>"},{"location":"prototypes/mock-webservice/#adding-storage-backends","title":"Adding Storage Backends","text":"<p>The Mock Webservice supports different storage backends. To add a new one:</p> <ol> <li>Create a new file in the <code>storage</code> directory</li> <li>Implement the storage interface</li> <li>Register the storage backend in <code>storage/index.js</code></li> </ol>"},{"location":"prototypes/mock-webservice/#adding-authentication-methods","title":"Adding Authentication Methods","text":"<p>To add a new authentication method:</p> <ol> <li>Create a new file in the <code>auth</code> directory</li> <li>Implement the authentication interface</li> <li>Register the authentication method in <code>auth/index.js</code></li> </ol>"},{"location":"prototypes/mock-webservice/#testing","title":"Testing","text":"<p>The Mock Webservice includes a comprehensive test suite to ensure its functionality:</p> <pre><code>npm test\n</code></pre> <p>For more detailed test output:</p> <pre><code>npm run test:verbose\n</code></pre> <p>To run specific tests:</p> <pre><code>npm test -- --grep \"Intent Execution\"\n</code></pre>"},{"location":"prototypes/mock-webservice/#deployment","title":"Deployment","text":"<p>The Mock Webservice can be deployed in various environments:</p>"},{"location":"prototypes/mock-webservice/#docker","title":"Docker","text":"<p>A Dockerfile is provided for containerized deployment:</p> <pre><code>docker build -t uim-mock-webservice .\ndocker run -p 3000:3000 uim-mock-webservice\n</code></pre>"},{"location":"prototypes/mock-webservice/#docker-compose","title":"Docker Compose","text":"<p>A docker-compose.yml file is provided for multi-container deployment:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"prototypes/mock-webservice/#cloud-deployment","title":"Cloud Deployment","text":"<p>Instructions for deploying to various cloud platforms are available in the <code>deployment</code> directory.</p>"},{"location":"prototypes/mock-webservice/#troubleshooting","title":"Troubleshooting","text":""},{"location":"prototypes/mock-webservice/#common-issues","title":"Common Issues","text":""},{"location":"prototypes/mock-webservice/#server-wont-start","title":"Server Won't Start","text":"<p>If the server won't start:</p> <ol> <li>Check that the port is not already in use</li> <li>Verify that the configuration file is valid</li> <li>Ensure that the keys are generated correctly</li> <li>Check the logs for error messages</li> </ol>"},{"location":"prototypes/mock-webservice/#pat-issuance-errors","title":"PAT Issuance Errors","text":"<p>If PAT issuance is failing:</p> <ol> <li>Check that the agent's signature is valid</li> <li>Verify that the agent's public key is in the correct format</li> <li>Ensure that the policy is being served correctly</li> <li>Check the logs for error messages</li> </ol>"},{"location":"prototypes/mock-webservice/#intent-execution-errors","title":"Intent Execution Errors","text":"<p>If intent execution is failing:</p> <ol> <li>Check that the PAT is valid and not expired</li> <li>Verify that the intent UID is correct</li> <li>Ensure that the parameters are valid for the intent</li> <li>Check the handler implementation for errors</li> <li>Check the logs for error messages</li> </ol>"},{"location":"prototypes/mock-webservice/#logging","title":"Logging","text":"<p>The Mock Webservice logs information to the console and to a log file. To change the log level:</p> <pre><code>UIM_LOG_LEVEL=debug npm start\n</code></pre> <p>Log files are stored in the <code>logs</code> directory.</p>"},{"location":"prototypes/mock-webservice/#contributing","title":"Contributing","text":"<p>We welcome contributions to the Mock Webservice! Please see the Contributing Guide for more information.</p>"},{"location":"prototypes/mock-webservice/#license","title":"License","text":"<p>The Mock Webservice is licensed under the Apache License 2.0. See the LICENSE file for details.</p>"},{"location":"prototypes/overview/","title":"Prototype Overview","text":"<p>This page provides an overview of the prototype implementations of the UIM Protocol. These prototypes demonstrate the feasibility and functionality of the protocol in real-world scenarios.</p>"},{"location":"prototypes/overview/#purpose-of-prototypes","title":"Purpose of Prototypes","text":"<p>The UIM Protocol prototypes serve several important purposes:</p> <ol> <li>Proof of Concept: Demonstrating that the protocol can be implemented and works as designed.</li> <li>Reference Implementation: Providing a reference for developers implementing the protocol in their own systems.</li> <li>Testing Ground: Allowing for experimentation and testing of protocol features and extensions.</li> <li>Feedback Collection: Gathering feedback from early adopters to improve the protocol.</li> <li>Interoperability Testing: Ensuring different implementations can work together seamlessly.</li> </ol>"},{"location":"prototypes/overview/#available-prototypes","title":"Available Prototypes","text":"<p>The UIM Protocol project currently includes the following prototype implementations:</p>"},{"location":"prototypes/overview/#1-discovery-service","title":"1. Discovery Service","text":"<p>The Discovery Service is a centralized implementation of the UIM Protocol's discovery mechanism. It allows AI agents to discover web services and their intents through a centralized registry.</p> <p>Key Features: - Service registration and management - Intent registration and discovery - Policy management - PAT issuance</p> <p>Technologies: - Node.js - Express - MongoDB - JWT for PAT implementation</p>"},{"location":"prototypes/overview/#2-mock-agent","title":"2. Mock Agent","text":"<p>The Mock Agent is a simulated AI agent that implements the UIM Protocol. It can discover services, request PATs, and execute intents.</p> <p>Key Features: - Service discovery using DNS TXT records and agents.json - Policy retrieval and signing - PAT acquisition - Intent discovery and execution</p> <p>Technologies: - Python - Requests library - Cryptography library - Command-line interface</p>"},{"location":"prototypes/overview/#3-mock-webservice","title":"3. Mock Webservice","text":"<p>The Mock Webservice is a simulated web service that implements the UIM Protocol. It exposes intents, issues PATs, and processes intent execution requests.</p> <p>Key Features: - Intent definition and exposure - Policy definition and enforcement - PAT issuance - Intent execution</p> <p>Technologies: - Node.js - Express - JWT for PAT implementation - In-memory data store</p>"},{"location":"prototypes/overview/#architecture-overview","title":"Architecture Overview","text":"<p>The prototype implementations follow the architecture defined in the UIM Protocol specification. The following diagram illustrates how the prototypes interact with each other:</p> <pre><code>+----------------+       Discovery       +------------------+\n|                |&lt;--------------------&gt;|                  |\n|   Mock Agent   |                      | Discovery Service |\n|                |&lt;--------------------&gt;|                  |\n+----------------+       Registration    +------------------+\n        ^                                         ^\n        |                                         |\n        | Intent Execution                        | Registration\n        |                                         |\n        v                                         v\n+----------------+                      +------------------+\n|                |                      |                  |\n| Mock Webservice|&lt;--------------------&gt;| Other Webservices|\n|                |    Interoperability  |                  |\n+----------------+                      +------------------+\n</code></pre>"},{"location":"prototypes/overview/#getting-started-with-prototypes","title":"Getting Started with Prototypes","text":"<p>To get started with the UIM Protocol prototypes, follow these steps:</p> <ol> <li> <p>Clone the UIM Protocol repository:    <pre><code>git clone https://github.com/synaptiai/uim-protocol.git\ncd uim-protocol\n</code></pre></p> </li> <li> <p>Set up the Discovery Service:    <pre><code>cd discovery-service\nnpm install\nnpm start\n</code></pre></p> </li> <li> <p>Set up the Mock Webservice:    <pre><code>cd mock-webservice\nnpm install\nnpm start\n</code></pre></p> </li> <li> <p>Set up the Mock Agent:    <pre><code>cd mock-agent\npip install -r requirements.txt\npython mock_agent.py\n</code></pre></p> </li> <li> <p>Follow the specific instructions in each prototype's documentation for detailed usage.</p> </li> </ol>"},{"location":"prototypes/overview/#example-workflow","title":"Example Workflow","text":"<p>Here's an example workflow demonstrating how the prototypes work together:</p> <ol> <li>The Mock Webservice registers with the Discovery Service, providing its intents and policy.</li> <li>The Mock Agent queries the Discovery Service to find services that match its requirements.</li> <li>The Mock Agent retrieves the policy from the Mock Webservice.</li> <li>The Mock Agent signs the policy and requests a PAT from the Mock Webservice.</li> <li>The Mock Webservice verifies the signature and issues a PAT to the Mock Agent.</li> <li>The Mock Agent executes an intent on the Mock Webservice using the PAT.</li> <li>The Mock Webservice verifies the PAT, processes the intent, and returns the result.</li> </ol>"},{"location":"prototypes/overview/#extending-the-prototypes","title":"Extending the Prototypes","text":"<p>The UIM Protocol prototypes are designed to be extensible. Here are some ways you can extend them:</p> <ol> <li>Add New Intents: Define new intents in the Mock Webservice to expose additional functionality.</li> <li>Implement New Policies: Create more complex policies with different constraints and duties.</li> <li>Add Authentication Methods: Implement additional authentication methods for PAT issuance.</li> <li>Create New Agents: Develop specialized agents for specific use cases.</li> <li>Integrate with Real Services: Connect the prototypes to real web services.</li> </ol>"},{"location":"prototypes/overview/#contributing-to-prototypes","title":"Contributing to Prototypes","text":"<p>We welcome contributions to the UIM Protocol prototypes. If you'd like to contribute, please follow these steps:</p> <ol> <li>Fork the repository on GitHub.</li> <li>Create a new branch for your feature or bug fix.</li> <li>Make your changes and write tests.</li> <li>Submit a pull request with a clear description of your changes.</li> </ol> <p>For more information on contributing, see the Contributing Guide.</p>"},{"location":"prototypes/overview/#future-developments","title":"Future Developments","text":"<p>The UIM Protocol prototypes are continuously evolving. Future developments include:</p> <ol> <li>Decentralized Discovery: Implementing a fully decentralized discovery mechanism.</li> <li>Enhanced Security: Adding more robust security features.</li> <li>Performance Optimizations: Improving the performance of the prototypes.</li> <li>Additional Language Implementations: Creating implementations in other programming languages.</li> <li>Real-world Integrations: Integrating with popular web services and AI platforms.</li> </ol> <p>For more information on the roadmap, see the Roadmap.</p>"},{"location":"reference/","title":"UIM Protocol Technical Reference","text":"<p>Welcome to the UIM Protocol Technical Reference. This section provides detailed technical information about the protocol, including vocabulary, schemas, and error codes.</p>"},{"location":"reference/#reference-documentation","title":"Reference Documentation","text":"<ul> <li>ODRL Vocabulary: Detailed documentation of the Open Digital Rights Language (ODRL) vocabulary used in the UIM Protocol</li> <li>Licensing Scheme: Information about the UIM Licensing Scheme for defining permissions, conditions, and prohibitions</li> <li>Error Codes: Comprehensive list of error codes and their meanings</li> <li>JSON Schemas: JSON Schema definitions for all data structures used in the protocol</li> </ul>"},{"location":"reference/#data-models","title":"Data Models","text":"<p>The UIM Protocol defines several key data models:</p>"},{"location":"reference/#intent","title":"Intent","text":"<pre><code>{\n  \"intent_uid\": \"example.com:search-products:v1\",\n  \"intent_name\": \"SearchProducts\",\n  \"description\": \"Search for products based on criteria\",\n  \"input_parameters\": [\n    {\"name\": \"query\", \"type\": \"string\", \"required\": true, \"description\": \"Search term\"},\n    {\"name\": \"category\", \"type\": \"string\", \"required\": false, \"description\": \"Product category\"},\n    {\"name\": \"price_range\", \"type\": \"string\", \"required\": false, \"description\": \"Price range filter\"},\n    {\"name\": \"sort_by\", \"type\": \"string\", \"required\": false, \"description\": \"Sorting criteria\"}\n  ],\n  \"output_parameters\": [\n    {\"name\": \"products\", \"type\": \"array\", \"description\": \"List of products\"},\n    {\"name\": \"total_results\", \"type\": \"integer\", \"description\": \"Total number of results\"}\n  ],\n  \"endpoint\": \"https://api.example.com/products/search\",\n  \"tags\": [\"e-commerce\", \"search\", \"products\"]\n}\n</code></pre>"},{"location":"reference/#policy-adherence-token-pat","title":"Policy Adherence Token (PAT)","text":"<pre><code>{\n  \"pat\": {\n    \"uid\": \"pat-12345\",\n    \"issued_to\": \"ai-agent-1\",\n    \"issued_by\": \"example.com\",\n    \"policy_reference\": \"http://example.com/policy/12345\",\n    \"permissions\": [\"execute:intent/SearchProducts\"],\n    \"obligations\": [\"pay:0.01 USD per intent\"],\n    \"billing_info\": {\n      \"payment_method\": \"credit_card\",\n      \"billing_address\": \"123 AI Street, Tech City\",\n      \"currency\": \"USD\"\n    },\n    \"valid_from\": \"2024-01-01T00:00:00Z\",\n    \"valid_to\": \"2024-12-31T23:59:59Z\"\n  },\n  \"signature\": \"Base64-encoded-digital-signature\"\n}\n</code></pre>"},{"location":"reference/#service-description","title":"Service Description","text":"<pre><code>{\n  \"service\": {\n    \"name\": \"Example Service\",\n    \"description\": \"Service description\",\n    \"version\": \"1.0.0\",\n    \"urls\": {\n      \"service\": \"https://api.example.com\",\n      \"terms\": \"https://example.com/terms\",\n      \"privacy\": \"https://example.com/privacy\",\n      \"documentation\": \"https://example.com/docs\"\n    }\n  },\n  \"intents\": [\n    {\n      \"uid\": \"example.com:intent-name:v1\",\n      \"name\": \"IntentName\",\n      \"description\": \"Intent description\",\n      \"endpoint\": {\n        \"url\": \"https://api.example.com/endpoint\",\n        \"method\": \"POST\"\n      }\n    }\n  ],\n  \"security\": {\n    \"public_key\": \"base64-encoded-public-key\",\n    \"policy_url\": \"https://example.com/policy.json\",\n    \"supported_auth_methods\": [\n      \"jwt\",\n      \"oauth2\"\n    ]\n  },\n  \"compliance\": {\n    \"standards\": [\n      \"ISO27001\",\n      \"GDPR\"\n    ],\n    \"certifications\": [\n      \"SOC2\"\n    ]\n  }\n}\n</code></pre>"},{"location":"reference/#api-reference","title":"API Reference","text":"<p>For detailed API reference documentation, please see the API Guidelines section of the specification.</p>"},{"location":"reference/#tools-and-libraries","title":"Tools and Libraries","text":"<p>We're developing tools and libraries to help you implement the UIM Protocol:</p> <ul> <li>UIM Validator: A tool for validating UIM Protocol implementations</li> <li>UIM Client Library: A client library for implementing UIM Protocol in AI agents</li> <li>UIM Server Library: A server library for implementing UIM Protocol in web services</li> </ul> <p>These tools and libraries are currently in development and will be available soon.</p>"},{"location":"reference/api-reference/","title":"API Reference","text":"<p>This section provides a comprehensive reference for the UIM Protocol APIs, including detailed specifications for all endpoints, request and response formats, and error codes.</p>"},{"location":"reference/api-reference/#discovery-api","title":"Discovery API","text":"<p>The Discovery API allows AI agents to discover available intents and services.</p>"},{"location":"reference/api-reference/#intent-search","title":"Intent Search","text":"<p>Searches for available intents based on given criteria.</p> <p>Endpoint: <code>/api/intents/search</code> Method: GET Content-Type: application/json</p>"},{"location":"reference/api-reference/#request-parameters","title":"Request Parameters","text":"Parameter Type Required Description query string No The natural language query or search term service_name string No The name of a service intent_name string No The name of an intent uid string No The unique identifier of an intent namespace string No The namespace of a service description string No The description of an intent tags string No A comma-separated list of tags page integer No The page number for pagination (default: 1) page_size integer No The number of results per page (default: 10)"},{"location":"reference/api-reference/#response","title":"Response","text":"<p>Status Code: 200 OK</p> <pre><code>{\n  \"intents\": [\n    {\n      \"service_name\": \"E-commerce Platform\",\n      \"intent_name\": \"SearchProducts\",\n      \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n      \"description\": \"Search for products based on given criteria\",\n      \"input_parameters\": [\n        {\"name\": \"query\", \"type\": \"string\", \"required\": true},\n        {\"name\": \"category\", \"type\": \"string\", \"required\": false},\n        {\"name\": \"price_range\", \"type\": \"string\", \"required\": false},\n        {\"name\": \"sort_by\", \"type\": \"string\", \"required\": false}\n      ],\n      \"output_parameters\": [\n        {\"name\": \"products\", \"type\": \"array\", \"required\": true},\n        {\"name\": \"total_results\", \"type\": \"integer\", \"required\": true}\n      ],\n      \"endpoint\": \"https://api.ecommerce.com/products/search\",\n      \"tags\": [\"e-commerce\", \"search\", \"products\"]\n    }\n  ],\n  \"pagination\": {\n    \"total_results\": 1,\n    \"total_pages\": 1,\n    \"current_page\": 1,\n    \"page_size\": 10\n  }\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses","title":"Error Responses","text":"Status Code Error Code Description 400 INVALID_PARAMETER One or more parameters are invalid 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#intent-details","title":"Intent Details","text":"<p>Retrieves detailed information about a specific intent.</p> <p>Endpoint: <code>/api/intents/{intent_uid}</code> Method: GET Content-Type: application/json</p>"},{"location":"reference/api-reference/#request-parameters_1","title":"Request Parameters","text":"Parameter Type Required Description intent_uid string Yes The unique identifier of the intent"},{"location":"reference/api-reference/#response_1","title":"Response","text":"<p>Status Code: 200 OK</p> <pre><code>{\n  \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n  \"service_name\": \"E-commerce Platform\",\n  \"intent_name\": \"SearchProducts\",\n  \"description\": \"Search for products based on given criteria\",\n  \"input_parameters\": [\n    {\"name\": \"query\", \"type\": \"string\", \"required\": true},\n    {\"name\": \"category\", \"type\": \"string\", \"required\": false},\n    {\"name\": \"price_range\", \"type\": \"string\", \"required\": false},\n    {\"name\": \"sort_by\", \"type\": \"string\", \"required\": false}\n  ],\n  \"output_parameters\": [\n    {\"name\": \"products\", \"type\": \"array\", \"required\": true},\n    {\"name\": \"total_results\", \"type\": \"integer\", \"required\": true}\n  ],\n  \"endpoint\": \"https://api.ecommerce.com/products/search\",\n  \"tags\": [\"e-commerce\", \"search\", \"products\"]\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_1","title":"Error Responses","text":"Status Code Error Code Description 400 INVALID_PARAMETER The intent_uid parameter is invalid 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 404 NOT_FOUND The intent was not found 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#execution-api","title":"Execution API","text":"<p>The Execution API allows AI agents to execute intents.</p>"},{"location":"reference/api-reference/#execute-intent","title":"Execute Intent","text":"<p>Executes an intent based on the provided input parameters.</p> <p>Endpoint: <code>/api/intents/execute</code> Method: POST Content-Type: application/json Authorization: Bearer \\&lt;PAT&gt;</p>"},{"location":"reference/api-reference/#request-body","title":"Request Body","text":"<pre><code>{\n  \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n  \"parameters\": {\n    \"query\": \"laptops\",\n    \"category\": \"electronics\",\n    \"price_range\": \"1000-2000\",\n    \"sort_by\": \"popularity\"\n  }\n}\n</code></pre> Parameter Type Required Description intent_uid string Yes The unique identifier of the intent parameters object Yes The parameters required to execute the intent"},{"location":"reference/api-reference/#response_2","title":"Response","text":"<p>Status Code: 200 OK</p> <p>The response format depends on the intent being executed. For example, for the <code>searchProducts</code> intent:</p> <pre><code>{\n  \"total_results\": 2,\n  \"products\": [\n    {\n      \"product_id\": \"123\",\n      \"name\": \"Gaming Laptop\",\n      \"price\": 1500,\n      \"category\": \"electronics\"\n    },\n    {\n      \"product_id\": \"456\",\n      \"name\": \"Business Laptop\",\n      \"price\": 1200,\n      \"category\": \"electronics\"\n    }\n  ]\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_2","title":"Error Responses","text":"Status Code Error Code Description 400 INVALID_PARAMETER One or more parameters are invalid 401 UNAUTHORIZED Authentication is required or the PAT is invalid 403 FORBIDDEN The PAT does not grant permission to execute this intent 404 NOT_FOUND The intent was not found 429 TOO_MANY_REQUESTS The rate limit has been exceeded 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server 503 SERVICE_UNAVAILABLE The service is temporarily unavailable"},{"location":"reference/api-reference/#policy-api","title":"Policy API","text":"<p>The Policy API allows AI agents to retrieve policies and request Policy Adherence Tokens (PATs).</p>"},{"location":"reference/api-reference/#get-policy","title":"Get Policy","text":"<p>Retrieves the policy for the service.</p> <p>Endpoint: <code>/api/policy</code> Method: GET Content-Type: application/json</p>"},{"location":"reference/api-reference/#response_3","title":"Response","text":"<p>Status Code: 200 OK</p> <pre><code>{\n  \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n  \"uid\": \"http://example.com/policy/12345\",\n  \"type\": \"Set\",\n  \"profile\": \"http://example.com/profile/odrl-uim\",\n  \"permission\": [\n    {\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": \"execute\",\n      \"constraint\": [\n        {\n          \"leftOperand\": \"http://example.com/vocab/rateLimit\",\n          \"operator\": \"lte\",\n          \"rightOperand\": 1000,\n          \"unit\": \"http://example.com/vocab/hour\"\n        }\n      ],\n      \"duty\": [\n        {\n          \"action\": \"pay\",\n          \"target\": \"http://example.com/vocab/intentPrice\",\n          \"amount\": 0.01,\n          \"unit\": \"http://example.com/vocab/USD\"\n        }\n      ]\n    }\n  ],\n  \"prohibition\": [\n    {\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": \"exceedRateLimit\"\n    }\n  ],\n  \"obligation\": [\n    {\n      \"action\": \"signPayload\",\n      \"assignee\": \"http://example.com/ai-agent/1\",\n      \"target\": \"http://example.com/vocab/payload\",\n      \"constraint\": [\n        {\n          \"leftOperand\": \"http://example.com/vocab/publicKey\",\n          \"operator\": \"use\",\n          \"rightOperand\": \"MIIBIjANBgkqh...\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_3","title":"Error Responses","text":"Status Code Error Code Description 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#request-pat","title":"Request PAT","text":"<p>Requests a Policy Adherence Token (PAT) for the service.</p> <p>Endpoint: <code>/api/pat/issue</code> Method: POST Content-Type: application/json</p>"},{"location":"reference/api-reference/#request-body_1","title":"Request Body","text":"<pre><code>{\n  \"agent_id\": \"ai-agent-123\",\n  \"signed_policy\": \"base64-encoded-signature\",\n  \"agent_public_key\": \"base64-encoded-public-key\"\n}\n</code></pre> Parameter Type Required Description agent_id string Yes The identifier for the AI agent signed_policy string Yes The policy signed by the AI agent agent_public_key string Yes The public key of the AI agent"},{"location":"reference/api-reference/#response_4","title":"Response","text":"<p>Status Code: 200 OK</p> <pre><code>{\n  \"uim-pat\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expires_at\": \"2023-12-31T23:59:59Z\"\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_4","title":"Error Responses","text":"Status Code Error Code Description 400 INVALID_PARAMETER One or more parameters are invalid 400 INVALID_SIGNATURE The signature is invalid 403 POLICY_REJECTED The policy was rejected 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#service-management-api","title":"Service Management API","text":"<p>The Service Management API allows web services to register and manage their intents.</p>"},{"location":"reference/api-reference/#register-service","title":"Register Service","text":"<p>Registers a new service with the central repository.</p> <p>Endpoint: <code>/api/services</code> Method: POST Content-Type: application/json Authorization: Bearer \\&lt;Admin Token&gt;</p>"},{"location":"reference/api-reference/#request-body_2","title":"Request Body","text":"<pre><code>{\n  \"service_name\": \"E-commerce Platform\",\n  \"service_url\": \"https://api.ecommerce.com\",\n  \"description\": \"Provides e-commerce functionalities\",\n  \"policy_url\": \"https://api.ecommerce.com/policy\",\n  \"service_logo_url\": \"https://api.ecommerce.com/logo.png\",\n  \"service_terms_of_service_url\": \"https://api.ecommerce.com/terms\",\n  \"service_privacy_policy_url\": \"https://api.ecommerce.com/privacy\"\n}\n</code></pre> Parameter Type Required Description service_name string Yes The name of the service service_url string Yes The URL of the service description string Yes A brief description of the service policy_url string No The policies URL of the service service_logo_url string No The URL of the service's logo service_terms_of_service_url string No The URL of the service's terms of service service_privacy_policy_url string No The URL of the service's privacy policy"},{"location":"reference/api-reference/#response_5","title":"Response","text":"<p>Status Code: 201 Created</p> <pre><code>{\n  \"service_id\": \"12345\",\n  \"service_name\": \"E-commerce Platform\",\n  \"service_url\": \"https://api.ecommerce.com\",\n  \"description\": \"Provides e-commerce functionalities\"\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_5","title":"Error Responses","text":"Status Code Error Code Description 400 INVALID_PARAMETER One or more parameters are invalid 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 409 CONFLICT A service with the same name already exists 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#update-service","title":"Update Service","text":"<p>Updates the details of an existing service.</p> <p>Endpoint: <code>/api/services/{service_id}</code> Method: PUT Content-Type: application/json Authorization: Bearer \\&lt;Admin Token&gt;</p>"},{"location":"reference/api-reference/#request-parameters_2","title":"Request Parameters","text":"Parameter Type Required Description service_id string Yes The identifier of the service"},{"location":"reference/api-reference/#request-body_3","title":"Request Body","text":"<p>Same as Register Service.</p>"},{"location":"reference/api-reference/#response_6","title":"Response","text":"<p>Status Code: 200 OK</p> <pre><code>{\n  \"service_id\": \"12345\",\n  \"service_name\": \"E-commerce Platform\",\n  \"service_url\": \"https://api.ecommerce.com\",\n  \"description\": \"Provides e-commerce functionalities\"\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_6","title":"Error Responses","text":"Status Code Error Code Description 400 INVALID_PARAMETER One or more parameters are invalid 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 404 NOT_FOUND The service was not found 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#delete-service","title":"Delete Service","text":"<p>Deletes a registered service.</p> <p>Endpoint: <code>/api/services/{service_id}</code> Method: DELETE Authorization: Bearer \\&lt;Admin Token&gt;</p>"},{"location":"reference/api-reference/#request-parameters_3","title":"Request Parameters","text":"Parameter Type Required Description service_id string Yes The identifier of the service"},{"location":"reference/api-reference/#response_7","title":"Response","text":"<p>Status Code: 204 No Content</p>"},{"location":"reference/api-reference/#error-responses_7","title":"Error Responses","text":"Status Code Error Code Description 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 404 NOT_FOUND The service was not found 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#retrieve-service","title":"Retrieve Service","text":"<p>Retrieves the details of a registered service.</p> <p>Endpoint: <code>/api/services/{service_id}</code> Method: GET Content-Type: application/json</p>"},{"location":"reference/api-reference/#request-parameters_4","title":"Request Parameters","text":"Parameter Type Required Description service_id string Yes The identifier of the service"},{"location":"reference/api-reference/#response_8","title":"Response","text":"<p>Status Code: 200 OK</p> <pre><code>{\n  \"service_id\": \"12345\",\n  \"service_name\": \"E-commerce Platform\",\n  \"service_url\": \"https://api.ecommerce.com\",\n  \"description\": \"Provides e-commerce functionalities\",\n  \"policy_url\": \"https://api.ecommerce.com/policy\",\n  \"service_logo_url\": \"https://api.ecommerce.com/logo.png\",\n  \"service_terms_of_service_url\": \"https://api.ecommerce.com/terms\",\n  \"service_privacy_policy_url\": \"https://api.ecommerce.com/privacy\"\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_8","title":"Error Responses","text":"Status Code Error Code Description 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 404 NOT_FOUND The service was not found 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#intent-management-api","title":"Intent Management API","text":"<p>The Intent Management API allows web services to manage their intents.</p>"},{"location":"reference/api-reference/#list-all-intents-for-a-service","title":"List All Intents for a Service","text":"<p>Lists all intents for a specific service.</p> <p>Endpoint: <code>/api/services/{service_id}/intents</code> Method: GET Content-Type: application/json</p>"},{"location":"reference/api-reference/#request-parameters_5","title":"Request Parameters","text":"Parameter Type Required Description service_id string Yes The identifier of the service page integer No The page number for pagination (default: 1) page_size integer No The number of results per page (default: 10)"},{"location":"reference/api-reference/#response_9","title":"Response","text":"<p>Status Code: 200 OK</p> <pre><code>{\n  \"intents\": [\n    {\n      \"intent_id\": \"67890\",\n      \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n      \"intent_name\": \"SearchProducts\",\n      \"description\": \"Search for products based on given criteria\",\n      \"tags\": [\"e-commerce\", \"search\", \"products\"]\n    }\n  ],\n  \"pagination\": {\n    \"total_results\": 1,\n    \"total_pages\": 1,\n    \"current_page\": 1,\n    \"page_size\": 10\n  }\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_9","title":"Error Responses","text":"Status Code Error Code Description 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 404 NOT_FOUND The service was not found 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#create-intent","title":"Create Intent","text":"<p>Creates a new intent for a specific service.</p> <p>Endpoint: <code>/api/services/{service_id}/intents</code> Method: POST Content-Type: application/json Authorization: Bearer \\&lt;Admin Token&gt;</p>"},{"location":"reference/api-reference/#request-parameters_6","title":"Request Parameters","text":"Parameter Type Required Description service_id string Yes The identifier of the service"},{"location":"reference/api-reference/#request-body_4","title":"Request Body","text":"<pre><code>{\n  \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n  \"intent_name\": \"SearchProducts\",\n  \"description\": \"Search for products based on given criteria\",\n  \"input_parameters\": [\n    {\"name\": \"query\", \"type\": \"string\", \"required\": true},\n    {\"name\": \"category\", \"type\": \"string\", \"required\": false},\n    {\"name\": \"price_range\", \"type\": \"string\", \"required\": false},\n    {\"name\": \"sort_by\", \"type\": \"string\", \"required\": false}\n  ],\n  \"output_parameters\": [\n    {\"name\": \"products\", \"type\": \"array\", \"required\": true},\n    {\"name\": \"total_results\", \"type\": \"integer\", \"required\": true}\n  ],\n  \"endpoint\": \"https://api.ecommerce.com/products/search\",\n  \"tags\": [\"e-commerce\", \"search\", \"products\"]\n}\n</code></pre> Parameter Type Required Description intent_uid string Yes The unique identifier for the intent intent_name string Yes The name of the intent description string Yes A brief description of what the intent does input_parameters array Yes An array of input parameters required by the intent output_parameters array Yes An array of output parameters returned by the intent endpoint string Yes The URL endpoint for the intent tags array No An array of tags associated with the intent"},{"location":"reference/api-reference/#response_10","title":"Response","text":"<p>Status Code: 201 Created</p> <pre><code>{\n  \"intent_id\": \"67890\",\n  \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n  \"intent_name\": \"SearchProducts\",\n  \"description\": \"Search for products based on given criteria\"\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_10","title":"Error Responses","text":"Status Code Error Code Description 400 INVALID_PARAMETER One or more parameters are invalid 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 404 NOT_FOUND The service was not found 409 CONFLICT An intent with the same UID already exists 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#update-intent","title":"Update Intent","text":"<p>Updates the details of an existing intent.</p> <p>Endpoint: <code>/api/intents/{intent_id}</code> Method: PUT Content-Type: application/json Authorization: Bearer \\&lt;Admin Token&gt;</p>"},{"location":"reference/api-reference/#request-parameters_7","title":"Request Parameters","text":"Parameter Type Required Description intent_id string Yes The identifier of the intent"},{"location":"reference/api-reference/#request-body_5","title":"Request Body","text":"<p>Same as Create Intent.</p>"},{"location":"reference/api-reference/#response_11","title":"Response","text":"<p>Status Code: 200 OK</p> <pre><code>{\n  \"intent_id\": \"67890\",\n  \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n  \"intent_name\": \"SearchProducts\",\n  \"description\": \"Search for products based on given criteria\"\n}\n</code></pre>"},{"location":"reference/api-reference/#error-responses_11","title":"Error Responses","text":"Status Code Error Code Description 400 INVALID_PARAMETER One or more parameters are invalid 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 404 NOT_FOUND The intent was not found 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#delete-intent","title":"Delete Intent","text":"<p>Deletes an existing intent.</p> <p>Endpoint: <code>/api/intents/{intent_id}</code> Method: DELETE Authorization: Bearer \\&lt;Admin Token&gt;</p>"},{"location":"reference/api-reference/#request-parameters_8","title":"Request Parameters","text":"Parameter Type Required Description intent_id string Yes The identifier of the intent"},{"location":"reference/api-reference/#response_12","title":"Response","text":"<p>Status Code: 204 No Content</p>"},{"location":"reference/api-reference/#error-responses_12","title":"Error Responses","text":"Status Code Error Code Description 401 UNAUTHORIZED Authentication is required 403 FORBIDDEN Access to this resource is forbidden 404 NOT_FOUND The intent was not found 500 INTERNAL_SERVER_ERROR An unexpected error occurred on the server"},{"location":"reference/api-reference/#error-codes","title":"Error Codes","text":"<p>The UIM Protocol defines the following error codes:</p>"},{"location":"reference/api-reference/#client-side-errors-4xx","title":"Client-Side Errors (4xx)","text":"Error Code Description Example Scenario INVALID_PARAMETER The request is missing a required parameter or contains an invalid parameter A required field such as query in a search intent is not provided UNAUTHORIZED The request is not authenticated or the authentication token is invalid or expired The AI agent attempts to access a service without providing a valid OAuth2.0 token FORBIDDEN The client is authenticated but does not have the necessary permissions to access the resource An AI agent tries to execute an intent that it does not have permission to use NOT_FOUND The specified resource or endpoint could not be found on the server The AI agent requests an intent or service that does not exist METHOD_NOT_ALLOWED The client attempted to use an HTTP method that is not supported by the endpoint Sending a POST request to an endpoint that only supports GET CONFLICT The request could not be processed because of a conflict in the current state of the resource Attempting to register an intent that already exists under a different version UNSUPPORTED_MEDIA_TYPE The server does not support the media type of the request payload The client sends a request with an unsupported content type, such as text/xml instead of application/json"},{"location":"reference/api-reference/#server-side-errors-5xx","title":"Server-Side Errors (5xx)","text":"Error Code Description Example Scenario INTERNAL_SERVER_ERROR A generic error message when the server encounters an unexpected condition The server encounters a null pointer exception or other unhandled error SERVICE_UNAVAILABLE The server is currently unable to handle the request due to maintenance or overload The server is down for maintenance, or a service dependency is unavailable GATEWAY_TIMEOUT The server, while acting as a gateway, did not receive a response from an upstream server in time A request to an external API exceeds the timeout limit NOT_IMPLEMENTED The server does not support the functionality required to fulfill the request The AI agent attempts to use an intent that is not yet supported by the service"},{"location":"reference/api-reference/#protocol-level-errors","title":"Protocol-Level Errors","text":"Error Code Description Example Scenario INTENT_EXECUTION_FAILED The execution of an intent fails due to invalid input, missing parameters, or other issues An AI agent tries to execute GetProductDetails but fails because the required product_id is missing INTENT_NOT_SUPPORTED The requested intent is not recognized or supported by the target service An AI agent requests an intent that has been deprecated or is not implemented by the service VERSION_CONFLICT There is a conflict between the requested version of the intent and the version supported by the service An AI agent attempts to execute version v1 of an intent when only v2 is supported INTENT_DEPRECATED The intent has been deprecated and is no longer available for use The AI agent calls a deprecated intent that has been removed in the latest version of the protocol"},{"location":"reference/error-codes/","title":"Error Codes","text":"<p>This page provides a comprehensive reference for error codes used in the UIM Protocol. These error codes are returned by web services when an error occurs during intent execution or other operations.</p>"},{"location":"reference/error-codes/#error-code-format","title":"Error Code Format","text":"<p>UIM Protocol error codes follow a standardized format:</p> <pre><code>UIM-[CATEGORY]-[CODE]\n</code></pre> <p>Where: - <code>UIM</code> is the prefix for all UIM Protocol error codes - <code>CATEGORY</code> is a three-letter code indicating the error category - <code>CODE</code> is a three-digit number uniquely identifying the error within its category</p> <p>For example, <code>UIM-AUT-001</code> indicates an authentication error with code 001.</p>"},{"location":"reference/error-codes/#error-response-format","title":"Error Response Format","text":"<p>When an error occurs, web services should return a response with the following structure:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"UIM-AUT-001\",\n    \"message\": \"Invalid authentication token\",\n    \"details\": {\n      \"reason\": \"The token has expired\",\n      \"expiry\": \"2025-01-01T00:00:00Z\"\n    },\n    \"help_url\": \"https://example.com/docs/errors/UIM-AUT-001\"\n  }\n}\n</code></pre> <p>Where: - <code>code</code> is the error code - <code>message</code> is a human-readable error message - <code>details</code> is an optional object containing additional information about the error - <code>help_url</code> is an optional URL pointing to documentation about the error</p>"},{"location":"reference/error-codes/#error-categories","title":"Error Categories","text":""},{"location":"reference/error-codes/#authentication-errors-aut","title":"Authentication Errors (AUT)","text":"<p>Authentication errors occur when there are issues with the authentication process.</p> Code Name Description HTTP Status UIM-AUT-001 INVALID_TOKEN The authentication token is invalid 401 UIM-AUT-002 EXPIRED_TOKEN The authentication token has expired 401 UIM-AUT-003 MISSING_TOKEN The authentication token is missing 401 UIM-AUT-004 INVALID_SIGNATURE The signature is invalid 401 UIM-AUT-005 INVALID_CREDENTIALS The credentials are invalid 401 UIM-AUT-006 ACCOUNT_LOCKED The account is locked 401 UIM-AUT-007 ACCOUNT_DISABLED The account is disabled 401 UIM-AUT-008 INVALID_CLIENT The client is invalid 401 UIM-AUT-009 INVALID_GRANT The grant is invalid 401 UIM-AUT-010 UNSUPPORTED_GRANT_TYPE The grant type is not supported 400"},{"location":"reference/error-codes/#authorization-errors-auz","title":"Authorization Errors (AUZ)","text":"<p>Authorization errors occur when there are issues with the authorization process.</p> Code Name Description HTTP Status UIM-AUZ-001 INSUFFICIENT_PERMISSIONS The client does not have sufficient permissions 403 UIM-AUZ-002 SCOPE_EXCEEDED The requested scope exceeds the granted scope 403 UIM-AUZ-003 INTENT_NOT_ALLOWED The intent is not allowed for this client 403 UIM-AUZ-004 RATE_LIMIT_EXCEEDED The rate limit has been exceeded 429 UIM-AUZ-005 QUOTA_EXCEEDED The quota has been exceeded 429 UIM-AUZ-006 BILLING_REQUIRED Billing information is required 402 UIM-AUZ-007 PAYMENT_REQUIRED Payment is required 402 UIM-AUZ-008 SUBSCRIPTION_EXPIRED The subscription has expired 402 UIM-AUZ-009 GEOGRAPHIC_RESTRICTION The request is restricted in this geographic region 403 UIM-AUZ-010 TIME_RESTRICTION The request is restricted at this time 403"},{"location":"reference/error-codes/#validation-errors-val","title":"Validation Errors (VAL)","text":"<p>Validation errors occur when there are issues with the request parameters.</p> Code Name Description HTTP Status UIM-VAL-001 MISSING_PARAMETER A required parameter is missing 400 UIM-VAL-002 INVALID_PARAMETER A parameter is invalid 400 UIM-VAL-003 INVALID_FORMAT The request format is invalid 400 UIM-VAL-004 INVALID_CONTENT_TYPE The content type is invalid 415 UIM-VAL-005 INVALID_ACCEPT_TYPE The accept type is invalid 406 UIM-VAL-006 PARAMETER_TOO_LONG A parameter is too long 400 UIM-VAL-007 PARAMETER_TOO_SHORT A parameter is too short 400 UIM-VAL-008 PARAMETER_OUT_OF_RANGE A parameter is out of range 400 UIM-VAL-009 INVALID_ENUM_VALUE An enum value is invalid 400 UIM-VAL-010 INVALID_DATE_FORMAT A date format is invalid 400"},{"location":"reference/error-codes/#resource-errors-res","title":"Resource Errors (RES)","text":"<p>Resource errors occur when there are issues with the requested resources.</p> Code Name Description HTTP Status UIM-RES-001 RESOURCE_NOT_FOUND The requested resource was not found 404 UIM-RES-002 RESOURCE_ALREADY_EXISTS The resource already exists 409 UIM-RES-003 RESOURCE_GONE The resource is no longer available 410 UIM-RES-004 RESOURCE_LOCKED The resource is locked 423 UIM-RES-005 RESOURCE_TOO_LARGE The resource is too large 413 UIM-RES-006 RESOURCE_MODIFIED The resource has been modified 412 UIM-RES-007 RESOURCE_CONFLICT There is a conflict with the resource 409 UIM-RES-008 RESOURCE_TEMPORARILY_UNAVAILABLE The resource is temporarily unavailable 503 UIM-RES-009 RESOURCE_PERMANENTLY_UNAVAILABLE The resource is permanently unavailable 410 UIM-RES-010 RESOURCE_LIMIT_EXCEEDED The resource limit has been exceeded 429"},{"location":"reference/error-codes/#intent-errors-int","title":"Intent Errors (INT)","text":"<p>Intent errors occur when there are issues with intent execution.</p> Code Name Description HTTP Status UIM-INT-001 INTENT_NOT_FOUND The requested intent was not found 404 UIM-INT-002 INTENT_EXECUTION_FAILED The intent execution failed 500 UIM-INT-003 INTENT_TIMEOUT The intent execution timed out 504 UIM-INT-004 INTENT_CANCELLED The intent execution was cancelled 499 UIM-INT-005 INTENT_ALREADY_EXECUTED The intent has already been executed 409 UIM-INT-006 INTENT_DEPENDENCY_FAILED A dependency of the intent failed 424 UIM-INT-007 INTENT_PRECONDITION_FAILED A precondition for the intent failed 412 UIM-INT-008 INTENT_UNSUPPORTED The intent is not supported 501 UIM-INT-009 INTENT_DEPRECATED The intent is deprecated 410 UIM-INT-010 INTENT_VERSION_MISMATCH The intent version does not match 400"},{"location":"reference/error-codes/#policy-errors-pol","title":"Policy Errors (POL)","text":"<p>Policy errors occur when there are issues with policies.</p> Code Name Description HTTP Status UIM-POL-001 POLICY_NOT_FOUND The requested policy was not found 404 UIM-POL-002 POLICY_VIOLATION The request violates a policy 403 UIM-POL-003 POLICY_REJECTED The policy was rejected 403 UIM-POL-004 POLICY_EXPIRED The policy has expired 403 UIM-POL-005 POLICY_NOT_APPLICABLE The policy is not applicable 403 UIM-POL-006 POLICY_CONFLICT There is a conflict between policies 409 UIM-POL-007 POLICY_REQUIRES_AGREEMENT The policy requires explicit agreement 403 UIM-POL-008 POLICY_REQUIRES_PAYMENT The policy requires payment 402 UIM-POL-009 POLICY_REQUIRES_SUBSCRIPTION The policy requires a subscription 402 UIM-POL-010 POLICY_REQUIRES_VERIFICATION The policy requires verification 403"},{"location":"reference/error-codes/#server-errors-srv","title":"Server Errors (SRV)","text":"<p>Server errors occur when there are issues with the server.</p> Code Name Description HTTP Status UIM-SRV-001 INTERNAL_SERVER_ERROR An internal server error occurred 500 UIM-SRV-002 SERVICE_UNAVAILABLE The service is unavailable 503 UIM-SRV-003 GATEWAY_TIMEOUT The gateway timed out 504 UIM-SRV-004 BAD_GATEWAY The gateway is bad 502 UIM-SRV-005 SERVER_OVERLOADED The server is overloaded 503 UIM-SRV-006 SERVER_MAINTENANCE The server is undergoing maintenance 503 UIM-SRV-007 DATABASE_ERROR A database error occurred 500 UIM-SRV-008 CACHE_ERROR A cache error occurred 500 UIM-SRV-009 NETWORK_ERROR A network error occurred 500 UIM-SRV-010 DEPENDENCY_ERROR A dependency error occurred 500"},{"location":"reference/error-codes/#protocol-errors-pro","title":"Protocol Errors (PRO)","text":"<p>Protocol errors occur when there are issues with the protocol.</p> Code Name Description HTTP Status UIM-PRO-001 INVALID_REQUEST The request is invalid 400 UIM-PRO-002 METHOD_NOT_ALLOWED The HTTP method is not allowed 405 UIM-PRO-003 UNSUPPORTED_MEDIA_TYPE The media type is not supported 415 UIM-PRO-004 NOT_ACCEPTABLE The requested representation is not acceptable 406 UIM-PRO-005 TOO_MANY_REQUESTS Too many requests have been made 429 UIM-PRO-006 REQUEST_TIMEOUT The request timed out 408 UIM-PRO-007 REQUEST_ENTITY_TOO_LARGE The request entity is too large 413 UIM-PRO-008 REQUEST_URI_TOO_LONG The request URI is too long 414 UIM-PRO-009 PRECONDITION_FAILED A precondition failed 412 UIM-PRO-010 PROTOCOL_VERSION_NOT_SUPPORTED The protocol version is not supported 505"},{"location":"reference/error-codes/#error-handling-best-practices","title":"Error Handling Best Practices","text":"<p>When handling errors in the UIM Protocol, follow these best practices:</p> <ol> <li>Use Appropriate Error Codes: Use the most specific error code that applies to the situation.</li> <li>Provide Clear Error Messages: Error messages should be clear, concise, and helpful.</li> <li>Include Relevant Details: Include relevant details in the <code>details</code> field to help diagnose the issue.</li> <li>Use Appropriate HTTP Status Codes: Use the HTTP status code that best matches the error.</li> <li>Provide Help URLs: Include a <code>help_url</code> field pointing to documentation about the error.</li> <li>Log Errors: Log errors on the server side for debugging and monitoring.</li> <li>Handle Errors Gracefully: Clients should handle errors gracefully and provide appropriate feedback to users.</li> <li>Retry with Backoff: For transient errors, clients should retry with exponential backoff.</li> <li>Validate Inputs: Validate inputs before processing to catch errors early.</li> <li>Secure Error Messages: Ensure error messages don't leak sensitive information.</li> </ol>"},{"location":"reference/error-codes/#error-handling-example","title":"Error Handling Example","text":""},{"location":"reference/error-codes/#server-side-error-handling","title":"Server-Side Error Handling","text":"<pre><code>function executeIntent(req, res) {\n  try {\n    // Validate request\n    if (!req.body.intent_uid) {\n      return res.status(400).json({\n        error: {\n          code: \"UIM-VAL-001\",\n          message: \"Missing required parameter: intent_uid\",\n          details: {\n            parameter: \"intent_uid\"\n          },\n          help_url: \"https://example.com/docs/errors/UIM-VAL-001\"\n        }\n      });\n    }\n\n    // Check authentication\n    if (!req.headers.authorization) {\n      return res.status(401).json({\n        error: {\n          code: \"UIM-AUT-003\",\n          message: \"Missing authentication token\",\n          help_url: \"https://example.com/docs/errors/UIM-AUT-003\"\n        }\n      });\n    }\n\n    // Execute intent\n    const result = executeIntentLogic(req.body.intent_uid, req.body.parameters);\n\n    // Return result\n    return res.status(200).json(result);\n  } catch (error) {\n    // Handle unexpected errors\n    console.error(\"Intent execution error:\", error);\n    return res.status(500).json({\n      error: {\n        code: \"UIM-INT-002\",\n        message: \"Intent execution failed\",\n        details: {\n          reason: error.message\n        },\n        help_url: \"https://example.com/docs/errors/UIM-INT-002\"\n      }\n    });\n  }\n}\n</code></pre>"},{"location":"reference/error-codes/#client-side-error-handling","title":"Client-Side Error Handling","text":"<pre><code>async function executeIntent(intentUid, parameters) {\n  try {\n    const response = await fetch(\"https://api.example.com/uim/execute\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${pat}`\n      },\n      body: JSON.stringify({\n        intent_uid: intentUid,\n        parameters: parameters\n      })\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      // Handle error\n      if (data.error) {\n        switch (data.error.code) {\n          case \"UIM-AUT-001\":\n          case \"UIM-AUT-002\":\n            // Handle authentication errors\n            refreshToken();\n            break;\n          case \"UIM-AUZ-004\":\n            // Handle rate limiting\n            await sleep(1000);\n            return executeIntent(intentUid, parameters);\n          case \"UIM-INT-003\":\n            // Handle timeout\n            return executeIntent(intentUid, parameters);\n          default:\n            // Handle other errors\n            throw new Error(`${data.error.code}: ${data.error.message}`);\n        }\n      } else {\n        throw new Error(`HTTP error: ${response.status}`);\n      }\n    }\n\n    return data;\n  } catch (error) {\n    console.error(\"Error executing intent:\", error);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"reference/error-codes/#references","title":"References","text":"<ul> <li>HTTP Status Codes</li> <li>JSON API Errors</li> <li>OAuth 2.0 Error Codes</li> <li>UIM Protocol API Guidelines</li> </ul>"},{"location":"reference/json-schemas/","title":"JSON Schemas","text":"<p>This page provides JSON Schema definitions for all data structures used in the UIM Protocol. These schemas can be used to validate requests and responses, generate client libraries, and document APIs.</p>"},{"location":"reference/json-schemas/#introduction-to-json-schema","title":"Introduction to JSON Schema","text":"<p>JSON Schema is a vocabulary that allows you to annotate and validate JSON documents. The UIM Protocol uses JSON Schema to define the structure of its data models, ensuring consistency and interoperability between implementations.</p>"},{"location":"reference/json-schemas/#core-schemas","title":"Core Schemas","text":""},{"location":"reference/json-schemas/#intent-schema","title":"Intent Schema","text":"<p>The Intent Schema defines the structure of an intent, including its metadata, parameters, and endpoint.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Intent\",\n  \"description\": \"A UIM Protocol intent\",\n  \"type\": \"object\",\n  \"required\": [\n    \"intent_uid\",\n    \"intent_name\",\n    \"description\",\n    \"input_parameters\",\n    \"output_parameters\",\n    \"endpoint\"\n  ],\n  \"properties\": {\n    \"intent_uid\": {\n      \"type\": \"string\",\n      \"description\": \"The unique identifier for the intent\",\n      \"pattern\": \"^[a-zA-Z0-9.-]+:[a-z0-9-]+:v[0-9]+(\\\\.[0-9]+)*$\"\n    },\n    \"intent_name\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the intent\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"A description of the intent\"\n    },\n    \"input_parameters\": {\n      \"type\": \"array\",\n      \"description\": \"The input parameters for the intent\",\n      \"items\": {\n        \"$ref\": \"#/definitions/parameter\"\n      }\n    },\n    \"output_parameters\": {\n      \"type\": \"array\",\n      \"description\": \"The output parameters for the intent\",\n      \"items\": {\n        \"$ref\": \"#/definitions/parameter\"\n      }\n    },\n    \"endpoint\": {\n      \"type\": \"object\",\n      \"description\": \"The endpoint for the intent\",\n      \"required\": [\n        \"url\",\n        \"method\",\n        \"content_type\"\n      ],\n      \"properties\": {\n        \"url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL for the intent\",\n          \"format\": \"uri\"\n        },\n        \"method\": {\n          \"type\": \"string\",\n          \"description\": \"The HTTP method for the intent\",\n          \"enum\": [\n            \"GET\",\n            \"POST\",\n            \"PUT\",\n            \"DELETE\",\n            \"PATCH\"\n          ]\n        },\n        \"content_type\": {\n          \"type\": \"string\",\n          \"description\": \"The content type for the intent\",\n          \"default\": \"application/json\"\n        }\n      }\n    },\n    \"tags\": {\n      \"type\": \"array\",\n      \"description\": \"Tags for the intent\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"description\": \"The category for the intent\"\n    },\n    \"version\": {\n      \"type\": \"string\",\n      \"description\": \"The version of the intent\",\n      \"pattern\": \"^v[0-9]+(\\\\.[0-9]+)*$\"\n    }\n  },\n  \"definitions\": {\n    \"parameter\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"name\",\n        \"type\"\n      ],\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the parameter\"\n        },\n        \"type\": {\n          \"type\": \"string\",\n          \"description\": \"The type of the parameter\",\n          \"enum\": [\n            \"string\",\n            \"number\",\n            \"integer\",\n            \"boolean\",\n            \"array\",\n            \"object\",\n            \"null\",\n            \"any\"\n          ]\n        },\n        \"required\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether the parameter is required\",\n          \"default\": false\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the parameter\"\n        },\n        \"default\": {\n          \"description\": \"The default value for the parameter\"\n        },\n        \"enum\": {\n          \"type\": \"array\",\n          \"description\": \"The allowed values for the parameter\"\n        },\n        \"minimum\": {\n          \"type\": \"number\",\n          \"description\": \"The minimum value for the parameter\"\n        },\n        \"maximum\": {\n          \"type\": \"number\",\n          \"description\": \"The maximum value for the parameter\"\n        },\n        \"minLength\": {\n          \"type\": \"integer\",\n          \"description\": \"The minimum length for the parameter\",\n          \"minimum\": 0\n        },\n        \"maxLength\": {\n          \"type\": \"integer\",\n          \"description\": \"The maximum length for the parameter\",\n          \"minimum\": 0\n        },\n        \"pattern\": {\n          \"type\": \"string\",\n          \"description\": \"The pattern for the parameter\",\n          \"format\": \"regex\"\n        },\n        \"format\": {\n          \"type\": \"string\",\n          \"description\": \"The format for the parameter\",\n          \"enum\": [\n            \"date\",\n            \"date-time\",\n            \"email\",\n            \"hostname\",\n            \"ipv4\",\n            \"ipv6\",\n            \"uri\",\n            \"uri-reference\",\n            \"uuid\"\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#policy-schema","title":"Policy Schema","text":"<p>The Policy Schema defines the structure of a policy, including permissions, prohibitions, and obligations.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Policy\",\n  \"description\": \"A UIM Protocol policy\",\n  \"type\": \"object\",\n  \"required\": [\n    \"@context\",\n    \"uid\",\n    \"type\"\n  ],\n  \"properties\": {\n    \"@context\": {\n      \"type\": \"string\",\n      \"description\": \"The JSON-LD context for the policy\",\n      \"enum\": [\n        \"http://www.w3.org/ns/odrl.jsonld\"\n      ]\n    },\n    \"uid\": {\n      \"type\": \"string\",\n      \"description\": \"The unique identifier for the policy\",\n      \"format\": \"uri\"\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"description\": \"The type of the policy\",\n      \"enum\": [\n        \"Set\",\n        \"Offer\",\n        \"Agreement\"\n      ]\n    },\n    \"profile\": {\n      \"type\": \"string\",\n      \"description\": \"The profile for the policy\",\n      \"format\": \"uri\"\n    },\n    \"permission\": {\n      \"type\": \"array\",\n      \"description\": \"The permissions for the policy\",\n      \"items\": {\n        \"$ref\": \"#/definitions/permission\"\n      }\n    },\n    \"prohibition\": {\n      \"type\": \"array\",\n      \"description\": \"The prohibitions for the policy\",\n      \"items\": {\n        \"$ref\": \"#/definitions/prohibition\"\n      }\n    },\n    \"obligation\": {\n      \"type\": \"array\",\n      \"description\": \"The obligations for the policy\",\n      \"items\": {\n        \"$ref\": \"#/definitions/obligation\"\n      }\n    }\n  },\n  \"definitions\": {\n    \"permission\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"target\",\n        \"action\"\n      ],\n      \"properties\": {\n        \"target\": {\n          \"type\": \"string\",\n          \"description\": \"The target of the permission\",\n          \"format\": \"uri\"\n        },\n        \"action\": {\n          \"type\": \"string\",\n          \"description\": \"The action of the permission\"\n        },\n        \"constraint\": {\n          \"type\": \"array\",\n          \"description\": \"The constraints for the permission\",\n          \"items\": {\n            \"$ref\": \"#/definitions/constraint\"\n          }\n        },\n        \"duty\": {\n          \"type\": \"array\",\n          \"description\": \"The duties for the permission\",\n          \"items\": {\n            \"$ref\": \"#/definitions/duty\"\n          }\n        }\n      }\n    },\n    \"prohibition\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"target\",\n        \"action\"\n      ],\n      \"properties\": {\n        \"target\": {\n          \"type\": \"string\",\n          \"description\": \"The target of the prohibition\",\n          \"format\": \"uri\"\n        },\n        \"action\": {\n          \"type\": \"string\",\n          \"description\": \"The action of the prohibition\"\n        },\n        \"constraint\": {\n          \"type\": \"array\",\n          \"description\": \"The constraints for the prohibition\",\n          \"items\": {\n            \"$ref\": \"#/definitions/constraint\"\n          }\n        }\n      }\n    },\n    \"obligation\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"action\"\n      ],\n      \"properties\": {\n        \"action\": {\n          \"type\": \"string\",\n          \"description\": \"The action of the obligation\"\n        },\n        \"assignee\": {\n          \"type\": \"string\",\n          \"description\": \"The assignee of the obligation\",\n          \"format\": \"uri\"\n        },\n        \"target\": {\n          \"type\": \"string\",\n          \"description\": \"The target of the obligation\",\n          \"format\": \"uri\"\n        },\n        \"constraint\": {\n          \"type\": \"array\",\n          \"description\": \"The constraints for the obligation\",\n          \"items\": {\n            \"$ref\": \"#/definitions/constraint\"\n          }\n        }\n      }\n    },\n    \"constraint\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"leftOperand\",\n        \"operator\",\n        \"rightOperand\"\n      ],\n      \"properties\": {\n        \"leftOperand\": {\n          \"type\": \"string\",\n          \"description\": \"The left operand of the constraint\",\n          \"format\": \"uri\"\n        },\n        \"operator\": {\n          \"type\": \"string\",\n          \"description\": \"The operator of the constraint\",\n          \"enum\": [\n            \"eq\",\n            \"neq\",\n            \"gt\",\n            \"gte\",\n            \"lt\",\n            \"lte\",\n            \"within\",\n            \"use\"\n          ]\n        },\n        \"rightOperand\": {\n          \"description\": \"The right operand of the constraint\"\n        },\n        \"unit\": {\n          \"type\": \"string\",\n          \"description\": \"The unit of the constraint\",\n          \"format\": \"uri\"\n        }\n      }\n    },\n    \"duty\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"action\"\n      ],\n      \"properties\": {\n        \"action\": {\n          \"type\": \"string\",\n          \"description\": \"The action of the duty\"\n        },\n        \"target\": {\n          \"type\": \"string\",\n          \"description\": \"The target of the duty\",\n          \"format\": \"uri\"\n        },\n        \"amount\": {\n          \"type\": [\"number\", \"object\"],\n          \"description\": \"The amount of the duty\"\n        },\n        \"unit\": {\n          \"type\": \"string\",\n          \"description\": \"The unit of the duty\",\n          \"format\": \"uri\"\n        },\n        \"timeInterval\": {\n          \"type\": \"string\",\n          \"description\": \"The time interval of the duty\",\n          \"pattern\": \"^P([0-9]+Y)?([0-9]+M)?([0-9]+D)?(T([0-9]+H)?([0-9]+M)?([0-9]+S)?)?$\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#pat-schema","title":"PAT Schema","text":"<p>The PAT Schema defines the structure of a Policy Adherence Token (PAT).</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"PAT\",\n  \"description\": \"A UIM Protocol Policy Adherence Token (PAT)\",\n  \"type\": \"object\",\n  \"required\": [\n    \"iss\",\n    \"sub\",\n    \"exp\",\n    \"nbf\",\n    \"jti\",\n    \"scope\",\n    \"pol\"\n  ],\n  \"properties\": {\n    \"iss\": {\n      \"type\": \"string\",\n      \"description\": \"The issuer of the PAT\"\n    },\n    \"sub\": {\n      \"type\": \"string\",\n      \"description\": \"The subject of the PAT\"\n    },\n    \"exp\": {\n      \"type\": \"integer\",\n      \"description\": \"The expiration time of the PAT\",\n      \"format\": \"unix-time\"\n    },\n    \"nbf\": {\n      \"type\": \"integer\",\n      \"description\": \"The not-before time of the PAT\",\n      \"format\": \"unix-time\"\n    },\n    \"jti\": {\n      \"type\": \"string\",\n      \"description\": \"The JWT ID of the PAT\"\n    },\n    \"scope\": {\n      \"type\": \"array\",\n      \"description\": \"The scope of the PAT\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"pol\": {\n      \"type\": \"string\",\n      \"description\": \"The policy reference of the PAT\",\n      \"format\": \"uri\"\n    },\n    \"lmt\": {\n      \"type\": \"object\",\n      \"description\": \"The rate limit of the PAT\",\n      \"required\": [\n        \"rate\",\n        \"period\"\n      ],\n      \"properties\": {\n        \"rate\": {\n          \"type\": \"integer\",\n          \"description\": \"The rate limit\",\n          \"minimum\": 1\n        },\n        \"period\": {\n          \"type\": \"integer\",\n          \"description\": \"The period in seconds\",\n          \"minimum\": 1\n        }\n      }\n    },\n    \"bil\": {\n      \"type\": \"object\",\n      \"description\": \"The billing information of the PAT\",\n      \"required\": [\n        \"method\",\n        \"id\"\n      ],\n      \"properties\": {\n        \"method\": {\n          \"type\": \"string\",\n          \"description\": \"The billing method\",\n          \"enum\": [\n            \"credit_card\",\n            \"invoice\",\n            \"paypal\",\n            \"stripe\",\n            \"other\"\n          ]\n        },\n        \"id\": {\n          \"type\": \"string\",\n          \"description\": \"The billing ID\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#service-description-schema","title":"Service Description Schema","text":"<p>The Service Description Schema defines the structure of a service description, including service information, intents, and security information.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Service Description\",\n  \"description\": \"A UIM Protocol service description\",\n  \"type\": \"object\",\n  \"required\": [\n    \"service-info\",\n    \"intents\",\n    \"uim-public-key\",\n    \"uim-policy-file\"\n  ],\n  \"properties\": {\n    \"service-info\": {\n      \"type\": \"object\",\n      \"description\": \"Information about the service\",\n      \"required\": [\n        \"name\",\n        \"description\",\n        \"service_url\"\n      ],\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the service\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the service\"\n        },\n        \"service_url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL of the service\",\n          \"format\": \"uri\"\n        },\n        \"service_logo_url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL of the service's logo\",\n          \"format\": \"uri\"\n        },\n        \"service_terms_of_service_url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL of the service's terms of service\",\n          \"format\": \"uri\"\n        },\n        \"service_privacy_policy_url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL of the service's privacy policy\",\n          \"format\": \"uri\"\n        }\n      }\n    },\n    \"intents\": {\n      \"type\": \"array\",\n      \"description\": \"The intents provided by the service\",\n      \"items\": {\n        \"$ref\": \"#/definitions/intent\"\n      }\n    },\n    \"uim-public-key\": {\n      \"type\": \"string\",\n      \"description\": \"The public key of the service\"\n    },\n    \"uim-policy-file\": {\n      \"type\": \"string\",\n      \"description\": \"The URL of the service's policy file\",\n      \"format\": \"uri\"\n    },\n    \"uim-api-discovery\": {\n      \"type\": \"string\",\n      \"description\": \"The URL of the service's API discovery endpoint\",\n      \"format\": \"uri\"\n    },\n    \"uim-compliance\": {\n      \"type\": \"object\",\n      \"description\": \"Compliance information for the service\",\n      \"properties\": {\n        \"standards\": {\n          \"type\": \"array\",\n          \"description\": \"The compliance standards the service adheres to\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"regional-compliance\": {\n          \"type\": \"object\",\n          \"description\": \"Region-specific compliance information\",\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          }\n        },\n        \"notes\": {\n          \"type\": \"string\",\n          \"description\": \"Additional compliance notes\"\n        }\n      }\n    },\n    \"uim-license\": {\n      \"type\": \"string\",\n      \"description\": \"The UIM license for the service, following the UIM Licensing Scheme format\",\n      \"format\": \"uri\"\n    }\n  },\n  \"definitions\": {\n    \"intent\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"intent_uid\",\n        \"intent_name\",\n        \"description\",\n        \"input_parameters\",\n        \"output_parameters\",\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"intent_uid\": {\n          \"type\": \"string\",\n          \"description\": \"The unique identifier for the intent\",\n          \"pattern\": \"^[a-zA-Z0-9.-]+:[a-z0-9-]+:v[0-9]+(\\\\.[0-9]+)*$\"\n        },\n        \"intent_name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the intent\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the intent\"\n        },\n        \"input_parameters\": {\n          \"type\": \"array\",\n          \"description\": \"The input parameters for the intent\",\n          \"items\": {\n            \"$ref\": \"#/definitions/parameter\"\n          }\n        },\n        \"output_parameters\": {\n          \"type\": \"array\",\n          \"description\": \"The output parameters for the intent\",\n          \"items\": {\n            \"$ref\": \"#/definitions/parameter\"\n          }\n        },\n        \"endpoint\": {\n          \"type\": \"string\",\n          \"description\": \"The endpoint for the intent\",\n          \"format\": \"uri\"\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"description\": \"Tags for the intent\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"parameter\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"name\",\n        \"type\"\n      ],\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the parameter\"\n        },\n        \"type\": {\n          \"type\": \"string\",\n          \"description\": \"The type of the parameter\",\n          \"enum\": [\n            \"string\",\n            \"number\",\n            \"integer\",\n            \"boolean\",\n            \"array\",\n            \"object\",\n            \"null\",\n            \"any\"\n          ]\n        },\n        \"required\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether the parameter is required\",\n          \"default\": false\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the parameter\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#api-schemas","title":"API Schemas","text":""},{"location":"reference/json-schemas/#intent-search-request-schema","title":"Intent Search Request Schema","text":"<p>The Intent Search Request Schema defines the structure of an intent search request.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Intent Search Request\",\n  \"description\": \"A UIM Protocol intent search request\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"query\": {\n      \"type\": \"string\",\n      \"description\": \"The natural language query or search term\"\n    },\n    \"service_name\": {\n      \"type\": \"string\",\n      \"description\": \"The name of a service\"\n    },\n    \"intent_name\": {\n      \"type\": \"string\",\n      \"description\": \"The name of an intent\"\n    },\n    \"uid\": {\n      \"type\": \"string\",\n      \"description\": \"The unique identifier of an intent\"\n    },\n    \"namespace\": {\n      \"type\": \"string\",\n      \"description\": \"The namespace of a service\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"The description of an intent\"\n    },\n    \"tags\": {\n      \"type\": \"string\",\n      \"description\": \"A comma-separated list of tags\"\n    },\n    \"page\": {\n      \"type\": \"integer\",\n      \"description\": \"The page number for pagination\",\n      \"minimum\": 1,\n      \"default\": 1\n    },\n    \"page_size\": {\n      \"type\": \"integer\",\n      \"description\": \"The number of results per page\",\n      \"minimum\": 1,\n      \"maximum\": 100,\n      \"default\": 10\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#intent-search-response-schema","title":"Intent Search Response Schema","text":"<p>The Intent Search Response Schema defines the structure of an intent search response.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Intent Search Response\",\n  \"description\": \"A UIM Protocol intent search response\",\n  \"type\": \"object\",\n  \"required\": [\n    \"intents\",\n    \"pagination\"\n  ],\n  \"properties\": {\n    \"intents\": {\n      \"type\": \"array\",\n      \"description\": \"The intents matching the search criteria\",\n      \"items\": {\n        \"$ref\": \"#/definitions/intent\"\n      }\n    },\n    \"pagination\": {\n      \"type\": \"object\",\n      \"description\": \"Pagination information\",\n      \"required\": [\n        \"total_results\",\n        \"total_pages\",\n        \"current_page\",\n        \"page_size\"\n      ],\n      \"properties\": {\n        \"total_results\": {\n          \"type\": \"integer\",\n          \"description\": \"The total number of results\",\n          \"minimum\": 0\n        },\n        \"total_pages\": {\n          \"type\": \"integer\",\n          \"description\": \"The total number of pages\",\n          \"minimum\": 0\n        },\n        \"current_page\": {\n          \"type\": \"integer\",\n          \"description\": \"The current page number\",\n          \"minimum\": 1\n        },\n        \"page_size\": {\n          \"type\": \"integer\",\n          \"description\": \"The number of results per page\",\n          \"minimum\": 1\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"intent\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"intent_uid\",\n        \"intent_name\",\n        \"description\",\n        \"input_parameters\",\n        \"output_parameters\",\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"intent_uid\": {\n          \"type\": \"string\",\n          \"description\": \"The unique identifier for the intent\",\n          \"pattern\": \"^[a-zA-Z0-9.-]+:[a-z0-9-]+:v[0-9]+(\\\\.[0-9]+)*$\"\n        },\n        \"intent_name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the intent\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the intent\"\n        },\n        \"input_parameters\": {\n          \"type\": \"array\",\n          \"description\": \"The input parameters for the intent\",\n          \"items\": {\n            \"$ref\": \"#/definitions/parameter\"\n          }\n        },\n        \"output_parameters\": {\n          \"type\": \"array\",\n          \"description\": \"The output parameters for the intent\",\n          \"items\": {\n            \"$ref\": \"#/definitions/parameter\"\n          }\n        },\n        \"endpoint\": {\n          \"type\": \"string\",\n          \"description\": \"The endpoint for the intent\",\n          \"format\": \"uri\"\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"description\": \"Tags for the intent\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"parameter\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"name\",\n        \"type\"\n      ],\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the parameter\"\n        },\n        \"type\": {\n          \"type\": \"string\",\n          \"description\": \"The type of the parameter\",\n          \"enum\": [\n            \"string\",\n            \"number\",\n            \"integer\",\n            \"boolean\",\n            \"array\",\n            \"object\",\n            \"null\",\n            \"any\"\n          ]\n        },\n        \"required\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether the parameter is required\",\n          \"default\": false\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the parameter\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#intent-execution-request-schema","title":"Intent Execution Request Schema","text":"<p>The Intent Execution Request Schema defines the structure of an intent execution request.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Intent Execution Request\",\n  \"description\": \"A UIM Protocol intent execution request\",\n  \"type\": \"object\",\n  \"required\": [\n    \"intent_uid\",\n    \"parameters\"\n  ],\n  \"properties\": {\n    \"intent_uid\": {\n      \"type\": \"string\",\n      \"description\": \"The unique identifier of the intent\",\n      \"pattern\": \"^[a-zA-Z0-9.-]+:[a-z0-9-]+:v[0-9]+(\\\\.[0-9]+)*$\"\n    },\n    \"parameters\": {\n      \"type\": \"object\",\n      \"description\": \"The parameters for the intent execution\"\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#pat-request-schema","title":"PAT Request Schema","text":"<p>The PAT Request Schema defines the structure of a PAT request.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"PAT Request\",\n  \"description\": \"A UIM Protocol PAT request\",\n  \"type\": \"object\",\n  \"required\": [\n    \"agent_id\",\n    \"signed_policy\",\n    \"agent_public_key\"\n  ],\n  \"properties\": {\n    \"agent_id\": {\n      \"type\": \"string\",\n      \"description\": \"The identifier for the AI agent\"\n    },\n    \"signed_policy\": {\n      \"type\": \"string\",\n      \"description\": \"The policy signed by the AI agent\"\n    },\n    \"agent_public_key\": {\n      \"type\": \"string\",\n      \"description\": \"The public key of the AI agent\"\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#pat-response-schema","title":"PAT Response Schema","text":"<p>The PAT Response Schema defines the structure of a PAT response.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"PAT Response\",\n  \"description\": \"A UIM Protocol PAT response\",\n  \"type\": \"object\",\n  \"required\": [\n    \"uim-pat\"\n  ],\n  \"properties\": {\n    \"uim-pat\": {\n      \"type\": \"string\",\n      \"description\": \"The Policy Adherence Token (PAT)\"\n    },\n    \"expires_at\": {\n      \"type\": \"string\",\n      \"description\": \"The expiration time of the PAT\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#error-response-schema","title":"Error Response Schema","text":"<p>The Error Response Schema defines the structure of an error response.</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Error Response\",\n  \"description\": \"A UIM Protocol error response\",\n  \"type\": \"object\",\n  \"required\": [\n    \"error\"\n  ],\n  \"properties\": {\n    \"error\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"code\",\n        \"message\"\n      ],\n      \"properties\": {\n        \"code\": {\n          \"type\": \"string\",\n          \"description\": \"The error code\",\n          \"pattern\": \"^UIM-[A-Z]{3}-[0-9]{3}$\"\n        },\n        \"message\": {\n          \"type\": \"string\",\n          \"description\": \"The error message\"\n        },\n        \"details\": {\n          \"type\": \"object\",\n          \"description\": \"Additional details about the error\"\n        },\n        \"help_url\": {\n          \"type\": \"string\",\n          \"description\": \"A URL pointing to documentation about the error\",\n          \"format\": \"uri\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"reference/json-schemas/#using-json-schemas","title":"Using JSON Schemas","text":""},{"location":"reference/json-schemas/#validation","title":"Validation","text":"<p>You can use these JSON Schemas to validate requests and responses in your UIM Protocol implementation. Here's an example using the <code>ajv</code> library in JavaScript:</p> <pre><code>const Ajv = require('ajv');\nconst ajv = new Ajv();\n\n// Load the schema\nconst intentSchema = require('./schemas/intent.json');\n\n// Compile the schema\nconst validate = ajv.compile(intentSchema);\n\n// Validate an intent\nconst intent = {\n  intent_uid: 'example.com:search-products:v1',\n  intent_name: 'SearchProducts',\n  description: 'Search for products based on criteria',\n  input_parameters: [\n    {\n      name: 'query',\n      type: 'string',\n      required: true,\n      description: 'Search query'\n    }\n  ],\n  output_parameters: [\n    {\n      name: 'products',\n      type: 'array',\n      description: 'List of matching products'\n    }\n  ],\n  endpoint: {\n    url: 'https://api.example.com/products/search',\n    method: 'POST',\n    content_type: 'application/json'\n  },\n  tags: ['e-commerce', 'search', 'products']\n};\n\nconst valid = validate(intent);\nif (!valid) {\n  console.error('Intent validation failed:', validate.errors);\n} else {\n  console.log('Intent validation succeeded');\n}\n</code></pre>"},{"location":"reference/json-schemas/#code-generation","title":"Code Generation","text":"<p>You can use these JSON Schemas to generate client libraries for your UIM Protocol implementation. Here's an example using the <code>openapi-generator</code> tool:</p> <pre><code># Generate a TypeScript client\nopenapi-generator generate -i openapi.yaml -g typescript-fetch -o ./client\n\n# Generate a Python client\nopenapi-generator generate -i openapi.yaml -g python -o ./client\n</code></pre>"},{"location":"reference/json-schemas/#documentation","title":"Documentation","text":"<p>You can use these JSON Schemas to generate documentation for your UIM Protocol implementation. Here's an example using the <code>redoc</code> tool:</p> <pre><code># Generate HTML documentation\nnpx redoc-cli bundle openapi.yaml -o ./docs/index.html\n</code></pre>"},{"location":"reference/json-schemas/#references","title":"References","text":"<ul> <li>JSON Schema</li> <li>Understanding JSON Schema</li> <li>JSON Schema Validator</li> <li>OpenAPI Specification</li> </ul>"},{"location":"reference/licensing-scheme/","title":"UIM Licensing Scheme","text":"<p>The Unified Intent Mediator (UIM) Protocol includes a comprehensive licensing scheme that defines permissions, conditions, and prohibitions for data and services. This page provides a detailed reference for the UIM Licensing Scheme.</p>"},{"location":"reference/licensing-scheme/#introduction","title":"Introduction","text":"<p>The UIM Licensing Scheme is a critical component of the UIM Protocol that standardizes how web services express usage policies for their data and functionality. Inspired by Creative Commons (CC) licenses and Responsible AI Licenses (RAIL), it provides a flexible framework for defining permissions, conditions, and prohibitions.</p> <p>Unlike the ODRL-based policy system (which is covered in the ODRL Vocabulary section), the UIM Licensing Scheme offers a simpler, more standardized approach to licensing that is specifically tailored for AI agent interactions.</p>"},{"location":"reference/licensing-scheme/#key-features","title":"Key Features","text":""},{"location":"reference/licensing-scheme/#1-modular-license-elements","title":"1. Modular License Elements","text":"<p>The UIM Licensing Scheme uses a modular approach with three types of license elements:</p> <ul> <li>Permissions: What users are allowed to do with the content</li> <li>Conditions: Requirements that must be met when using the content</li> <li>Prohibitions: Actions that are not allowed</li> </ul> <p>These elements can be combined to create licenses that meet specific needs, similar to how Creative Commons licenses work.</p>"},{"location":"reference/licensing-scheme/#2-artifact-type-specification-damps","title":"2. Artifact Type Specification (DAMPS)","text":"<p>The UIM Licensing Scheme uses the DAMPS convention to specify which artifacts the license applies to:</p> <ul> <li>D: Data</li> <li>A: Applications/Binaries/Services</li> <li>M: Model Architectures</li> <li>P: Parameters (Trained Weights)</li> <li>S: Source Code</li> </ul> <p>This expansion from the traditional DAMS convention adds \"Parameters\" as a separate category, allowing for more granular control over how model weights can be used compared to model architectures.</p>"},{"location":"reference/licensing-scheme/#3-license-naming-convention","title":"3. License Naming Convention","text":"<p>Licenses follow a structured naming convention:</p> <pre><code>[Open-][Artifact Type(s)-]UIM-[License Elements]-v[Version Number]\n</code></pre> <p>For example: - <code>D-UIM-BY-NC-v1.0</code>: A license for data that requires attribution and prohibits commercial use - <code>Open-S-UIM-BY-SA-v1.0</code>: An open license for source code that requires attribution and share-alike conditions</p>"},{"location":"reference/licensing-scheme/#4-three-formats","title":"4. Three Formats","text":"<p>Each UIM license is available in three formats:</p> <ol> <li>Human-Readable: A plain language summary of the license terms</li> <li>Lawyer-Readable: Detailed legal terms and conditions</li> <li>Machine-Readable: JSON-LD format aligned with schema.org for automated processing</li> </ol>"},{"location":"reference/licensing-scheme/#license-elements","title":"License Elements","text":""},{"location":"reference/licensing-scheme/#permissions","title":"Permissions","text":"<p>Permissions specify what users are allowed to do with the licensed content:</p> Permission Description Access Permission to access the content or service Reproduce Copy or replicate content Distribute Share content with others Modify Adapt, remix, transform, or build upon content Commercial Use Use content for commercial purposes NonCommercial Use Use content for non-commercial purposes Data Mining Use content for text and data mining Model Training Use content to train AI models Indexing Access and reproduce content solely for indexing and providing search results"},{"location":"reference/licensing-scheme/#conditions","title":"Conditions","text":"<p>Conditions specify requirements that must be met when using the licensed content:</p> Condition Description Attribution (BY) Must give appropriate credit ShareAlike (SA) Derivative works must be licensed under identical terms NonCommercial (NC) Commercial use is prohibited NoDerivatives (ND) No modifications or adaptations allowed Ethical AI Use (EAU) Must comply with ethical guidelines, prohibiting harmful applications Indexing Only (IO) Access and reproduction are permitted solely for indexing and search purposes AI Output Attribution (AIATTR) AI systems must attribute outputs derived from the content back to the source"},{"location":"reference/licensing-scheme/#prohibitions","title":"Prohibitions","text":"<p>Prohibitions specify actions that are not allowed:</p> Prohibition Description Harmful Use Prohibits use in applications causing harm (e.g., surveillance, discrimination) Reidentification Prohibits attempts to re-identify anonymized data Redistribution Prohibits unauthorized redistribution No Data Mining (NoDM) Prohibits the use of content for data mining No Model Training (NoMT) Prohibits the use of content for training AI models No Long-Term Storage (NoLTS) Prohibits storing content for long-term use Bypass Access Controls Prohibited (BACP) Prohibits bypassing paywalls or access restrictions"},{"location":"reference/licensing-scheme/#license-formats","title":"License Formats","text":""},{"location":"reference/licensing-scheme/#1-human-readable-summary","title":"1. Human-Readable Summary","text":"<p>The human-readable summary provides an easy-to-understand overview of the license terms. For example:</p> <p>UIM Attribution License (UIM-BY-v1.0)</p> <p>You are free to: - Access, reproduce, distribute, modify, and use the work for any purpose, including commercial and non-commercial uses.</p> <p>Under the following conditions: - Attribution: You must give appropriate credit, provide a link to the license, and indicate if changes were made. - Ethical AI Use: You must not use the work for harmful purposes.</p> <p>Prohibitions: - Harmful Use: Prohibited.</p>"},{"location":"reference/licensing-scheme/#2-lawyer-readable-legal-code","title":"2. Lawyer-Readable Legal Code","text":"<p>The lawyer-readable legal code provides a detailed legal document specifying the license terms. For example:</p> <p>License Name: UIM Attribution License Version 1.0 (UIM-BY-v1.0)</p> <p>1. Grant of Rights - Access, Reproduce, Distribute, Modify, Use: You are granted the rights to access, reproduce, distribute, modify, and use the Work for any purpose, including commercial uses.</p> <p>2. Conditions - Attribution (BY): You must give appropriate credit to the Licensor, provide a link to the license, and indicate if changes were made. - Ethical AI Use (EAU): You must not use the Work for harmful purposes, including but not limited to violating human rights or privacy.</p> <p>3. Prohibitions - Harmful Use: You may not use the Work in any way that causes harm.</p> <p>4. Disclaimer - The Work is provided \"as-is\" without warranties of any kind.</p>"},{"location":"reference/licensing-scheme/#3-machine-readable-code-json-ld","title":"3. Machine-Readable Code (JSON-LD)","text":"<p>The machine-readable code uses JSON-LD format aligned with schema.org to enable automated processing. For example:</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\", \"Application\", \"Model\", \"Parameters\", \"SourceCode\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"Modification\",\n    \"CommercialUse\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#standard-uim-license-combinations","title":"Standard UIM License Combinations","text":"<p>The UIM Licensing Scheme includes several standard license combinations that cover common use cases:</p>"},{"location":"reference/licensing-scheme/#1-uim-public-domain-dedication-uim-pd-v10","title":"1. UIM Public Domain Dedication (UIM-PD-v1.0)","text":"<p>Places the work in the public domain with no restrictions.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"CreativeWork\",\n  \"name\": \"UIM-PD-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-pd-v1.0\",\n  \"version\": \"1.0\",\n  \"license\": \"https://creativecommons.org/publicdomain/zero/1.0/\",\n  \"artifactType\": [\"Data\", \"Application\", \"Model\", \"Parameters\", \"SourceCode\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"Modification\",\n    \"CommercialUse\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [],\n  \"prohibitions\": []\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#2-uim-attribution-license-uim-by-v10","title":"2. UIM Attribution License (UIM-BY-v1.0)","text":"<p>Allows any use with attribution.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\", \"Application\", \"Model\", \"Parameters\", \"SourceCode\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"Modification\",\n    \"CommercialUse\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#3-uim-attribution-sharealike-license-uim-by-sa-v10","title":"3. UIM Attribution-ShareAlike License (UIM-BY-SA-v1.0)","text":"<p>Allows any use with attribution, requiring derivative works to use the same license.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-SA-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-sa-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\", \"Application\", \"Model\", \"Parameters\", \"SourceCode\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"Modification\",\n    \"CommercialUse\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"ShareAlike\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#4-uim-attribution-noncommercial-license-uim-by-nc-v10","title":"4. UIM Attribution-NonCommercial License (UIM-BY-NC-v1.0)","text":"<p>Allows non-commercial use with attribution.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-NC-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-nc-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\", \"Application\", \"Model\", \"Parameters\", \"SourceCode\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"Modification\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"NonCommercial\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"CommercialUse\",\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#5-uim-attribution-noderivatives-license-uim-by-nd-v10","title":"5. UIM Attribution-NoDerivatives License (UIM-BY-ND-v1.0)","text":"<p>Allows use without modification, with attribution.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-ND-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-nd-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\", \"Application\", \"Model\", \"Parameters\", \"SourceCode\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"CommercialUse\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"NoDerivatives\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"Modify\",\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#6-uim-attribution-noncommercial-sharealike-license-uim-by-nc-sa-v10","title":"6. UIM Attribution-NonCommercial-ShareAlike License (UIM-BY-NC-SA-v1.0)","text":"<p>Allows non-commercial use with attribution, requiring derivative works to use the same license.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-NC-SA-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-nc-sa-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\", \"Application\", \"Model\", \"Parameters\", \"SourceCode\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"Modification\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"NonCommercial\",\n    \"ShareAlike\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"CommercialUse\",\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#7-uim-attribution-noncommercial-noderivatives-license-uim-by-nc-nd-v10","title":"7. UIM Attribution-NonCommercial-NoDerivatives License (UIM-BY-NC-ND-v1.0)","text":"<p>Allows non-commercial use without modification, with attribution.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-NC-ND-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-nc-nd-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\", \"Application\", \"Model\", \"Parameters\", \"SourceCode\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"NonCommercial\",\n    \"NoDerivatives\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"CommercialUse\",\n    \"Modify\",\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#8-uim-attribution-with-ai-output-attribution-license-uim-by-aiattr-v10","title":"8. UIM Attribution with AI Output Attribution License (UIM-BY-AIATTR-v1.0)","text":"<p>Allows any use with attribution, requiring AI systems to attribute outputs derived from the content.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-AIATTR-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-aiattr-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"Modification\",\n    \"CommercialUse\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"AIOutputAttribution\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#9-uim-attribution-noderivatives-indexing-license-uim-by-nd-io-nodm-nomt-v10","title":"9. UIM Attribution-NoDerivatives Indexing License (UIM-BY-ND-IO-NoDM-NoMT-v1.0)","text":"<p>Allows access and indexing only, with attribution.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-ND-IO-NoDM-NoMT-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-nd-io-nodm-nomt-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Application\"],\n  \"permissions\": [\n    \"Access\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"NoDerivatives\",\n    \"IndexingOnly\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"Modify\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#10-uim-attribution-noderivatives-dynamic-content-license-uim-by-nd-nomt-nolts-v10","title":"10. UIM Attribution-NoDerivatives Dynamic Content License (UIM-BY-ND-NoMT-NoLTS-v1.0)","text":"<p>Allows access and distribution without modification, prohibiting model training and long-term storage.</p> <pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"UIM-BY-ND-NoMT-NoLTS-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/uim-by-nd-nomt-nolts-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"CommercialUse\",\n    \"NonCommercialUse\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"NoDerivatives\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"Modify\",\n    \"ModelTraining\",\n    \"NoLongTermStorage\",\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#open-prefixed-licenses","title":"Open-Prefixed Licenses","text":"<p>Licenses with the \"Open-\" prefix indicate that the artifact is offered at no charge and allows for free use, including modification and redistribution. For example:</p>"},{"location":"reference/licensing-scheme/#open-data-uim-attribution-license-open-d-uim-by-v10","title":"Open Data UIM Attribution License (Open-D-UIM-BY-v1.0)","text":"<pre><code>{\n  \"@context\": [\n    \"https://schema.org/\",\n    \"https://uimprotocol.com/licenses/context\"\n  ],\n  \"@type\": \"License\",\n  \"name\": \"Open-D-UIM-BY-v1.0\",\n  \"url\": \"https://uimprotocol.com/licenses/open-d-uim-by-v1.0\",\n  \"version\": \"1.0\",\n  \"artifactType\": [\"Data\"],\n  \"permissions\": [\n    \"Access\",\n    \"Reproduction\",\n    \"Distribution\",\n    \"Modification\",\n    \"CommercialUse\",\n    \"NonCommercialUse\",\n    \"DataMining\",\n    \"ModelTraining\",\n    \"Indexing\"\n  ],\n  \"conditions\": [\n    \"Attribution\",\n    \"EthicalAIUse\"\n  ],\n  \"prohibitions\": [\n    \"HarmfulUse\"\n  ]\n}\n</code></pre>"},{"location":"reference/licensing-scheme/#differentiating-open-prefixed-licenses-from-public-domain-dedications","title":"Differentiating Open-Prefixed Licenses from Public Domain Dedications","text":"<p>While both \"Open-\" prefixed licenses and public domain dedications (UIM-PD-v1.0, UIM-CC0-v1.0) promote openness, they differ in important ways:</p> <ol> <li>Conditions and Prohibitions:</li> <li>Open-Prefixed Licenses: May include conditions like Attribution and prohibitions like Harmful Use</li> <li> <p>Public Domain Dedications: Have no conditions or prohibitions</p> </li> <li> <p>Attribution Requirements:</p> </li> <li>Open-Prefixed Licenses: Typically require attribution</li> <li> <p>Public Domain Dedications: Do not require attribution</p> </li> <li> <p>Legal Rights:</p> </li> <li>Open-Prefixed Licenses: Some rights are reserved to ensure compliance with conditions</li> <li>Public Domain Dedications: No rights are reserved; the work is placed entirely in the public domain</li> </ol> <p>This differentiation allows licensors to choose the appropriate level of openness for their content while maintaining certain requirements when needed.</p>"},{"location":"reference/odrl-vocabulary/","title":"ODRL Vocabulary","text":"<p>The UIM Protocol uses the Open Digital Rights Language (ODRL) Information Model 2.2 to define policies for AI agent-web service interactions. This page provides a reference for the ODRL vocabulary used in the UIM Protocol.</p>"},{"location":"reference/odrl-vocabulary/#introduction-to-odrl","title":"Introduction to ODRL","text":"<p>The Open Digital Rights Language (ODRL) is a policy expression language that provides a flexible and interoperable information model, vocabulary, and encoding mechanisms for representing statements about the usage of content and services. The ODRL Information Model 2.2 is a W3C Recommendation and is used by the UIM Protocol to define policies for AI agent-web service interactions.</p>"},{"location":"reference/odrl-vocabulary/#odrl-core-concepts","title":"ODRL Core Concepts","text":""},{"location":"reference/odrl-vocabulary/#policy","title":"Policy","text":"<p>A Policy is a set of rules that defines the permissions, prohibitions, and obligations for a particular asset or service. In the UIM Protocol, policies are used to define the terms under which AI agents can interact with web services.</p> <pre><code>{\n  \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n  \"@type\": \"Set\",\n  \"uid\": \"http://example.com/policy/12345\",\n  \"profile\": \"http://example.com/profile/odrl-uim\",\n  \"permission\": [...],\n  \"prohibition\": [...],\n  \"obligation\": [...]\n}\n</code></pre>"},{"location":"reference/odrl-vocabulary/#permission","title":"Permission","text":"<p>A Permission is a rule that allows a particular action to be performed on an asset or service. In the UIM Protocol, permissions define what intents an AI agent can execute.</p> <pre><code>{\n  \"target\": \"http://example.com/api/intents\",\n  \"action\": \"execute\",\n  \"constraint\": [\n    {\n      \"leftOperand\": \"http://example.com/vocab/rateLimit\",\n      \"operator\": \"lte\",\n      \"rightOperand\": 1000,\n      \"unit\": \"http://example.com/vocab/hour\"\n    }\n  ],\n  \"duty\": [\n    {\n      \"action\": \"pay\",\n      \"target\": \"http://example.com/vocab/intentPrice\",\n      \"amount\": 0.01,\n      \"unit\": \"http://example.com/vocab/USD\"\n    }\n  ]\n}\n</code></pre>"},{"location":"reference/odrl-vocabulary/#prohibition","title":"Prohibition","text":"<p>A Prohibition is a rule that forbids a particular action from being performed on an asset or service. In the UIM Protocol, prohibitions define what intents an AI agent cannot execute.</p> <pre><code>{\n  \"target\": \"http://example.com/api/intents\",\n  \"action\": \"exceedRateLimit\"\n}\n</code></pre>"},{"location":"reference/odrl-vocabulary/#obligation","title":"Obligation","text":"<p>An Obligation is a rule that requires a particular action to be performed on an asset or service. In the UIM Protocol, obligations define what an AI agent must do when executing intents.</p> <pre><code>{\n  \"action\": \"signPayload\",\n  \"assignee\": \"http://example.com/ai-agent/1\",\n  \"target\": \"http://example.com/vocab/payload\",\n  \"constraint\": [\n    {\n      \"leftOperand\": \"http://example.com/vocab/publicKey\",\n      \"operator\": \"use\",\n      \"rightOperand\": \"MIIBIjANBgkqh...\"\n    }\n  ]\n}\n</code></pre>"},{"location":"reference/odrl-vocabulary/#constraint","title":"Constraint","text":"<p>A Constraint is a condition that must be satisfied for a rule to be valid. In the UIM Protocol, constraints define limitations on intent execution, such as rate limits or time restrictions.</p> <pre><code>{\n  \"leftOperand\": \"http://example.com/vocab/rateLimit\",\n  \"operator\": \"lte\",\n  \"rightOperand\": 1000,\n  \"unit\": \"http://example.com/vocab/hour\"\n}\n</code></pre>"},{"location":"reference/odrl-vocabulary/#duty","title":"Duty","text":"<p>A Duty is an obligation that must be fulfilled in order to exercise a permission. In the UIM Protocol, duties define what an AI agent must do to execute an intent, such as paying a fee.</p> <pre><code>{\n  \"action\": \"pay\",\n  \"target\": \"http://example.com/vocab/intentPrice\",\n  \"amount\": 0.01,\n  \"unit\": \"http://example.com/vocab/USD\"\n}\n</code></pre>"},{"location":"reference/odrl-vocabulary/#uim-protocol-odrl-extensions","title":"UIM Protocol ODRL Extensions","text":"<p>The UIM Protocol extends the ODRL vocabulary with additional terms specific to AI agent-web service interactions.</p>"},{"location":"reference/odrl-vocabulary/#actions","title":"Actions","text":"Action Description execute Execute an intent exceedRateLimit Exceed the rate limit pay Pay for intent execution signPayload Sign a payload with a private key logUsage Log usage information provideAttribution Provide attribution to the service"},{"location":"reference/odrl-vocabulary/#operators","title":"Operators","text":"Operator Description eq Equal to neq Not equal to gt Greater than gte Greater than or equal to lt Less than lte Less than or equal to use Use a specific value"},{"location":"reference/odrl-vocabulary/#left-operands","title":"Left Operands","text":"Left Operand Description rateLimit Rate limit for intent execution timeWindow Time window for intent execution publicKey Public key for signature verification intentPrice Price for intent execution dataRetention Data retention period dataUsage Data usage restrictions"},{"location":"reference/odrl-vocabulary/#units","title":"Units","text":"Unit Description second Second minute Minute hour Hour day Day week Week month Month year Year USD US Dollar EUR Euro GBP British Pound JPY Japanese Yen"},{"location":"reference/odrl-vocabulary/#example-uim-protocol-policy","title":"Example UIM Protocol Policy","text":"<p>Here's an example of a UIM Protocol policy using the ODRL vocabulary:</p> <pre><code>{\n  \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n  \"uid\": \"http://example.com/policy/12345\",\n  \"type\": \"Set\",\n  \"profile\": \"http://example.com/profile/odrl-uim\",\n  \"permission\": [\n    {\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": \"execute\",\n      \"constraint\": [\n        {\n          \"leftOperand\": \"http://example.com/vocab/rateLimit\",\n          \"operator\": \"lte\",\n          \"rightOperand\": 1000,\n          \"unit\": \"http://example.com/vocab/hour\"\n        }\n      ],\n      \"duty\": [\n        {\n          \"action\": \"pay\",\n          \"target\": \"http://example.com/vocab/intentPrice\",\n          \"amount\": 0.01,\n          \"unit\": \"http://example.com/vocab/USD\"\n        }\n      ]\n    }\n  ],\n  \"prohibition\": [\n    {\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": \"exceedRateLimit\"\n    }\n  ],\n  \"obligation\": [\n    {\n      \"action\": \"signPayload\",\n      \"assignee\": \"http://example.com/ai-agent/1\",\n      \"target\": \"http://example.com/vocab/payload\",\n      \"constraint\": [\n        {\n          \"leftOperand\": \"http://example.com/vocab/publicKey\",\n          \"operator\": \"use\",\n          \"rightOperand\": \"MIIBIjANBgkqh...\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"reference/odrl-vocabulary/#references","title":"References","text":"<ul> <li>ODRL Information Model 2.2</li> <li>ODRL Vocabulary &amp; Expression 2.2</li> <li>JSON-LD 1.1</li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>This section contains additional resources related to the UIM Protocol.</p>"},{"location":"resources/#available-resources","title":"Available Resources","text":"<ul> <li>Podcast: Listen to our podcast discussing the UIM Protocol, its concepts, implementation, and future directions.</li> </ul>"},{"location":"resources/podcast/","title":"UIM Protocol Podcast","text":"<p>This page provides access to the UIM Protocol podcast, which discusses the protocol's concepts, implementation, and future directions.</p>"},{"location":"resources/podcast/#episode-1-introduction-to-uim-protocol","title":"Episode 1: Introduction to UIM Protocol","text":"<p>    Your browser does not support the audio element. </p>"},{"location":"resources/podcast/#transcript","title":"Transcript","text":"<pre><code>[The following is a transcript of the podcast episode]\n\n0:00: Ever try to like get your smart assistant to book something online?\n0:04: Oh tell me about it.\n0:05: It's like pulling teeth.\n0:06: Why is that still so clunky.\n0:07: Yeah it's like the A I is stuck in the dark ages of the internet like trying to stream a movie but you're still on dial up.\n0:13: It just doesn't work well.\n0:14: Ouch.\n0:15: Yeah.\n0:16: So what's the issue then?\n0:17: Well the way A I currently interacts with websites super inefficient it's like if you had to read a whole book by translating each individual letter one by one that sounds awful and slow.\n0:30: A I is basically doing that right now with web scraping and all these clunky workarounds.\n0:34: So we need a faster a more reliable way for A I to talk to websites.\n0:37: Exactly.\n0:38: Enter U I right.\n0:39: Unified intent mediator protocol.\n0:41: Got it.\n0:41: U I is like a universal translator.\n0:44: So instead of all this fumbling around U I lets A I and websites directly communicate you know understand each other's intentions.\n0:53: So instead of teaching A I to like decode the entire internet we're giving it a set of tools and a common language and at the heart of it intense intense.\n1:04: Basically imagine a predefined action a website can say hey I offer this book flight intent and the A I doesn't have to struggle to interpret all the messy website code.\n1:15: It just says I want to use the book flight intent and boom the website knows exactly what to do smoother faster.\n1:20: I like it.\n1:21: But are we talking about like a massive library of every single action on the internet?\n1:28: That's where things get interesting.\n1:29: There are two main approaches being explored centralized versus decentralized.\n1:33: One's like a giant digital card catalog and the other is more like A I agents browsing independent bookstores.\n1:41: I'm intrigued.\n1:42: So centralized first.\n1:44: What are we looking at there?\n1:45: Picture a single massive repository.\n1:48: Every website using U I registers its intents there.\n1:52: A I agents can search it to find the specific actions.\n1:55: They need one stop shop convenient but a little risky.\n2:00: Right.\n2:00: Putting all your eggs in one basket.\n2:02: What happens if that central repository goes down?\n2:04: You're right.\n2:05: That's the potential downside single point of failure which is why there's the decentralized approach?\n2:11: Ok.\n2:11: So how does that work instead of that central repository information is stored directly on each website A I agents would use something similar to like what we use now DNS to find websites more resilient because no single point of failure.\n2:25: Right.\n2:25: Right.\n2:26: So both approaches have their pros and cons.\n2:28: It seems like it's early days still.\n2:29: Right.\n2:30: Still figuring all this out.\n2:31: Oh absolutely.\n2:32: The draft specification even mentions a potential hybrid approach best of both worlds maybe hybrid.\n2:40: Tell me more think of it like this.\n2:42: A central directory helps A I agents discover services.\n2:47: But the actual interaction happens directly with the website.\n2:51: OK.\n2:51: So you get the ease of searching with the flexibility of a decentralized system.\n2:55: Exactly.\n2:55: I'm starting to see the potential here.\n2:57: How U I could be a game changer.\n2:59: But let's bring it down to earth for a sec.\n3:01: How would this work in practice?\n3:03: Say I want to buy something online.\n3:05: U I changes that.\n3:07: How?\n3:07: OK.\n3:08: So you tell your A I assistant find me the best deal on noise canceling headphones.\n3:12: But instead of just searching one website or clumsily scraping data it uses U I to instantly connect with a bunch of retailers simultaneously.\n3:20: So like having a personal shopper.\n3:22: Exactly.\n3:22: And because they're using U I their websites can communicate product info pricing all directly to the A I.\n3:29: Makes the whole process incredibly efficient.\n3:31: No more digging through endless websites no more comparing prices on a million tabs.\n3:35: Precisely.\n3:36: I like where this is going.\n3:37: But we've all heard the stories right?\n3:39: A I running wild.\n3:40: How do we make sure it's using this power responsibly?\n3:43: Well U I has built in security and control mechanisms.\n3:46: OK.\n3:46: Good good.\n3:47: And it all revolves around something called a policy adherence token or pat A pat like a digital hall pass for A I pretty much and A I needs to obtain a Pat before it can use a particular intent on a website.\n4:00: It's like a key that unlocks specific actions.\n4:03: So websites still have control.\n4:04: It's not just open season for A I to do whatever it wants.\n4:07: Exactly.\n4:08: And that's where something called the open digital rights language where ODR comes in ODL at PAT.\n4:15: Lots of acronyms today.\n4:16: we'll unpack that one next.\n4:17: Ok.\n4:18: So back to ODR L like a digital content.\n4:21: Yeah exactly.\n4:21: It's how websites set the ground rules for A I.\n4:25: So it's not just like hoping A I will behave itself with ODR.\n4:30: Website owners can specify you know exactly how their data and services can be used.\n4:34: So they can say how often an intent can be used what data the A I can access.\n4:39: Yeah even implement billing systems.\n4:41: So this is starting to sound more like well run systems.\n4:44: That's the idea.\n4:45: And this is where pa t the digital hall pass comes back in to use an intent.\n4:49: The A I has to show a Pat proving it's allowed access you know according to the website's rules.\n4:54: So no Pat no service.\n4:56: Exactly.\n4:57: That's how websites keep control.\n4:59: Even with A I in the mix it's all about responsible access this whole system.\n5:04: It's like what building a secure infrastructure for A I on the web.\n5:07: Yes.\n5:08: And think about what this could mean.\n5:10: For something like say online shopping.\n5:13: Oh yeah.\n5:14: Ok.\n5:14: Imagine a world where you've got an A I shopping assistant that just knows what you want instead of being bombarded with irrelevant stuff.\n5:21: Exactly.\n5:22: And because all these online retailers are using U I your A I assistant can compare everything instantly.\n5:28: Products prices reviews across what dozens of sites all at once.\n5:33: It's like having a superhuman shopping buddy.\n5:35: No more.\n5:36: Endless scrolling.\n5:37: Ok.\n5:37: I'm sold.\n5:38: But what are those of us who aren't like tech wizards?\n5:41: That's a great point.\n5:42: But that's the thing about U I it has the potential to make the web easier for everyone even if you don't know all the ins and outs of websites and stuff.\n5:49: Right.\n5:50: Imagine for example booking a doctor's appointment.\n5:53: Oh yeah those websites can be a nightmare with U I.\n5:56: You could just tell your A I assistant schedule a doctor's appointment for next week and it just does it.\n6:03: Wow that would be amazing.\n6:05: Especially for people with disabilities or anyone who struggles with tech.\n6:08: Absolutely breaks down those barriers.\n6:10: Makes the web more inclusive.\n6:12: Yeah I love that.\n6:13: And it's not just about convenience it's about empowering people to actually use the internet confidently.\n6:18: Ok.\n6:18: Yeah that's huge.\n6:19: This is what tech about.\n6:21: Exactly.\n6:22: But like anything new it has its challenges.\n6:25: We've got to make sure it's accessible to everyone.\n6:27: Not just the big tech companies.\n6:29: Exactly.\n6:29: If only a handful of companies control it it could actually make inequality worse.\n6:34: So it needs to be developed in an open way with everyone at the table.\n6:38: Exactly.\n6:39: It's about democratizing access to information to opportunity.\n6:43: It's like we're building a new digital city.\n6:45: I like that.\n6:46: We want to make sure it's designed for everyone.\n6:47: Yes.\n6:48: And just like building a city it takes planning collaboration and a shared vision.\n6:53: Absolutely.\n6:54: So how do we get there from where we are now with U I still in its early stages to this more inclusive future?\n7:02: I think the first step is talking about it having open and honest conversations getting everyone on the same page policymakers tech leaders researchers the public everyone because it's going to impact all of us.\n7:14: Exactly.\n7:15: We need to talk about the good and the bad the ethical stuff and we need to do that now before it's too late to change.\n7:21: Course absolutely.\n7:22: We have to be proactive in shaping the future.\n7:24: We want responsible innovation right?\n7:26: Embracing the potential but being cautious and that brings us to another big one.\n7:31: Security.\n7:32: The million dollar question with A I we're talking about giving A I more access.\n7:36: Of course security is a concern but that's where those safeguards come in.\n7:40: Right.\n7:40: Exactly.\n7:40: Patties and ODR they're there to give websites control over how A I interacts with their stuff like building a house with strong locks.\n7:49: Exactly.\n7:50: It can be welcoming and secure.\n7:53: So U I has huge potential but it's not a magic solution.\n7:58: Exactly.\n7:58: It's a powerful tool and we need to proceed carefully having those open conversations every step of the way.\n8:04: Exactly.\n8:05: It feels like U I could be a turning point but it's not just up to the developers to figure this out is it.\n8:10: You're right.\n8:10: This is where our listeners come in.\n8:12: Wait really?\n8:13: What can our listeners do?\n8:14: I thought we were just like along for the ride U I has the potential to change so much about our lives how we shop access health care you name it but it's still being shaped.\n8:25: So there's still time to influence it.\n8:26: Absolutely.\n8:27: And the more people understand U I the more they can help shape it.\n8:31: Yes.\n8:32: Learn about it talk about it make your voice heard.\n8:34: Exactly.\n8:35: And this project is designed to be collaborative.\n8:38: So they want our feedback they're asking for it.\n8:40: Share your ideas get involved.\n8:42: I love that.\n8:43: OK.\n8:43: Before we get too carried away let's talk about where things stand right now right.\n8:47: So still a work in progress technical stuff is being finalized.\n8:51: There's a lot of experimentation going on.\n8:54: So not quite ready for prime time not quite but we're starting to see some real world pilot program.\n9:00: Really?\n9:02: What are people doing with it?\n9:03: A few retailers are integrating it into their platforms testing it out seeing how it improves A I powered shopping.\n9:10: Those A I shopping assistants we talked about they might be closer than we think.\n9:14: What else.\n9:15: Travel booking customer service even health care.\n9:19: It's like the early days of the iphone.\n9:20: Exactly.\n9:21: And those early adopters they were crucial.\n9:24: The same goes for U I.\n9:25: The more people who use it give feedback the faster it'll develop.\n9:29: Makes sense.\n9:30: This is a really exciting time to be following U I.\n9:32: But we've got to be realistic too.\n9:34: It's not a magic bullet it has its limitations and we need to keep those ethical considerations in mind making sure it benefits everyone.\n9:41: Absolutely.\n9:41: This is about humanity not just technology so big question for it.\n9:46: If U I takes off what happens to the web as we know it?\n9:51: Oh that is a big question.\n9:54: It could be huge.\n9:56: Think about it.\n9:56: The web right now.\n9:58: It's designed for us for humans.\n10:00: We click we scroll we read.\n10:02: But what if A I becomes a primary citizen of the web?\n10:06: Are you saying U I could change the entire online landscape potentially?\n10:10: Yes.\n10:11: If A I can directly access and understand the information on websites who knows what's possible?\n10:18: A I powered search engines that actually get us talking to websites instead of using clunky interfaces.\n10:24: The possibilities are really exciting.\n10:26: I'm getting a little bit of a like nervous excitement about all this.\n10:29: Me too.\n10:30: It's like standing on the edge of something brand new.\n10:32: A little exhilarating a little daunting.\n10:34: Exactly.\n10:34: But it's definitely going to be interesting.\n10:35: So it's like we're watching the trailer for this crazy sci fi movie.\n10:38: Right.\n10:39: And we're all on the edge of our seats waiting to see what happens next.\n10:42: But ok let's rewind a little bit back to reality.\n10:45: What needs to happen to take U I M from experiment to like mainstream.\n10:52: Well for starters we need the big players to get on board.\n10:56: Yeah.\n10:56: Imagine if like a Google Amazon Microsoft the Big guns.\n11:00: Exactly.\n11:01: Imagine if they embraced U I integrated it into everything they do that would definitely get everyone's attention right?\n11:08: And the good news is a lot of them are already involved in developing this and other A I standard.\n11:13: So things are moving definitely but it can't just be about big tech right?\n11:17: What about everybody else?\n11:18: We need to make sure U I works for smaller businesses developers regular people.\n11:23: Exactly.\n11:23: If we want a truly inclusive web everyone needs to be able to use it.\n11:27: So how do we make that happen?\n11:28: Well we need to make U I easy to use right?\n11:31: Build tools and resources so anyone can adopt it regardless of their tech skills.\n11:36: Exactly.\n11:37: Democratize access so to speak I like that make it available to everyone.\n11:41: But even with the best tools people still need to know what it is right?\n11:44: That's right.\n11:44: Education is key the more people understand U I the more likely they are to embrace it right?\n11:50: Because knowledge is power.\n11:51: Right.\n11:52: Exactly.\n11:52: So we need more resources tutorials workshops make it easy to learn and not just the technical stuff we need to talk about the ethical side the social impact because ultimately U I is a tool and like any tool it can be used for good or bad.\n12:09: It's up to us to decide how we want to use it.\n12:11: It really is we have to be mindful of the consequences make sure it's being used to benefit everyone.\n12:16: So that's the goal right?\n12:17: To create a better future for everybody.\n12:20: That's what we're hoping for.\n12:21: And that's where honestly our listeners come in.\n12:24: All right what can they do?\n12:26: Stay informed ask questions talk about it start a conversation.\n12:30: Exactly.\n12:31: The future isn't set in stone.\n12:33: We all have a role to play in shaping it.\n12:35: I like that.\n12:35: It's a collaborative effort.\n12:36: Well on that note I think we've reached the end of our deep dive into U I.\n12:41: It's been a a lot to process.\n12:44: Yeah but super fascinating.\n12:46: It really feels like we're on the cusp of something big here.\n12:49: We really do.\n12:49: This could change everything about how we use the internet and it's exciting to think about where it might lead.\n12:55: It certainly is.\n12:56: So to all our listeners out there.\n12:57: Thank you as always for joining us.\n12:59: Thank you.\n13:00: And remember the future is in our hands stay curious stay engaged and we'll see you next time for another deep dive.\n</code></pre>"},{"location":"specification/","title":"UIM Protocol Specification","text":"<p>Welcome to the UIM Protocol Specification. This section provides a comprehensive overview of the protocol, its components, and how they work together to enable standardized interactions between AI agents and web services.</p>"},{"location":"specification/#specification-structure","title":"Specification Structure","text":"<p>The specification is organized into the following sections:</p> <ul> <li>Overview: A high-level introduction to the UIM Protocol, its goals, and scope</li> <li>Key Concepts: Core concepts including intents, metadata, and the execute method</li> <li>Architecture: System architecture options including centralized, decentralized, and hybrid approaches</li> <li>Core Components: Detailed specifications for each component of the protocol</li> <li>API Guidelines: Standards and best practices for API implementation</li> <li>Security: Security considerations and implementation guidelines</li> <li>Appendix: Additional resources, examples, and reference materials</li> </ul>"},{"location":"specification/#specification-status","title":"Specification Status","text":"<p>This specification is currently in Draft Proposal status. It is being actively developed and refined based on community feedback. We encourage you to review the specification and provide feedback through our GitHub repository.</p>"},{"location":"specification/#formal-specification","title":"Formal Specification","text":"<p>For formal reference, the UIM Protocol is also available as an RFC-style specification document. This document is considered the authoritative source for the protocol and follows traditional RFC formatting with numbered sections.</p> <p>You can view the formal UIM Protocol specification document for technical implementation details.</p>"},{"location":"specification/#versioning","title":"Versioning","text":"<p>The UIM Protocol specification uses semantic versioning:</p> <ul> <li>Major version: Incompatible API changes</li> <li>Minor version: Backwards-compatible additions</li> <li>Patch version: Bug fixes and clarifications</li> </ul> <p>The current version is 0.2.0.</p>"},{"location":"specification/#compliance-and-validation","title":"Compliance and Validation","text":"<p>To be considered compliant with the UIM Protocol, implementations must adhere to the requirements specified in this document. Requirements are indicated using the following keywords:</p> <ul> <li>MUST: An absolute requirement</li> <li>SHOULD: A recommendation that may be ignored with good reason</li> <li>MAY: An optional feature</li> </ul> <p>A validation suite is being developed to help implementers verify compliance with the specification.</p>"},{"location":"specification/api-guidelines/","title":"API Guidelines","text":"<p>This section provides detailed guidelines for implementing the UIM Protocol APIs. These guidelines are designed to ensure consistency, reliability, and security across all implementations of the protocol.</p>"},{"location":"specification/api-guidelines/#1-general-api-design-principles","title":"1. General API Design Principles","text":"<p>When designing APIs for the UIM Protocol, follow these general principles:</p>"},{"location":"specification/api-guidelines/#11-restful-design","title":"1.1 RESTful Design","text":"<ul> <li>Use HTTP methods appropriately:</li> <li>GET: Retrieve resources</li> <li>POST: Create resources or execute actions</li> <li>PUT: Update resources</li> <li>DELETE: Remove resources</li> <li>Use resource-oriented URLs</li> <li>Use HTTP status codes correctly</li> <li>Make APIs stateless</li> </ul>"},{"location":"specification/api-guidelines/#12-consistency","title":"1.2 Consistency","text":"<ul> <li>Use consistent naming conventions</li> <li>Use consistent parameter formats</li> <li>Use consistent error formats</li> <li>Use consistent response formats</li> </ul>"},{"location":"specification/api-guidelines/#13-versioning","title":"1.3 Versioning","text":"<ul> <li>Include version information in the URL (e.g., <code>/v1/intents</code>)</li> <li>Support multiple versions simultaneously during transitions</li> <li>Clearly document version differences and migration paths</li> </ul>"},{"location":"specification/api-guidelines/#14-documentation","title":"1.4 Documentation","text":"<ul> <li>Provide comprehensive API documentation</li> <li>Include examples for all endpoints</li> <li>Document all parameters, including their types, constraints, and whether they are required</li> <li>Document all possible error responses</li> </ul>"},{"location":"specification/api-guidelines/#2-api-endpoints","title":"2. API Endpoints","text":"<p>The UIM Protocol defines several key API endpoints that should be implemented by web services and discovery services. These endpoints are organized into the following categories:</p>"},{"location":"specification/api-guidelines/#21-discovery-endpoints","title":"2.1 Discovery Endpoints","text":""},{"location":"specification/api-guidelines/#211-intent-search","title":"2.1.1 Intent Search","text":"<ul> <li>Endpoint: <code>/api/intents/search</code></li> <li>Method: GET</li> <li>Description: Searches for available intents based on given criteria.</li> <li>Parameters:</li> <li><code>query</code> (string, optional): The natural language query or search term.</li> <li><code>service_name</code> (string, optional): The name of a service.</li> <li><code>intent_name</code> (string, optional): The name of an intent.</li> <li><code>uid</code> (string, optional): The unique identifier of an intent.</li> <li><code>namespace</code> (string, optional): The namespace of a service.</li> <li><code>description</code> (string, optional): The description of an intent.</li> <li><code>tags</code> (string, optional): A comma-separated list of tags.</li> <li><code>page</code> (integer, optional): The page number for pagination (default: 1).</li> <li><code>page_size</code> (integer, optional): The number of results per page (default: 10).</li> </ul> <p>Example Request:</p> <pre><code>GET /api/intents/search?intent_name=SearchProducts&amp;tags=e-commerce,search\n</code></pre> <p>Example Response:</p> <pre><code>{\n  \"intents\": [\n    {\n      \"service_name\": \"E-commerce Platform\",\n      \"intent_name\": \"SearchProducts\",\n      \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n      \"description\": \"Search for products based on given criteria\",\n      \"input_parameters\": [\n        {\"name\": \"query\", \"type\": \"string\", \"required\": true},\n        {\"name\": \"category\", \"type\": \"string\", \"required\": false},\n        {\"name\": \"price_range\", \"type\": \"string\", \"required\": false},\n        {\"name\": \"sort_by\", \"type\": \"string\", \"required\": false}\n      ],\n      \"output_parameters\": [\n        {\"name\": \"products\", \"type\": \"array\", \"required\": true},\n        {\"name\": \"total_results\", \"type\": \"integer\", \"required\": true}\n      ],\n      \"endpoint\": \"https://api.ecommerce.com/products/search\",\n      \"tags\": [\"e-commerce\", \"search\", \"products\"]\n    }\n  ],\n  \"pagination\": {\n    \"total_results\": 1,\n    \"total_pages\": 1,\n    \"current_page\": 1,\n    \"page_size\": 10\n  }\n}\n</code></pre>"},{"location":"specification/api-guidelines/#212-intent-details","title":"2.1.2 Intent Details","text":"<ul> <li>Endpoint: <code>/api/intents/{intent_uid}</code></li> <li>Method: GET</li> <li>Description: Retrieves detailed information about a specific intent.</li> <li>Parameters: None.</li> </ul> <p>Example Request:</p> <pre><code>GET /api/intents/ecommerce.com:searchProducts:v1\n</code></pre> <p>Example Response:</p> <pre><code>{\n  \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n  \"service_name\": \"E-commerce Platform\",\n  \"intent_name\": \"SearchProducts\",\n  \"description\": \"Search for products based on given criteria\",\n  \"input_parameters\": [\n    {\"name\": \"query\", \"type\": \"string\", \"required\": true},\n    {\"name\": \"category\", \"type\": \"string\", \"required\": false},\n    {\"name\": \"price_range\", \"type\": \"string\", \"required\": false},\n    {\"name\": \"sort_by\", \"type\": \"string\", \"required\": false}\n  ],\n  \"output_parameters\": [\n    {\"name\": \"products\", \"type\": \"array\", \"required\": true},\n    {\"name\": \"total_results\", \"type\": \"integer\", \"required\": true}\n  ],\n  \"endpoint\": \"https://api.ecommerce.com/products/search\",\n  \"tags\": [\"e-commerce\", \"search\", \"products\"]\n}\n</code></pre>"},{"location":"specification/api-guidelines/#22-execution-endpoints","title":"2.2 Execution Endpoints","text":""},{"location":"specification/api-guidelines/#221-execute-intent","title":"2.2.1 Execute Intent","text":"<ul> <li>Endpoint: <code>/api/intents/execute</code></li> <li>Method: POST</li> <li>Description: Executes an intent based on the provided input parameters.</li> <li>Parameters:</li> <li><code>intent_uid</code> (string, required): The identifier for the intent.</li> <li><code>parameters</code> (object, required): The parameters required to execute the intent.</li> </ul> <p>Example Request:</p> <pre><code>POST /api/intents/execute\nContent-Type: application/json\nAuthorization: Bearer &lt;PAT&gt;\n\n{\n  \"intent_uid\": \"ecommerce.com:searchProducts:v1\",\n  \"parameters\": {\n    \"query\": \"laptops\",\n    \"category\": \"electronics\",\n    \"price_range\": \"1000-2000\",\n    \"sort_by\": \"popularity\"\n  }\n}\n</code></pre> <p>Example Response:</p> <pre><code>{\n  \"total_results\": 2,\n  \"products\": [\n    {\n      \"product_id\": \"123\",\n      \"name\": \"Gaming Laptop\",\n      \"price\": 1500,\n      \"category\": \"electronics\"\n    },\n    {\n      \"product_id\": \"456\",\n      \"name\": \"Business Laptop\",\n      \"price\": 1200,\n      \"category\": \"electronics\"\n    }\n  ]\n}\n</code></pre>"},{"location":"specification/api-guidelines/#23-policy-endpoints","title":"2.3 Policy Endpoints","text":""},{"location":"specification/api-guidelines/#231-get-policy","title":"2.3.1 Get Policy","text":"<ul> <li>Endpoint: <code>/api/policy</code></li> <li>Method: GET</li> <li>Description: Retrieves the policy for the service.</li> <li>Parameters: None.</li> </ul> <p>Example Request:</p> <pre><code>GET /api/policy\n</code></pre> <p>Example Response:</p> <pre><code>{\n  \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n  \"uid\": \"http://example.com/policy/12345\",\n  \"type\": \"Set\",\n  \"profile\": \"http://example.com/profile/odrl-uim\",\n  \"permission\": [\n    {\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": \"execute\",\n      \"constraint\": [\n        {\n          \"leftOperand\": \"http://example.com/vocab/rateLimit\",\n          \"operator\": \"lte\",\n          \"rightOperand\": 1000,\n          \"unit\": \"http://example.com/vocab/hour\"\n        }\n      ],\n      \"duty\": [\n        {\n          \"action\": \"pay\",\n          \"target\": \"http://example.com/vocab/intentPrice\",\n          \"amount\": 0.01,\n          \"unit\": \"http://example.com/vocab/USD\"\n        }\n      ]\n    }\n  ],\n  \"prohibition\": [\n    {\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": \"exceedRateLimit\"\n    }\n  ],\n  \"obligation\": [\n    {\n      \"action\": \"signPayload\",\n      \"assignee\": \"http://example.com/ai-agent/1\",\n      \"target\": \"http://example.com/vocab/payload\",\n      \"constraint\": [\n        {\n          \"leftOperand\": \"http://example.com/vocab/publicKey\",\n          \"operator\": \"use\",\n          \"rightOperand\": \"MIIBIjANBgkqh...\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"specification/api-guidelines/#232-request-pat","title":"2.3.2 Request PAT","text":"<ul> <li>Endpoint: <code>/api/pat/issue</code></li> <li>Method: POST</li> <li>Description: Requests a Policy Adherence Token (PAT) for the service.</li> <li>Parameters:</li> <li><code>agent_id</code> (string, required): The identifier for the AI agent.</li> <li><code>signed_policy</code> (string, required): The policy signed by the AI agent.</li> <li><code>agent_public_key</code> (string, required): The public key of the AI agent.</li> </ul> <p>Example Request:</p> <pre><code>POST /api/pat/issue\nContent-Type: application/json\n\n{\n  \"agent_id\": \"ai-agent-123\",\n  \"signed_policy\": \"base64-encoded-signature\",\n  \"agent_public_key\": \"base64-encoded-public-key\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>{\n  \"uim-pat\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expires_at\": \"2023-12-31T23:59:59Z\"\n}\n</code></pre>"},{"location":"specification/api-guidelines/#24-service-management-endpoints","title":"2.4 Service Management Endpoints","text":""},{"location":"specification/api-guidelines/#241-register-service","title":"2.4.1 Register Service","text":"<ul> <li>Endpoint: <code>/api/services</code></li> <li>Method: POST</li> <li>Description: Registers a new service with the central repository.</li> <li>Parameters:</li> <li><code>service_name</code> (string, required): The name of the service.</li> <li><code>service_url</code> (string, required): The URL of the service.</li> <li><code>description</code> (string, required): A brief description of the service.</li> <li><code>policy_url</code> (string, optional): The policies URL of the service.</li> <li><code>service_logo_url</code> (string, optional): The URL of the service's logo.</li> <li><code>service_terms_of_service_url</code> (string, optional): The URL of the service's terms of service.</li> <li><code>service_privacy_policy_url</code> (string, optional): The URL of the service's privacy policy.</li> </ul> <p>Example Request:</p> <pre><code>POST /api/services\nContent-Type: application/json\n\n{\n  \"service_name\": \"E-commerce Platform\",\n  \"service_url\": \"https://api.ecommerce.com\",\n  \"description\": \"Provides e-commerce functionalities\"\n}\n</code></pre> <p>Example Response:</p> <pre><code>{\n  \"service_id\": \"12345\",\n  \"service_name\": \"E-commerce Platform\",\n  \"service_url\": \"https://api.ecommerce.com\",\n  \"description\": \"Provides e-commerce functionalities\"\n}\n</code></pre>"},{"location":"specification/api-guidelines/#242-update-service","title":"2.4.2 Update Service","text":"<ul> <li>Endpoint: <code>/api/services/{service_id}</code></li> <li>Method: PUT</li> <li>Description: Updates the details of an existing service.</li> <li>Parameters: Same as Register Service.</li> </ul>"},{"location":"specification/api-guidelines/#243-delete-service","title":"2.4.3 Delete Service","text":"<ul> <li>Endpoint: <code>/api/services/{service_id}</code></li> <li>Method: DELETE</li> <li>Description: Deletes a registered service.</li> <li>Parameters: None.</li> </ul>"},{"location":"specification/api-guidelines/#244-retrieve-service","title":"2.4.4 Retrieve Service","text":"<ul> <li>Endpoint: <code>/api/services/{service_id}</code></li> <li>Method: GET</li> <li>Description: Retrieves the details of a registered service.</li> <li>Parameters: None.</li> </ul>"},{"location":"specification/api-guidelines/#25-intent-management-endpoints","title":"2.5 Intent Management Endpoints","text":""},{"location":"specification/api-guidelines/#251-list-all-intents-for-a-service","title":"2.5.1 List All Intents for a Service","text":"<ul> <li>Endpoint: <code>/api/services/{service_id}/intents</code></li> <li>Method: GET</li> <li>Description: Lists all intents for a specific service.</li> <li>Parameters:</li> <li><code>page</code> (integer, optional): The page number for pagination (default: 1).</li> <li><code>page_size</code> (integer, optional): The number of results per page (default: 10).</li> </ul>"},{"location":"specification/api-guidelines/#252-create-intent","title":"2.5.2 Create Intent","text":"<ul> <li>Endpoint: <code>/api/services/{service_id}/intents</code></li> <li>Method: POST</li> <li>Description: Creates a new intent for a specific service.</li> <li>Parameters:</li> <li><code>intent_uid</code> (string, required): The unique identifier for the intent.</li> <li><code>intent_name</code> (string, required): The name of the intent.</li> <li><code>description</code> (string, required): A brief description of what the intent does.</li> <li><code>input_parameters</code> (array of objects, required): An array of input parameters required by the intent.</li> <li><code>output_parameters</code> (array of objects, required): An array of output parameters returned by the intent.</li> <li><code>endpoint</code> (string, required): The URL endpoint for the intent.</li> <li><code>tags</code> (array of strings, optional): An array of tags associated with the intent.</li> </ul>"},{"location":"specification/api-guidelines/#253-update-intent","title":"2.5.3 Update Intent","text":"<ul> <li>Endpoint: <code>/api/intents/{intent_id}</code></li> <li>Method: PUT</li> <li>Description: Updates the details of an existing intent.</li> <li>Parameters: Same as Create Intent.</li> </ul>"},{"location":"specification/api-guidelines/#254-delete-intent","title":"2.5.4 Delete Intent","text":"<ul> <li>Endpoint: <code>/api/intents/{intent_id}</code></li> <li>Method: DELETE</li> <li>Description: Deletes an existing intent.</li> <li>Parameters: None.</li> </ul>"},{"location":"specification/api-guidelines/#3-pagination","title":"3. Pagination","text":"<p>To handle large sets of data efficiently and improve performance, it's essential to implement pagination for list endpoints. Pagination allows clients to request specific subsets of data, making it easier to manage and process responses.</p>"},{"location":"specification/api-guidelines/#31-pagination-parameters","title":"3.1 Pagination Parameters","text":"<ol> <li>page: The page number to retrieve (integer, optional, default: 1).</li> <li>page_size: The number of items to include on each page (integer, optional, default: 10).</li> </ol>"},{"location":"specification/api-guidelines/#32-pagination-headers","title":"3.2 Pagination Headers","text":"<p>In addition to the pagination parameters, the API should include pagination-related headers in the response to provide clients with information about the total number of items and pages available.</p> <ol> <li>X-Total-Count: The total number of items available.</li> <li>X-Total-Pages: The total number of pages available.</li> <li>X-Current-Page: The current page number.</li> <li>X-Page-Size: The number of items per page.</li> </ol>"},{"location":"specification/api-guidelines/#33-pagination-response-format","title":"3.3 Pagination Response Format","text":"<p>The response body should include a <code>pagination</code> object with the following properties:</p> <pre><code>{\n  \"pagination\": {\n    \"total_results\": 100,\n    \"total_pages\": 10,\n    \"current_page\": 1,\n    \"page_size\": 10\n  },\n  \"results\": [\n    // Array of items\n  ]\n}\n</code></pre>"},{"location":"specification/api-guidelines/#4-error-handling","title":"4. Error Handling","text":"<p>Proper error handling is crucial for providing a good developer experience and helping clients troubleshoot issues. The UIM Protocol defines a standard error response format and a set of error codes to ensure consistency across implementations.</p>"},{"location":"specification/api-guidelines/#41-error-response-format","title":"4.1 Error Response Format","text":"<p>All error responses should follow this format:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Descriptive error message\",\n    \"details\": {\n      \"additional\": \"context-specific information\"\n    }\n  }\n}\n</code></pre>"},{"location":"specification/api-guidelines/#42-http-status-codes","title":"4.2 HTTP Status Codes","text":"<p>Use appropriate HTTP status codes to indicate the type of error:</p> <ul> <li>400 Bad Request: The request was malformed or contained invalid parameters.</li> <li>401 Unauthorized: The request requires authentication.</li> <li>403 Forbidden: The client does not have permission to access the requested resource.</li> <li>404 Not Found: The requested resource was not found.</li> <li>405 Method Not Allowed: The HTTP method is not supported for the requested resource.</li> <li>409 Conflict: The request could not be completed due to a conflict with the current state of the resource.</li> <li>429 Too Many Requests: The client has sent too many requests in a given amount of time.</li> <li>500 Internal Server Error: An unexpected error occurred on the server.</li> <li>503 Service Unavailable: The server is currently unable to handle the request.</li> </ul>"},{"location":"specification/api-guidelines/#43-error-codes","title":"4.3 Error Codes","text":"<p>The UIM Protocol defines the following error codes:</p>"},{"location":"specification/api-guidelines/#431-client-side-errors-4xx","title":"4.3.1 Client-Side Errors (4xx)","text":"Error Code Message Description Example Scenario INVALID_PARAMETER \"The parameter '{param}' is required.\" The request is missing a required parameter or contains an invalid parameter. A required field such as query in a search intent is not provided. UNAUTHORIZED \"Unauthorized access. Authentication is required.\" The request is not authenticated or the authentication token is invalid or expired. The AI agent attempts to access a service without providing a valid OAuth2.0 token. FORBIDDEN \"Access to this resource is forbidden.\" The client is authenticated but does not have the necessary permissions to access the resource. An AI agent tries to execute an intent that it does not have permission to use. NOT_FOUND \"The requested resource '{resource}' was not found.\" The specified resource or endpoint could not be found on the server. The AI agent requests an intent or service that does not exist. METHOD_NOT_ALLOWED \"The HTTP method '{method}' is not allowed for this endpoint.\" The client attempted to use an HTTP method that is not supported by the endpoint. Sending a POST request to an endpoint that only supports GET. CONFLICT \"The request could not be completed due to a conflict.\" The request could not be processed because of a conflict in the current state of the resource. Attempting to register an intent that already exists under a different version. UNSUPPORTED_MEDIA_TYPE \"The media type '{type}' is not supported.\" The server does not support the media type of the request payload. The client sends a request with an unsupported content type, such as text/xml instead of application/json."},{"location":"specification/api-guidelines/#432-server-side-errors-5xx","title":"4.3.2 Server-Side Errors (5xx)","text":"Error Code Message Description Example Scenario INTERNAL_SERVER_ERROR \"An unexpected error occurred on the server. Please try again later.\" A generic error message when the server encounters an unexpected condition. The server encounters a null pointer exception or other unhandled error. SERVICE_UNAVAILABLE \"The service is temporarily unavailable. Please try again later.\" The server is currently unable to handle the request due to maintenance or overload. The server is down for maintenance, or a service dependency is unavailable. GATEWAY_TIMEOUT \"The server did not receive a timely response from the upstream server.\" The server, while acting as a gateway, did not receive a response from an upstream server in time. A request to an external API exceeds the timeout limit. NOT_IMPLEMENTED \"The requested functionality is not implemented.\" The server does not support the functionality required to fulfill the request. The AI agent attempts to use an intent that is not yet supported by the service."},{"location":"specification/api-guidelines/#433-protocol-level-errors","title":"4.3.3 Protocol-Level Errors","text":"Error Code Message Description Example Scenario INTENT_EXECUTION_FAILED \"The intent '{intent}' could not be executed due to {reason}.\" The execution of an intent fails due to invalid input, missing parameters, or other issues. An AI agent tries to execute GetProductDetails but fails because the required product_id is missing. INTENT_NOT_SUPPORTED \"The intent '{intent}' is not supported by this service.\" The requested intent is not recognized or supported by the target service. An AI agent requests an intent that has been deprecated or is not implemented by the service. VERSION_CONFLICT \"The intent version '{version}' is not supported.\" There is a conflict between the requested version of the intent and the version supported by the service. An AI agent attempts to execute version v1 of an intent when only v2 is supported. INTENT_DEPRECATED \"The intent '{intent}' has been deprecated and is no longer supported.\" The intent has been deprecated and is no longer available for use. The AI agent calls a deprecated intent that has been removed in the latest version of the protocol."},{"location":"specification/api-guidelines/#44-error-handling-best-practices","title":"4.4 Error Handling Best Practices","text":"<ul> <li>Be Specific: Provide clear, specific error messages that help the client understand what went wrong and how to fix it.</li> <li>Include Context: Include relevant context in the error details to help with debugging.</li> <li>Don't Expose Sensitive Information: Ensure that error messages don't expose sensitive information like stack traces, internal server details, or credentials.</li> <li>Log Errors: Log all errors on the server side for monitoring and debugging purposes.</li> <li>Provide Actionable Feedback: When possible, include suggestions for how to resolve the error.</li> </ul>"},{"location":"specification/api-guidelines/#5-authentication-and-authorization","title":"5. Authentication and Authorization","text":"<p>The UIM Protocol uses Policy Adherence Tokens (PATs) for authentication and authorization. This section provides guidelines for implementing PAT-based authentication and authorization in your API.</p>"},{"location":"specification/api-guidelines/#51-pat-based-authentication","title":"5.1 PAT-Based Authentication","text":"<ul> <li>Token Format: PATs are implemented as JSON Web Tokens (JWTs) and should be included in the <code>Authorization</code> header of API requests using the Bearer scheme.</li> <li>Token Validation: Validate the PAT's signature, expiration time, and other claims before processing the request.</li> <li>Token Renewal: Provide a mechanism for renewing PATs before they expire.</li> <li>Token Revocation: Implement a mechanism for revoking PATs if necessary.</li> </ul>"},{"location":"specification/api-guidelines/#52-authorization","title":"5.2 Authorization","text":"<ul> <li>Scope-Based Authorization: Use the <code>scope</code> claim in the PAT to determine what actions the client is authorized to perform.</li> <li>Rate Limiting: Implement rate limiting based on the <code>lmt</code> claim in the PAT.</li> <li>Access Control: Implement access control based on the client's identity and permissions.</li> </ul>"},{"location":"specification/api-guidelines/#53-security-best-practices","title":"5.3 Security Best Practices","text":"<ul> <li>Use HTTPS: Always use HTTPS to encrypt communications between clients and servers.</li> <li>Validate Input: Validate all input to prevent injection attacks.</li> <li>Implement Rate Limiting: Implement rate limiting to prevent abuse.</li> <li>Use Strong Cryptography: Use strong cryptographic algorithms for signing and verifying PATs.</li> <li>Implement Proper Error Handling: Return appropriate error responses for authentication and authorization failures.</li> </ul>"},{"location":"specification/api-guidelines/#6-api-documentation","title":"6. API Documentation","text":"<p>Good API documentation is essential for helping developers understand and use your API effectively. This section provides guidelines for documenting your UIM Protocol API.</p>"},{"location":"specification/api-guidelines/#61-documentation-format","title":"6.1 Documentation Format","text":"<ul> <li>OpenAPI Specification: Use the OpenAPI Specification (formerly known as Swagger) to document your API.</li> <li>Markdown: Use Markdown for additional documentation, such as guides and tutorials.</li> <li>Code Examples: Include code examples in multiple programming languages.</li> </ul>"},{"location":"specification/api-guidelines/#62-documentation-content","title":"6.2 Documentation Content","text":"<ul> <li>API Overview: Provide an overview of your API, including its purpose and key features.</li> <li>Authentication: Explain how to authenticate with your API.</li> <li>Endpoints: Document all endpoints, including their URLs, methods, parameters, and responses.</li> <li>Error Handling: Explain how errors are handled and what error codes to expect.</li> <li>Rate Limiting: Explain any rate limiting policies.</li> <li>Versioning: Explain your versioning strategy and how to use different versions of the API.</li> <li>Examples: Provide examples of common use cases.</li> </ul>"},{"location":"specification/api-guidelines/#63-interactive-documentation","title":"6.3 Interactive Documentation","text":"<ul> <li>API Explorer: Provide an interactive API explorer that allows developers to make requests to your API and see the responses.</li> <li>Sandbox Environment: Provide a sandbox environment for testing API calls without affecting production data.</li> </ul>"},{"location":"specification/api-guidelines/#7-performance-and-scalability","title":"7. Performance and Scalability","text":"<p>Designing APIs for performance and scalability is crucial for ensuring a good user experience and handling growth. This section provides guidelines for optimizing the performance and scalability of your UIM Protocol API.</p>"},{"location":"specification/api-guidelines/#71-caching","title":"7.1 Caching","text":"<ul> <li>Response Caching: Use HTTP caching headers to enable client-side caching of responses.</li> <li>Cache-Control: Use the <code>Cache-Control</code> header to specify caching policies.</li> <li>ETag: Use the <code>ETag</code> header to enable conditional requests.</li> <li>Last-Modified: Use the <code>Last-Modified</code> header to enable conditional requests based on modification time.</li> </ul>"},{"location":"specification/api-guidelines/#72-compression","title":"7.2 Compression","text":"<ul> <li>GZIP Compression: Enable GZIP compression for API responses to reduce bandwidth usage.</li> <li>Content-Encoding: Use the <code>Content-Encoding</code> header to indicate the compression method used.</li> </ul>"},{"location":"specification/api-guidelines/#73-rate-limiting","title":"7.3 Rate Limiting","text":"<ul> <li>Rate Limit Headers: Include rate limit information in response headers.</li> <li>X-RateLimit-Limit: The maximum number of requests allowed in a time window.</li> <li>X-RateLimit-Remaining: The number of requests remaining in the current time window.</li> <li>X-RateLimit-Reset: The time when the current rate limit window resets.</li> </ul>"},{"location":"specification/api-guidelines/#74-asynchronous-processing","title":"7.4 Asynchronous Processing","text":"<ul> <li>Webhooks: Use webhooks for asynchronous notifications.</li> <li>Long-Running Operations: Use asynchronous processing for long-running operations.</li> <li>Status Endpoints: Provide endpoints for checking the status of asynchronous operations.</li> </ul>"},{"location":"specification/api-guidelines/#75-load-balancing","title":"7.5 Load Balancing","text":"<ul> <li>Horizontal Scaling: Design your API to support horizontal scaling.</li> <li>Stateless Design: Make your API stateless to facilitate horizontal scaling.</li> <li>Load Balancer: Use a load balancer to distribute traffic across multiple instances.</li> </ul>"},{"location":"specification/api-guidelines/#8-monitoring-and-analytics","title":"8. Monitoring and Analytics","text":"<p>Monitoring and analytics are essential for understanding how your API is being used and identifying issues. This section provides guidelines for implementing monitoring and analytics for your UIM Protocol API.</p>"},{"location":"specification/api-guidelines/#81-metrics-to-monitor","title":"8.1 Metrics to Monitor","text":"<ul> <li>Request Volume: Track the number of requests to your API.</li> <li>Response Time: Monitor the time it takes to respond to requests.</li> <li>Error Rate: Track the rate of errors returned by your API.</li> <li>Resource Usage: Monitor CPU, memory, and disk usage.</li> <li>Concurrent Connections: Track the number of concurrent connections to your API.</li> </ul>"},{"location":"specification/api-guidelines/#82-logging","title":"8.2 Logging","text":"<ul> <li>Request Logging: Log all requests to your API, including the request method, URL, headers, and body.</li> <li>Response Logging: Log all responses from your API, including the status code, headers, and body.</li> <li>Error Logging: Log all errors that occur in your API, including stack traces and context information.</li> <li>Performance Logging: Log performance metrics for each request, such as response time and resource usage.</li> </ul>"},{"location":"specification/api-guidelines/#83-alerting","title":"8.3 Alerting","text":"<ul> <li>Error Rate Alerts: Set up alerts for high error rates.</li> <li>Response Time Alerts: Set up alerts for slow response times.</li> <li>Resource Usage Alerts: Set up alerts for high resource usage.</li> <li>Availability Alerts: Set up alerts for API downtime.</li> </ul>"},{"location":"specification/api-guidelines/#84-analytics","title":"8.4 Analytics","text":"<ul> <li>Usage Analytics: Track how your API is being used, including which endpoints are most popular.</li> <li>User Analytics: Track which users are using your API and how they are using it.</li> <li>Performance Analytics: Track the performance of your API over time.</li> <li>Error Analytics: Track the most common errors and their causes.</li> </ul>"},{"location":"specification/api-guidelines/#9-conclusion","title":"9. Conclusion","text":"<p>Following these API guidelines will help ensure that your UIM Protocol implementation is consistent, reliable, and secure. By adhering to these guidelines, you'll provide a better experience for developers using your API and make it easier for AI agents to interact with your web service.</p> <p>Remember that these guidelines are not exhaustive, and you should also follow general best practices for API design and implementation. As the UIM Protocol evolves, these guidelines may be updated to reflect new best practices and requirements.</p>"},{"location":"specification/appendix/","title":"Appendix","text":"<p>This appendix provides additional information, references, and resources related to the UIM Protocol.</p>"},{"location":"specification/appendix/#1-glossary","title":"1. Glossary","text":""},{"location":"specification/appendix/#11-key-terms","title":"1.1 Key Terms","text":"Term Definition AI Agent A software application or service that uses artificial intelligence to perform tasks on behalf of users. In the context of the UIM Protocol, AI agents discover and execute intents provided by web services. Intent A predefined action that an AI agent can perform on a web service. Intents encapsulate specific tasks, including necessary parameters and execution details. Metadata Descriptive information about an intent, including its name, description, and category. Parameter Input or output data required for an intent's execution. Parameters have names, types, and may be required or optional. Policy Adherence Token (PAT) A digitally signed token issued by a web service to an AI agent, encapsulating permissions, usage limits, and billing agreements. Service A web service that publishes its capabilities (intents) using the UIM Protocol. Endpoint The API endpoint where an intent can be executed. Discovery The process by which AI agents find available intents and services. Execution The process of performing an intent, including parameter validation, action execution, and response formatting. ODRL Open Digital Rights Language, a policy expression language used to define permissions, prohibitions, and obligations in the UIM Protocol."},{"location":"specification/appendix/#12-acronyms","title":"1.2 Acronyms","text":"Acronym Full Form UIM Unified Intent Mediator PAT Policy Adherence Token JWT JSON Web Token ODRL Open Digital Rights Language TLS Transport Layer Security API Application Programming Interface JSON JavaScript Object Notation DNS Domain Name System HTTP Hypertext Transfer Protocol HTTPS HTTP Secure"},{"location":"specification/appendix/#2-references","title":"2. References","text":""},{"location":"specification/appendix/#21-standards-and-specifications","title":"2.1 Standards and Specifications","text":"<ul> <li>JSON Web Token (JWT)</li> <li>Open Digital Rights Language (ODRL) Information Model 2.2</li> <li>HTTP/1.1</li> <li>HTTP/2</li> <li>Transport Layer Security (TLS)</li> <li>DNS TXT Records</li> <li>JSON Schema</li> <li>OpenAPI Specification</li> </ul>"},{"location":"specification/appendix/#22-related-technologies","title":"2.2 Related Technologies","text":"<ul> <li>OAuth 2.0</li> <li>OpenID Connect</li> <li>JSON-LD</li> <li>WebSub</li> <li>Activity Streams</li> <li>Schema.org</li> </ul>"},{"location":"specification/appendix/#3-example-implementations","title":"3. Example Implementations","text":""},{"location":"specification/appendix/#31-ai-agent-implementation","title":"3.1 AI Agent Implementation","text":"<pre><code>import requests\nimport jwt\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives.hashes import SHA256\n\nclass UIMAgent:\n    def __init__(self, agent_id):\n        self.agent_id = agent_id\n        self.private_key, self.public_key = self._generate_key_pair()\n        self.pats = {}  # Store PATs for different services\n\n    def _generate_key_pair(self):\n        # Generate RSA key pair\n        private_key = rsa.generate_private_key(\n            public_exponent=65537,\n            key_size=2048\n        )\n        public_key = private_key.public_key()\n\n        # Serialize keys\n        private_pem = private_key.private_bytes(\n            encoding=serialization.Encoding.PEM,\n            format=serialization.PrivateFormat.PKCS8,\n            encryption_algorithm=serialization.NoEncryption()\n        )\n        public_pem = public_key.public_bytes(\n            encoding=serialization.Encoding.PEM,\n            format=serialization.PublicFormat.SubjectPublicKeyInfo\n        )\n\n        return private_pem, public_pem\n\n    def discover_service(self, domain):\n        # Query DNS TXT records\n        try:\n            # In a real implementation, this would use DNS queries\n            # For simplicity, we'll simulate it\n            agents_json_url = f\"https://{domain}/agents.json\"\n            return self.fetch_agents_json(agents_json_url)\n        except Exception as e:\n            print(f\"Error discovering service: {e}\")\n            return None\n\n    def fetch_agents_json(self, url):\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            print(f\"Error fetching agents.json: {e}\")\n            return None\n\n    def get_policy(self, policy_url):\n        try:\n            response = requests.get(policy_url)\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            print(f\"Error fetching policy: {e}\")\n            return None\n\n    def sign_policy(self, policy):\n        # Sign the policy using the private key\n        private_key_obj = serialization.load_pem_private_key(\n            self.private_key,\n            password=None\n        )\n        policy_json = json.dumps(policy).encode('utf-8')\n        signature = private_key_obj.sign(\n            policy_json,\n            padding.PKCS1v15(),\n            SHA256()\n        )\n        return signature\n\n    def request_pat(self, service_url, signed_policy):\n        try:\n            response = requests.post(\n                f\"{service_url}/pat/issue\",\n                json={\n                    \"agent_id\": self.agent_id,\n                    \"signed_policy\": signed_policy.hex(),\n                    \"agent_public_key\": self.public_key.decode('utf-8')\n                }\n            )\n            response.raise_for_status()\n            pat = response.json()[\"uim-pat\"]\n            self.pats[service_url] = pat\n            return pat\n        except Exception as e:\n            print(f\"Error requesting PAT: {e}\")\n            return None\n\n    def execute_intent(self, service_url, intent_uid, parameters):\n        # Get PAT for the service\n        pat = self.pats.get(service_url)\n        if not pat:\n            print(f\"No PAT available for {service_url}\")\n            return None\n\n        try:\n            response = requests.post(\n                f\"{service_url}/uim/execute\",\n                headers={\n                    \"Authorization\": f\"Bearer {pat}\",\n                    \"Content-Type\": \"application/json\"\n                },\n                json={\n                    \"intent_uid\": intent_uid,\n                    \"parameters\": parameters\n                }\n            )\n            response.raise_for_status()\n            return response.json()\n        except Exception as e:\n            print(f\"Error executing intent: {e}\")\n            return None\n\n    def search_intents(self, service_url, query=None, tags=None):\n        # Build query parameters\n        params = {}\n        if query:\n            params[\"query\"] = query\n        if tags:\n            params[\"tags\"] = \",\".join(tags)\n\n        try:\n            response = requests.get(\n                f\"{service_url}/uim/intents/search\",\n                params=params\n            )\n            response.raise_for_status()\n            return response.json()[\"intents\"]\n        except Exception as e:\n            print(f\"Error searching intents: {e}\")\n            return []\n\n# Example usage\nagent = UIMAgent(\"ai-agent-123\")\nservice_info = agent.discover_service(\"example.com\")\n\nif service_info:\n    policy_url = service_info[\"uim-policy-file\"]\n    service_url = service_info[\"service-info\"][\"service_url\"]\n\n    policy = agent.get_policy(policy_url)\n    if policy:\n        signed_policy = agent.sign_policy(policy)\n        pat = agent.request_pat(service_url, signed_policy)\n\n        if pat:\n            # Search for intents\n            intents = agent.search_intents(service_url, tags=[\"e-commerce\", \"search\"])\n\n            if intents:\n                # Execute an intent\n                intent_uid = intents[0][\"intent_uid\"]\n                result = agent.execute_intent(\n                    service_url,\n                    intent_uid,\n                    {\"query\": \"laptop\"}\n                )\n\n                if result:\n                    print(f\"Intent execution result: {result}\")\n</code></pre>"},{"location":"specification/appendix/#32-web-service-implementation","title":"3.2 Web Service Implementation","text":"<pre><code>from flask import Flask, request, jsonify\nimport jwt\nimport json\nimport time\nimport uuid\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa, padding\nfrom cryptography.hazmat.primitives.hashes import SHA256\n\napp = Flask(__name__)\n\n# Generate RSA key pair for the service\nprivate_key, public_key = generate_key_pair()\n\n# Define intents\nintents = [\n    {\n        \"intent_uid\": \"example.com:search-products:v1\",\n        \"intent_name\": \"SearchProducts\",\n        \"description\": \"Search for products based on criteria\",\n        \"input_parameters\": [\n            {\"name\": \"query\", \"type\": \"string\", \"required\": True},\n            {\"name\": \"category\", \"type\": \"string\", \"required\": False},\n            {\"name\": \"price_range\", \"type\": \"string\", \"required\": False},\n            {\"name\": \"sort_by\", \"type\": \"string\", \"required\": False}\n        ],\n        \"output_parameters\": [\n            {\"name\": \"products\", \"type\": \"array\", \"required\": True},\n            {\"name\": \"total_results\", \"type\": \"integer\", \"required\": True}\n        ],\n        \"endpoint\": \"https://api.example.com/products/search\",\n        \"tags\": [\"e-commerce\", \"search\", \"products\"]\n    }\n]\n\n# Define policy\npolicy = {\n    \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n    \"uid\": \"http://example.com/policy/12345\",\n    \"type\": \"Set\",\n    \"profile\": \"http://example.com/profile/odrl-uim\",\n    \"permission\": [\n        {\n            \"target\": \"http://example.com/api/intents\",\n            \"action\": \"execute\",\n            \"constraint\": [\n                {\n                    \"leftOperand\": \"http://example.com/vocab/rateLimit\",\n                    \"operator\": \"lte\",\n                    \"rightOperand\": 1000,\n                    \"unit\": \"http://example.com/vocab/hour\"\n                }\n            ],\n            \"duty\": [\n                {\n                    \"action\": \"pay\",\n                    \"target\": \"http://example.com/vocab/intentPrice\",\n                    \"amount\": 0.01,\n                    \"unit\": \"http://example.com/vocab/USD\"\n                }\n            ]\n        }\n    ]\n}\n\n@app.route(\"/agents.json\")\ndef agents_json():\n    return jsonify({\n        \"service-info\": {\n            \"name\": \"Example E-commerce Service\",\n            \"description\": \"Provides e-commerce functionalities\",\n            \"service_url\": \"https://api.example.com\",\n            \"service_logo_url\": \"https://example.com/logo.png\",\n            \"service_terms_of_service_url\": \"https://example.com/terms\",\n            \"service_privacy_policy_url\": \"https://example.com/privacy\"\n        },\n        \"intents\": intents,\n        \"uim-public-key\": public_key.decode('utf-8'),\n        \"uim-policy-file\": \"https://example.com/uim-policy.json\",\n        \"uim-api-discovery\": \"https://api.example.com/uim/intents/search\",\n        \"uim-compliance\": {\n            \"standards\": [\"ISO27001\", \"GDPR\"],\n            \"regional-compliance\": {\n                \"EU\": \"GDPR\",\n                \"US-CA\": \"CCPA\"\n            },\n            \"notes\": \"Data is encrypted in transit and at rest.\"\n        }\n    })\n\n@app.route(\"/uim-policy.json\")\ndef uim_policy():\n    return jsonify(policy)\n\n@app.route(\"/pat/issue\", methods=[\"POST\"])\ndef issue_pat():\n    data = request.json\n    agent_id = data.get(\"agent_id\")\n    signed_policy = data.get(\"signed_policy\")\n    agent_public_key = data.get(\"agent_public_key\")\n\n    if not agent_id or not signed_policy or not agent_public_key:\n        return jsonify({\"error\": \"Missing required parameters\"}), 400\n\n    if not verify_signed_policy(signed_policy, agent_public_key):\n        return jsonify({\"error\": \"Invalid policy signature\"}), 400\n\n    # Generate PAT\n    pat = {\n        \"iss\": \"example.com\",\n        \"sub\": agent_id,\n        \"exp\": int(time.time()) + 86400,  # 24 hours\n        \"nbf\": int(time.time()),\n        \"jti\": str(uuid.uuid4()),\n        \"scope\": [\"example.com:search-products:v1:execute\"],\n        \"pol\": \"https://example.com/uim-policy.json\",\n        \"lmt\": {\n            \"rate\": 100,\n            \"period\": 3600\n        }\n    }\n\n    # Sign PAT\n    token = jwt.encode(pat, private_key, algorithm=\"RS256\")\n\n    return jsonify({\n        \"uim-pat\": token,\n        \"expires_at\": time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime(pat[\"exp\"]))\n    })\n\n@app.route(\"/uim/intents/search\")\ndef search_intents():\n    query = request.args.get(\"query\")\n    tags = request.args.get(\"tags\")\n\n    filtered_intents = intents\n\n    if query:\n        filtered_intents = [\n            intent for intent in filtered_intents\n            if query.lower() in intent[\"intent_name\"].lower() or\n               query.lower() in intent[\"description\"].lower()\n        ]\n\n    if tags:\n        tag_list = tags.split(\",\")\n        filtered_intents = [\n            intent for intent in filtered_intents\n            if any(tag in intent[\"tags\"] for tag in tag_list)\n        ]\n\n    return jsonify({\n        \"intents\": filtered_intents,\n        \"pagination\": {\n            \"total_results\": len(filtered_intents),\n            \"total_pages\": 1,\n            \"current_page\": 1,\n            \"page_size\": len(filtered_intents)\n        }\n    })\n\n@app.route(\"/uim/execute\", methods=[\"POST\"])\ndef execute_intent():\n    # Get PAT from Authorization header\n    auth_header = request.headers.get(\"Authorization\")\n    if not auth_header or not auth_header.startswith(\"Bearer \"):\n        return jsonify({\"error\": \"Missing or invalid Authorization header\"}), 401\n\n    pat = auth_header.split(\" \")[1]\n    decoded_pat = verify_pat(pat)\n    if not decoded_pat:\n        return jsonify({\"error\": \"Invalid PAT\"}), 401\n\n    # Get intent and parameters\n    data = request.json\n    intent_uid = data.get(\"intent_uid\")\n    parameters = data.get(\"parameters\", {})\n\n    if not intent_uid:\n        return jsonify({\"error\": \"Missing intent_uid\"}), 400\n\n    # Check if intent is allowed by PAT\n    if f\"{intent_uid}:execute\" not in decoded_pat.get(\"scope\", []):\n        return jsonify({\"error\": \"Intent not allowed by PAT\"}), 403\n\n    # Execute intent\n    if intent_uid == \"example.com:search-products:v1\":\n        query = parameters.get(\"query\")\n        if not query:\n            return jsonify({\"error\": \"Missing required parameter: query\"}), 400\n\n        # Simulate search\n        products = [\n            {\n                \"id\": \"123\",\n                \"name\": \"Laptop\",\n                \"price\": 1000,\n                \"description\": \"A powerful laptop\"\n            }\n        ]\n\n        return jsonify({\n            \"products\": products,\n            \"total_results\": len(products)\n        })\n    else:\n        return jsonify({\"error\": \"Unknown intent\"}), 400\n\ndef generate_key_pair():\n    # Generate RSA key pair\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048\n    )\n    public_key = private_key.public_key()\n\n    # Serialize keys\n    private_pem = private_key.private_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PrivateFormat.PKCS8,\n        encryption_algorithm=serialization.NoEncryption()\n    )\n    public_pem = public_key.public_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PublicFormat.SubjectPublicKeyInfo\n    )\n\n    return private_pem, public_pem\n\ndef verify_signed_policy(signed_policy_hex, agent_public_key_pem):\n    try:\n        # Convert hex to bytes\n        signed_policy = bytes.fromhex(signed_policy_hex)\n\n        # Load agent's public key\n        agent_public_key = serialization.load_pem_public_key(\n            agent_public_key_pem.encode('utf-8')\n        )\n\n        # Load policy\n        policy_json = json.dumps(policy).encode('utf-8')\n\n        # Verify signature\n        agent_public_key.verify(\n            signed_policy,\n            policy_json,\n            padding.PKCS1v15(),\n            SHA256()\n        )\n\n        return True\n    except Exception as e:\n        print(f\"Error verifying signed policy: {e}\")\n        return False\n\ndef verify_pat(pat):\n    try:\n        # Verify PAT\n        decoded_pat = jwt.decode(\n            pat,\n            public_key,\n            algorithms=[\"RS256\"],\n            options={\"verify_aud\": False}\n        )\n\n        return decoded_pat\n    except Exception as e:\n        print(f\"Error verifying PAT: {e}\")\n        return None\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=4000)\n</code></pre>"},{"location":"specification/appendix/#4-json-schemas","title":"4. JSON Schemas","text":""},{"location":"specification/appendix/#41-intent-schema","title":"4.1 Intent Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Intent\",\n  \"description\": \"A UIM Protocol intent\",\n  \"type\": \"object\",\n  \"required\": [\n    \"intent_uid\",\n    \"intent_name\",\n    \"description\",\n    \"input_parameters\",\n    \"output_parameters\",\n    \"endpoint\"\n  ],\n  \"properties\": {\n    \"intent_uid\": {\n      \"type\": \"string\",\n      \"description\": \"The unique identifier for the intent\",\n      \"pattern\": \"^[a-zA-Z0-9.-]+:[a-z0-9-]+:v[0-9]+(\\\\.[0-9]+)*$\"\n    },\n    \"intent_name\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the intent\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"description\": \"A description of the intent\"\n    },\n    \"input_parameters\": {\n      \"type\": \"array\",\n      \"description\": \"The input parameters for the intent\",\n      \"items\": {\n        \"$ref\": \"#/definitions/parameter\"\n      }\n    },\n    \"output_parameters\": {\n      \"type\": \"array\",\n      \"description\": \"The output parameters for the intent\",\n      \"items\": {\n        \"$ref\": \"#/definitions/parameter\"\n      }\n    },\n    \"endpoint\": {\n      \"type\": \"object\",\n      \"description\": \"The endpoint for the intent\",\n      \"required\": [\n        \"url\",\n        \"method\",\n        \"content_type\"\n      ],\n      \"properties\": {\n        \"url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL for the intent\",\n          \"format\": \"uri\"\n        },\n        \"method\": {\n          \"type\": \"string\",\n          \"description\": \"The HTTP method for the intent\",\n          \"enum\": [\n            \"GET\",\n            \"POST\",\n            \"PUT\",\n            \"DELETE\",\n            \"PATCH\"\n          ]\n        },\n        \"content_type\": {\n          \"type\": \"string\",\n          \"description\": \"The content type for the intent\",\n          \"default\": \"application/json\"\n        }\n      }\n    },\n    \"tags\": {\n      \"type\": \"array\",\n      \"description\": \"Tags for the intent\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"category\": {\n      \"type\": \"string\",\n      \"description\": \"The category for the intent\"\n    },\n    \"version\": {\n      \"type\": \"string\",\n      \"description\": \"The version of the intent\",\n      \"pattern\": \"^v[0-9]+(\\\\.[0-9]+)*$\"\n    }\n  },\n  \"definitions\": {\n    \"parameter\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"name\",\n        \"type\"\n      ],\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the parameter\"\n        },\n        \"type\": {\n          \"type\": \"string\",\n          \"description\": \"The type of the parameter\",\n          \"enum\": [\n            \"string\",\n            \"number\",\n            \"integer\",\n            \"boolean\",\n            \"array\",\n            \"object\",\n            \"null\",\n            \"any\"\n          ]\n        },\n        \"required\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether the parameter is required\",\n          \"default\": false\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the parameter\"\n        },\n        \"default\": {\n          \"description\": \"The default value for the parameter\"\n        },\n        \"enum\": {\n          \"type\": \"array\",\n          \"description\": \"The allowed values for the parameter\"\n        },\n        \"minimum\": {\n          \"type\": \"number\",\n          \"description\": \"The minimum value for the parameter\"\n        },\n        \"maximum\": {\n          \"type\": \"number\",\n          \"description\": \"The maximum value for the parameter\"\n        },\n        \"minLength\": {\n          \"type\": \"integer\",\n          \"description\": \"The minimum length for the parameter\",\n          \"minimum\": 0\n        },\n        \"maxLength\": {\n          \"type\": \"integer\",\n          \"description\": \"The maximum length for the parameter\",\n          \"minimum\": 0\n        },\n        \"pattern\": {\n          \"type\": \"string\",\n          \"description\": \"The pattern for the parameter\",\n          \"format\": \"regex\"\n        },\n        \"format\": {\n          \"type\": \"string\",\n          \"description\": \"The format for the parameter\",\n          \"enum\": [\n            \"date\",\n            \"date-time\",\n            \"email\",\n            \"hostname\",\n            \"ipv4\",\n            \"ipv6\",\n            \"uri\",\n            \"uri-reference\",\n            \"uuid\"\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"specification/appendix/#42-agentsjson-schema","title":"4.2 <code>agents.json</code> Schema","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"agents.json\",\n  \"description\": \"A UIM Protocol agents.json file\",\n  \"type\": \"object\",\n  \"required\": [\n    \"service-info\",\n    \"intents\",\n    \"uim-public-key\",\n    \"uim-policy-file\"\n  ],\n  \"properties\": {\n    \"service-info\": {\n      \"type\": \"object\",\n      \"description\": \"Information about the service\",\n      \"required\": [\n        \"name\",\n        \"description\",\n        \"service_url\"\n      ],\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the service\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the service\"\n        },\n        \"service_url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL of the service\",\n          \"format\": \"uri\"\n        },\n        \"service_logo_url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL of the service's logo\",\n          \"format\": \"uri\"\n        },\n        \"service_terms_of_service_url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL of the service's terms of service\",\n          \"format\": \"uri\"\n        },\n        \"service_privacy_policy_url\": {\n          \"type\": \"string\",\n          \"description\": \"The URL of the service's privacy policy\",\n          \"format\": \"uri\"\n        }\n      }\n    },\n    \"intents\": {\n      \"type\": \"array\",\n      \"description\": \"The intents provided by the service\",\n      \"items\": {\n        \"$ref\": \"#/definitions/intent\"\n      }\n    },\n    \"uim-public-key\": {\n      \"type\": \"string\",\n      \"description\": \"The public key of the service\"\n    },\n    \"uim-policy-file\": {\n      \"type\": \"string\",\n      \"description\": \"The URL of the service's policy file\",\n      \"format\": \"uri\"\n    },\n    \"uim-api-discovery\": {\n      \"type\": \"string\",\n      \"description\": \"The URL of the service's API discovery endpoint\",\n      \"format\": \"uri\"\n    },\n    \"uim-compliance\": {\n      \"type\": \"object\",\n      \"description\": \"Compliance information for the service\",\n      \"properties\": {\n        \"standards\": {\n          \"type\": \"array\",\n          \"description\": \"The compliance standards the service adheres to\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"regional-compliance\": {\n          \"type\": \"object\",\n          \"description\": \"Region-specific compliance information\",\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          }\n        },\n        \"notes\": {\n          \"type\": \"string\",\n          \"description\": \"Additional compliance notes\"\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"intent\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"intent_uid\",\n        \"intent_name\",\n        \"description\",\n        \"input_parameters\",\n        \"output_parameters\",\n        \"endpoint\"\n      ],\n      \"properties\": {\n        \"intent_uid\": {\n          \"type\": \"string\",\n          \"description\": \"The unique identifier for the intent\",\n          \"pattern\": \"^[a-zA-Z0-9.-]+:[a-z0-9-]+:v[0-9]+(\\\\.[0-9]+)*$\"\n        },\n        \"intent_name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the intent\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the intent\"\n        },\n        \"input_parameters\": {\n          \"type\": \"array\",\n          \"description\": \"The input parameters for the intent\",\n          \"items\": {\n            \"$ref\": \"#/definitions/parameter\"\n          }\n        },\n        \"output_parameters\": {\n          \"type\": \"array\",\n          \"description\": \"The output parameters for the intent\",\n          \"items\": {\n            \"$ref\": \"#/definitions/parameter\"\n          }\n        },\n        \"endpoint\": {\n          \"type\": \"object\",\n          \"description\": \"The endpoint for the intent\",\n          \"required\": [\n            \"url\",\n            \"method\",\n            \"content_type\"\n          ],\n          \"properties\": {\n            \"url\": {\n              \"type\": \"string\",\n              \"description\": \"The URL for the intent\",\n              \"format\": \"uri\"\n            },\n            \"method\": {\n              \"type\": \"string\",\n              \"description\": \"The HTTP method for the intent\",\n              \"enum\": [\n                \"GET\",\n                \"POST\",\n                \"PUT\",\n                \"DELETE\",\n                \"PATCH\"\n              ]\n            },\n            \"content_type\": {\n              \"type\": \"string\",\n              \"description\": \"The content type for the intent\",\n              \"default\": \"application/json\"\n            }\n          }\n        },\n        \"tags\": {\n          \"type\": \"array\",\n          \"description\": \"Tags for the intent\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"parameter\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"name\",\n        \"type\"\n      ],\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\",\n          \"description\": \"The name of the parameter\"\n        },\n        \"type\": {\n          \"type\": \"string\",\n          \"description\": \"The type of the parameter\",\n          \"enum\": [\n            \"string\",\n            \"number\",\n            \"integer\",\n            \"boolean\",\n            \"array\",\n            \"object\",\n            \"null\",\n            \"any\"\n          ]\n        },\n        \"required\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether the parameter is required\",\n          \"default\": false\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the parameter\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"specification/appendix/#5-future-directions","title":"5. Future Directions","text":"<p>The UIM Protocol is an evolving standard, and several areas are being explored for future development:</p>"},{"location":"specification/appendix/#51-enhanced-discovery-mechanisms","title":"5.1 Enhanced Discovery Mechanisms","text":"<ul> <li>Federated Discovery: Enabling discovery across multiple repositories or networks.</li> <li>Semantic Discovery: Using semantic technologies to improve intent discovery and matching.</li> <li>Context-Aware Discovery: Taking into account the user's context when discovering intents.</li> </ul>"},{"location":"specification/appendix/#52-advanced-policy-management","title":"5.2 Advanced Policy Management","text":"<ul> <li>Dynamic Policies: Policies that can adapt based on context, usage patterns, or other factors.</li> <li>Policy Negotiation: Enabling AI agents and web services to negotiate policy terms.</li> <li>Policy Federation: Allowing policies to be shared and reused across services.</li> </ul>"},{"location":"specification/appendix/#53-interoperability","title":"5.3 Interoperability","text":"<ul> <li>Cross-Protocol Bridges: Enabling interoperability with other protocols and standards.</li> <li>Legacy System Integration: Providing mechanisms to integrate with legacy systems.</li> <li>Multi-Modal Interactions: Supporting interactions beyond HTTP, such as WebSockets, gRPC, or GraphQL.</li> </ul>"},{"location":"specification/appendix/#54-security-and-privacy-enhancements","title":"5.4 Security and Privacy Enhancements","text":"<ul> <li>Zero-Knowledge Proofs: Enabling verification without revealing sensitive information.</li> <li>Differential Privacy: Protecting user privacy while still allowing useful data analysis.</li> <li>Decentralized Identity: Integrating with decentralized identity systems.</li> </ul>"},{"location":"specification/appendix/#55-standardization","title":"5.5 Standardization","text":"<ul> <li>Formal Standardization: Working towards formal standardization through organizations like W3C or IETF.</li> <li>Reference Implementations: Developing reference implementations in multiple programming languages.</li> <li>Compliance Testing: Creating tools and frameworks for testing compliance with the UIM Protocol.</li> </ul>"},{"location":"specification/appendix/#6-acknowledgments","title":"6. Acknowledgments","text":"<p>The UIM Protocol is the result of collaborative efforts from many individuals and organizations. We would like to acknowledge the contributions of:</p> <ul> <li>The UIM Protocol Working Group</li> <li>The Open</li> </ul>"},{"location":"specification/architecture/","title":"Architecture","text":"<p>The UIM Protocol supports three architectural models for implementing the interaction between AI agents and web services: Centralized, Decentralized, and Hybrid. Each model has its own advantages, trade-offs, and use cases. This section provides a detailed explanation of each architecture model.</p>"},{"location":"specification/architecture/#1-centralized-architecture","title":"1. Centralized Architecture","text":"<p>The Centralized Architecture, also known as the Man-in-the-Middle Approach, serves as an intermediary system that manages all interactions between AI agents and web services. This model centralizes the registration, discovery, execution, and policy management of intents, offering a streamlined and unified platform that simplifies integrations and ensures consistency across all interactions.</p> <p></p>"},{"location":"specification/architecture/#11-key-components","title":"1.1 Key Components","text":"<ol> <li>Central Repository:</li> <li>Acts as the main hub for all intent data, storing information from multiple web services in a single, accessible location</li> <li> <p>Ensures that AI agents have a streamlined path to discovering and executing intents</p> </li> <li> <p>Service Management APIs:</p> </li> <li>Facilitate the registration, updating, and removal of intents by web services</li> <li> <p>Ensure that the central repository always contains current data</p> </li> <li> <p>Discovery and Execution APIs:</p> </li> <li>Enable AI agents to find available intents and perform actions based on the information in the central repository</li> <li> <p>Standardize the interaction process, making it easy for AI agents to access a wide range of services through a single interface</p> </li> <li> <p>Centralized PAT Management:</p> </li> <li>Manages the issuance, validation, and enforcement of Policy Adherence Tokens</li> <li>Ensures secure and compliant interactions between AI agents and web services</li> </ol>"},{"location":"specification/architecture/#12-workflow","title":"1.2 Workflow","text":"<ol> <li>Service Registration:</li> <li>Web services submit their available intents, including descriptions, parameters, and execution details, to the central repository through the Service Management APIs</li> <li> <p>Web services can update, modify, or remove their intents via the same management APIs</p> </li> <li> <p>Intent Discovery:</p> </li> <li>AI agents query the central repository's Discovery APIs to search for available intents based on their needs</li> <li> <p>The central system handles all requests and responses, reducing the need for AI agents to interact directly with each individual web service</p> </li> <li> <p>Policy Adherence and Security:</p> </li> <li>The central system issues PATs to AI agents after verifying compliance with the service's policies</li> <li> <p>These tokens encapsulate permissions, usage limits, and billing agreements, ensuring that only authorized interactions occur</p> </li> <li> <p>Execution of Intents:</p> </li> <li>Once an intent is discovered, the AI agent uses the Execution APIs provided by the central repository to perform the desired actions</li> <li> <p>The central system coordinates the request, forwards it to the appropriate web service, and manages the execution flow</p> </li> <li> <p>Error Handling and Adaptation:</p> </li> <li>The central system provides standardized error codes and recovery protocols</li> <li>If an intent fails to execute, the central system can offer alternative intents or suggest retries</li> </ol>"},{"location":"specification/architecture/#13-advantages","title":"1.3 Advantages","text":"<ul> <li>Unified Management: A single repository controls the discovery and execution of intents, providing a consistent interface for AI agents and web services</li> <li>Streamlined Compliance: Centralized management of Policy Adherence Tokens (PATs) ensures uniform application of security and billing rules</li> <li>Simplified Integration: Web services register their intents once with the central system, making them easily discoverable by AI agents without the need for multiple, separate integrations</li> <li>Standardized Data: Consistent intent formats and metadata facilitate easier integration and use by AI agents</li> <li>Enhanced Security: Centralized control over access, authentication, and rate limiting helps enforce security and compliance measures</li> <li>Reliable Monetization: A clear, controlled pathway for monetization, allowing the central system to manage payments and enforce billing policies</li> </ul>"},{"location":"specification/architecture/#14-disadvantages","title":"1.4 Disadvantages","text":"<ul> <li>Single Point of Failure: If the central repository encounters issues, all interactions are affected, posing a risk to system reliability</li> <li>Scalability Concerns: As the number of web services and AI agents grows, the central system may struggle to manage high volumes of requests efficiently</li> <li>Limited Autonomy: Web services must adhere to the central repository's rules and policies, limiting their autonomy and control over interactions</li> <li>Higher Onboarding Complexity for Web Services: Web services must integrate with the central repository, which may require additional development and maintenance resources</li> <li>Data Privacy: Centralized storage of intent data can raise concerns about data ownership, security, and privacy</li> </ul>"},{"location":"specification/architecture/#15-use-cases","title":"1.5 Use Cases","text":"<ul> <li>Financial Services: Ideal for industries requiring strict compliance and security, such as banking, where a unified approach simplifies oversight and reduces risks</li> <li>E-commerce Platforms: Provides a standardized method for product searches, inventory management, and automated transactions</li> <li>Customer Service Automation: Streamlines the integration of multiple support services, allowing AI agents to access a broad range of helpdesk intents from a single point of contact</li> </ul>"},{"location":"specification/architecture/#2-decentralized-architecture","title":"2. Decentralized Architecture","text":"<p>The Decentralized Architecture empowers AI agents to autonomously discover, interact with, and execute actions on web services without relying on a centralized intermediary. Each web service independently manages its own intents, publishing relevant information through DNS TXT records and <code>agents.json</code> files.</p> <p></p>"},{"location":"specification/architecture/#21-key-components","title":"2.1 Key Components","text":"<ol> <li>DNS TXT Records and <code>agents.json</code> Files:</li> <li>Serve as self-publishing mechanisms for web services to expose information about their intents, discovery endpoints, security protocols, and rate limits</li> <li> <p>Web services include specific DNS TXT records that link to the <code>agents.json</code> file</p> </li> <li> <p>Intent Discovery APIs:</p> </li> <li>Hosted by individual web services and provide AI agents with a way to query and retrieve intent data</li> <li> <p>Each service can customize its discovery API, offering intents tailored to its capabilities and user needs</p> </li> <li> <p>Decentralized PAT Management:</p> </li> <li>Each service issues its own tokens based on predefined policies, giving them control over who can execute their intents</li> <li>AI agents must request PATs by contacting the policy endpoint outlined in the <code>agents.json</code> file</li> </ol>"},{"location":"specification/architecture/#22-workflow","title":"2.2 Workflow","text":"<ol> <li>Crawling and Discovery:</li> <li>Each web service publishes information about its available intents, discovery endpoints, and policy adherence requirements using DNS TXT records and <code>agents.json</code> files</li> <li> <p>AI agents autonomously crawl these records to identify discovery endpoints and other relevant details</p> </li> <li> <p>Intent Retrieval:</p> </li> <li>Once the AI agent has identified a discovery endpoint from the <code>agents.json</code> file, it queries the endpoint to retrieve the list of available intents</li> <li> <p>The AI agent collects information about each intent, including required parameters, expected responses, rate limits, and any associated costs</p> </li> <li> <p>Policy Adherence and Security:</p> </li> <li>Each web service manages its own Policy Adherence Tokens (PATs), which are issued to AI agents based on their compliance with specified policies</li> <li> <p>AI agents must request a PAT from the web service's policy endpoint, specifying the intents they intend to use and adhering to the service's access rules</p> </li> <li> <p>Execution of Intents:</p> </li> <li>With the required PAT and intent information, AI agents send execution requests directly to the web service's endpoint</li> <li> <p>The web service processes the request, validates the PAT, and returns the desired results or actions</p> </li> <li> <p>Error Handling and Adaptation:</p> </li> <li>If an intent is unavailable or a service denies a request, AI agents can dynamically adapt by querying other available services or adjusting their parameters</li> </ol>"},{"location":"specification/architecture/#23-advantages","title":"2.3 Advantages","text":"<ul> <li>Direct Interaction: AI agents interact directly with web services, discovering and executing intents without the need for a central repository</li> <li>Scalability and Resilience: By distributing the workload across individual web services, the architecture naturally scales to accommodate large numbers of interactions, reducing the risk of a single point of failure</li> <li>Privacy and Autonomy: Web services retain control over their data and interaction policies, enhancing privacy and allowing for more customized interactions</li> <li>Flexibility and Adaptability: AI agents can quickly adapt to changes in web services without waiting for updates in a central repository</li> </ul>"},{"location":"specification/architecture/#24-disadvantages","title":"2.4 Disadvantages","text":"<ul> <li>Consistency Challenges: Each service manages its own rules and data, which can lead to inconsistencies in how intents are defined and executed</li> <li>Higher Onboarding Complexity for AI Agents: Requires agents to handle diverse sets of discovery and policy adherence rules, increasing the complexity of initial setup and maintenance</li> <li>Potential Data Silos: Since each service manages its own execution and PAT system, data generated from interactions can become siloed, making it harder to gather comprehensive analytics across the ecosystem</li> </ul>"},{"location":"specification/architecture/#25-use-cases","title":"2.5 Use Cases","text":"<ul> <li>Privacy and Security: Use cases where maintaining control over data and interactions is critical, such as healthcare, finance, and personal assistants</li> <li>IoT and Smart Environments: Ideal for managing numerous devices and services in a distributed network where autonomy and direct communication are essential</li> <li>Decentralized Finance (DeFi): Facilitates secure, direct interaction with financial services, maintaining privacy and compliance without relying on centralized intermediaries</li> </ul>"},{"location":"specification/architecture/#3-hybrid-approach","title":"3. Hybrid Approach","text":"<p>The Hybrid Approach combines centralized discovery with decentralized execution and PAT issuance, drawing parallels with how search engines like Google operate. In this model, the centralized discovery system provides AI agents with a standardized and comprehensive way to discover available intents across multiple web services, while the actual execution of intents is handled directly between the AI agents and web services.</p> <p></p>"},{"location":"specification/architecture/#31-key-components","title":"3.1 Key Components","text":"<ol> <li>Centralized Discovery System:</li> <li>Aggregates intent information from multiple web services</li> <li>Web services publish their intents using <code>agents.json</code> files or register through service management endpoints</li> <li> <p>AI agents query the centralized discovery system to find relevant intents</p> </li> <li> <p>Decentralized Execution:</p> </li> <li>After discovering intents, AI agents execute actions directly by interacting with the specific web service's execution endpoints</li> <li> <p>This decentralized execution maintains the service's control over how intents are performed</p> </li> <li> <p>Decentralized PAT Issuance:</p> </li> <li>Each web service independently manages its own PAT issuance, ensuring that security, compliance, and billing policies are locally enforced</li> <li>This allows web services to define and enforce their own rules, even as they participate in a broader, centrally-discovered ecosystem</li> </ol>"},{"location":"specification/architecture/#32-workflow","title":"3.2 Workflow","text":"<ol> <li>Centralized Discovery:</li> <li>Web services publish their available intents via <code>agents.json</code> files hosted on their domains or register them through centralized service management APIs</li> <li>The central discovery system periodically crawls web services, reading <code>agents.json</code> files and indexing the intents available</li> <li> <p>AI agents query the central discovery system to find intents relevant to the user's request</p> </li> <li> <p>Decentralized Execution:</p> </li> <li>Once an AI agent identifies an appropriate intent, it bypasses the central system and sends execution requests directly to the web service's execution endpoint</li> <li> <p>Each web service independently manages its execution rules, including parameter validation, rate limits, and error handling</p> </li> <li> <p>Decentralized PAT Issuance:</p> </li> <li>Web services independently issue and validate PATs, which are required for AI agents to execute intents</li> <li>The PAT encapsulates permissions, usage constraints, and billing terms tailored to each service's policies</li> </ol>"},{"location":"specification/architecture/#33-advantages","title":"3.3 Advantages","text":"<ul> <li>Enhanced Discovery with Local Execution Control: Centralized discovery simplifies the search process for AI agents, making it easier to find relevant intents across multiple services, while decentralized execution preserves the autonomy of web services</li> <li>Scalable and Resilient: By decoupling discovery from execution, this approach reduces the processing load on the central system and distributes it across web services, enhancing overall scalability and resilience</li> <li>Flexible Compliance: Decentralized PAT issuance allows each web service to enforce its own compliance and security protocols, adapting to specific regulatory requirements and minimizing centralized security risks</li> <li>Reduced Latency: Direct execution between AI agents and web services minimizes latency compared to a fully centralized execution model, improving response times and user experience</li> </ul>"},{"location":"specification/architecture/#34-disadvantages","title":"3.4 Disadvantages","text":"<ul> <li>Coordination Complexity: Maintaining consistency between the centralized discovery index and the decentralized execution points can be challenging</li> <li>Diverse Compliance Requirements: AI agents must navigate varying compliance rules across different services due to decentralized PAT issuance</li> <li>Potential Data Silos: Since each service manages its own execution and PAT system, data generated from interactions can become siloed</li> <li>Increased Onboarding Complexity for Web Services: Web services must manage both centralized discovery and decentralized execution, which can increase the complexity of onboarding and maintenance compared to a fully centralized model</li> </ul>"},{"location":"specification/architecture/#35-use-cases","title":"3.5 Use Cases","text":"<ul> <li>Enterprise Solutions: Ideal for enterprise environments where a centralized discovery system can provide a unified view of available services, while individual departments maintain control over their specific services</li> <li>Multi-Cloud Environments: Facilitates the discovery and execution of services across multiple cloud providers, maintaining the autonomy of each provider while providing a unified discovery experience</li> <li>Marketplace Platforms: Enables the creation of marketplaces where services can be discovered centrally, but executed directly, allowing for a diverse ecosystem of services with varying compliance and security requirements</li> </ul>"},{"location":"specification/architecture/#4-choosing-the-right-architecture","title":"4. Choosing the Right Architecture","text":"<p>When implementing the UIM Protocol, it's important to choose the architecture that best fits your specific requirements and constraints. Here are some factors to consider:</p>"},{"location":"specification/architecture/#41-centralized-architecture","title":"4.1 Centralized Architecture","text":"<p>Choose if: - You need strict control over all interactions - Consistency and standardization are top priorities - You want to simplify the integration process for AI agents - You need centralized monitoring and analytics - You want to implement a unified billing and monetization strategy</p>"},{"location":"specification/architecture/#42-decentralized-architecture","title":"4.2 Decentralized Architecture","text":"<p>Choose if: - Privacy and autonomy are critical - You need maximum scalability and resilience - You want to minimize dependencies on central systems - You need to support a diverse ecosystem of services with varying requirements - You want to give web services full control over their intents and policies</p>"},{"location":"specification/architecture/#43-hybrid-approach","title":"4.3 Hybrid Approach","text":"<p>Choose if: - You want to balance centralized discovery with decentralized execution - You need to support a diverse ecosystem of services while providing a unified discovery experience - You want to reduce the load on central systems while maintaining a centralized discovery mechanism - You need to support varying compliance and security requirements across different services - You want to provide a unified discovery experience while allowing web services to maintain control over execution and policy management</p>"},{"location":"specification/architecture/#5-implementation-considerations","title":"5. Implementation Considerations","text":"<p>Regardless of the architecture you choose, there are several important considerations to keep in mind:</p>"},{"location":"specification/architecture/#51-security","title":"5.1 Security","text":"<ul> <li>Implement robust authentication and authorization mechanisms</li> <li>Use HTTPS for all communications</li> <li>Implement rate limiting and other security measures to prevent abuse</li> <li>Regularly audit and update security measures</li> </ul>"},{"location":"specification/architecture/#52-scalability","title":"5.2 Scalability","text":"<ul> <li>Design for horizontal scalability</li> <li>Implement caching and other performance optimizations</li> <li>Consider the impact of increased load on the system</li> <li>Plan for future growth and expansion</li> </ul>"},{"location":"specification/architecture/#53-compliance","title":"5.3 Compliance","text":"<ul> <li>Ensure compliance with relevant regulations (e.g., GDPR, CCPA)</li> <li>Implement appropriate data protection measures</li> <li>Provide clear and transparent policies</li> <li>Regularly review and update compliance measures</li> </ul>"},{"location":"specification/architecture/#54-monitoring-and-analytics","title":"5.4 Monitoring and Analytics","text":"<ul> <li>Implement comprehensive monitoring and logging</li> <li>Collect and analyze metrics to identify trends and issues</li> <li>Set up alerts for potential problems</li> <li>Use analytics to improve the system over time</li> </ul>"},{"location":"specification/architecture/#55-documentation","title":"5.5 Documentation","text":"<ul> <li>Provide clear and comprehensive documentation for all components</li> <li>Include examples and tutorials to help users get started</li> <li>Keep documentation up to date with the latest changes</li> <li>Provide support channels for users who need help</li> </ul>"},{"location":"specification/architecture/#6-conclusion","title":"6. Conclusion","text":"<p>The UIM Protocol supports three architectural models: Centralized, Decentralized, and Hybrid. Each model has its own advantages, disadvantages, and use cases. By carefully considering your specific requirements and constraints, you can choose the architecture that best fits your needs and implement a successful UIM Protocol solution.</p>"},{"location":"specification/core-components/","title":"Core Components","text":"<p>The UIM Protocol consists of several core components that work together to enable seamless interaction between AI agents and web services. This section provides detailed information about each component, including their purpose, structure, and implementation.</p>"},{"location":"specification/core-components/#1-intents","title":"1. Intents","text":"<p>Intents are the fundamental building blocks of the UIM Protocol. They represent specific actions that an AI agent can perform on a web service, encapsulating all the necessary information to execute the action.</p>"},{"location":"specification/core-components/#11-intent-structure","title":"1.1 Intent Structure","text":"<p>Each intent includes the following components:</p> <ul> <li>Unique Intent Identifier (UID): A unique identifier that follows a specific format to ensure global uniqueness</li> <li>Name: A human-readable name describing the intent's purpose</li> <li>Description: A detailed explanation of what the intent does</li> <li>Input Parameters: The data required to execute the intent</li> <li>Output Parameters: The data returned when the intent is executed</li> <li>Endpoint: The URL where the intent can be executed</li> <li>Metadata: Additional information about the intent, such as tags, categories, and version</li> </ul>"},{"location":"specification/core-components/#12-unique-intent-identifier-uid-format","title":"1.2 Unique Intent Identifier (UID) Format","text":"<p>The UID follows a standardized format to ensure global uniqueness:</p> <pre><code>namespace:intent-name:version\n</code></pre> <p>Where: - namespace: Identifies the service provider (e.g., \"example.com\") - intent-name: Uniquely identifies the intent within the namespace using lowercase letters, numbers, and hyphens - version: Semantic version number (e.g., \"v1\", \"v2.1\")</p> <p>Example: <pre><code>example.com:search-products:v1\n</code></pre></p>"},{"location":"specification/core-components/#13-intent-metadata","title":"1.3 Intent Metadata","text":"<p>Intent metadata provides additional information about the intent, helping AI agents understand its purpose and how to use it. The metadata is typically provided in JSON format and includes:</p> <pre><code>{\n  \"intent_uid\": \"example.com:search-products:v1\",\n  \"intent_name\": \"SearchProducts\",\n  \"description\": \"Search for products based on criteria\",\n  \"input_parameters\": [\n    {\n      \"name\": \"query\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Search query string\"\n    },\n    {\n      \"name\": \"category\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Product category\"\n    },\n    {\n      \"name\": \"price_range\",\n      \"type\": \"string\",\n      \"required\": false,\n      \"description\": \"Price range (e.g., '10-100')\"\n    }\n  ],\n  \"output_parameters\": [\n    {\n      \"name\": \"products\",\n      \"type\": \"array\",\n      \"description\": \"List of matching products\"\n    },\n    {\n      \"name\": \"total_results\",\n      \"type\": \"integer\",\n      \"description\": \"Total number of matching products\"\n    }\n  ],\n  \"endpoint\": {\n    \"url\": \"https://api.example.com/products/search\",\n    \"method\": \"POST\",\n    \"content_type\": \"application/json\"\n  },\n  \"tags\": [\n    \"e-commerce\",\n    \"search\",\n    \"products\"\n  ],\n  \"category\": \"e-commerce\",\n  \"version\": \"v1\"\n}\n</code></pre>"},{"location":"specification/core-components/#14-intent-examples","title":"1.4 Intent Examples","text":"<p>Here are some examples of intents for different domains:</p>"},{"location":"specification/core-components/#e-commerce","title":"E-commerce","text":"<ul> <li>SearchProducts: Enables product searches based on various criteria</li> <li>GetProductDetails: Retrieves detailed information about a specific product</li> <li>PlaceOrder: Initiates and processes a purchase transaction</li> </ul>"},{"location":"specification/core-components/#travel","title":"Travel","text":"<ul> <li>SearchFlights: Searches for flights based on criteria like origin, destination, and dates</li> <li>BookFlight: Books a flight with specified details</li> <li>GetFlightStatus: Retrieves the status of a flight</li> </ul>"},{"location":"specification/core-components/#finance","title":"Finance","text":"<ul> <li>GetAccountBalance: Retrieves the balance of a specified account</li> <li>TransferFunds: Transfers funds between accounts</li> <li>GetTransactionHistory: Retrieves the transaction history for an account</li> </ul>"},{"location":"specification/core-components/#2-metadata-and-parameters","title":"2. Metadata and Parameters","text":"<p>Metadata and parameters provide the context and specifics needed to execute intents effectively. They serve as the blueprint for each intent, detailing its purpose and requirements.</p>"},{"location":"specification/core-components/#21-metadata","title":"2.1 Metadata","text":"<p>Metadata typically includes:</p> <ul> <li>Name: A unique identifier for the intent</li> <li>Description: A concise explanation of the intent's function</li> <li>Category: The type of action (e.g., e-commerce, finance, healthcare)</li> <li>Tags: Keywords that help categorize and discover the intent</li> <li>Version: The version of the intent, following semantic versioning principles</li> </ul>"},{"location":"specification/core-components/#22-parameters","title":"2.2 Parameters","text":"<p>Parameters specify the input required for the intent's execution and the expected output. They are defined with the following attributes:</p> <ul> <li>Name: The name of the parameter</li> <li>Type: The data type of the parameter (e.g., string, number, boolean, array, object)</li> <li>Required: Whether the parameter is required or optional</li> <li>Description: A description of the parameter and its purpose</li> <li>Default: The default value for the parameter (for optional parameters)</li> <li>Constraints: Any constraints on the parameter value (e.g., minimum, maximum, pattern)</li> </ul>"},{"location":"specification/core-components/#221-input-parameters","title":"2.2.1 Input Parameters","text":"<p>Input parameters specify the data that must be provided to execute the intent. For example, a 'SearchProducts' intent might have the following input parameters:</p> <ul> <li>query (string, required): The search term</li> <li>category (string, optional): The product category filter</li> <li>price_range (string, optional): The price range filter</li> <li>sort_by (string, optional): The sorting criteria</li> </ul>"},{"location":"specification/core-components/#222-output-parameters","title":"2.2.2 Output Parameters","text":"<p>Output parameters specify the data that will be returned when the intent is executed. For example, a 'SearchProducts' intent might have the following output parameters:</p> <ul> <li>products (array): A list of products matching the search criteria</li> <li>total_results (number): The total number of results found</li> </ul>"},{"location":"specification/core-components/#23-parameter-types","title":"2.3 Parameter Types","text":"<p>The UIM Protocol supports the following parameter types:</p> <ul> <li>string: A sequence of characters</li> <li>number: A numeric value (integer or floating-point)</li> <li>boolean: A true or false value</li> <li>array: An ordered collection of values</li> <li>object: A collection of key-value pairs</li> <li>null: A null value</li> <li>any: Any type of value</li> </ul>"},{"location":"specification/core-components/#24-parameter-constraints","title":"2.4 Parameter Constraints","text":"<p>Parameters can have constraints that limit the values they can accept. These constraints help ensure that the intent is executed with valid data. Common constraints include:</p> <ul> <li>minimum: The minimum value for a number</li> <li>maximum: The maximum value for a number</li> <li>minLength: The minimum length for a string</li> <li>maxLength: The maximum length for a string</li> <li>pattern: A regular expression that the string must match</li> <li>enum: A list of allowed values</li> <li>format: A specific format for the value (e.g., date, email, URI)</li> </ul>"},{"location":"specification/core-components/#3-the-execute-method","title":"3. The Execute Method","text":"<p>The execute method is the operational core of the UIM Protocol. It manages the actual execution of intents, ensuring smooth interaction between AI agents and web services.</p>"},{"location":"specification/core-components/#31-execute-method-workflow","title":"3.1 Execute Method Workflow","text":"<p>The execute method operates in four key stages:</p> <p></p>"},{"location":"specification/core-components/#311-input-validation","title":"3.1.1 Input Validation","text":"<p>Before executing an intent, the execute method validates that all required parameters are present and correctly formatted. This ensures that the intent can be executed successfully and reduces the likelihood of errors.</p> <p>The validation process includes: - Checking that all required parameters are provided - Verifying that parameter values match their specified types - Ensuring that parameter values meet any defined constraints - Validating the format of complex parameters (e.g., dates, email addresses)</p>"},{"location":"specification/core-components/#312-execution","title":"3.1.2 Execution","text":"<p>Once the input is validated, the execute method interacts with the web service's API to perform the requested action. This may involve making HTTP requests, processing responses, and handling errors.</p> <p>The execution process includes: - Constructing the appropriate HTTP request based on the intent's endpoint information - Including the necessary authentication and authorization headers - Sending the request to the web service - Receiving and processing the response</p>"},{"location":"specification/core-components/#313-response-formatting","title":"3.1.3 Response Formatting","text":"<p>After the intent is executed, the execute method formats the response according to the intent's output parameters. This ensures that the response is consistent and can be easily interpreted by the AI agent.</p> <p>The response formatting process includes: - Extracting the relevant data from the web service's response - Transforming the data to match the expected output parameter structure - Handling any data type conversions or transformations - Ensuring that all required output parameters are included</p>"},{"location":"specification/core-components/#314-error-handling","title":"3.1.4 Error Handling","text":"<p>If an error occurs during execution, the execute method provides meaningful feedback to the AI agent. This includes error codes, error messages, and suggestions for resolving the issue.</p> <p>The error handling process includes: - Detecting and categorizing errors (e.g., validation errors, execution errors, response errors) - Generating appropriate error messages and codes - Providing suggestions for resolving the error when possible - Ensuring that errors are communicated in a consistent format</p>"},{"location":"specification/core-components/#32-execute-method-api","title":"3.2 Execute Method API","text":"<p>The execute method is typically exposed as an API endpoint that AI agents can call to execute intents. The API endpoint accepts the following parameters:</p> <ul> <li>intent_uid (string, required): The unique identifier of the intent to execute</li> <li>parameters (object, required): The input parameters for the intent</li> </ul> <p>Example request:</p> <pre><code>POST /api/intents/execute HTTP/1.1\nHost: api.example.com\nContent-Type: application/json\nAuthorization: Bearer &lt;PAT&gt;\n\n{\n  \"intent_uid\": \"example.com:search-products:v1\",\n  \"parameters\": {\n    \"query\": \"laptop\",\n    \"category\": \"electronics\",\n    \"price_range\": \"1000-2000\"\n  }\n}\n</code></pre> <p>Example response:</p> <pre><code>HTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"products\": [\n    {\n      \"id\": \"123\",\n      \"name\": \"Gaming Laptop\",\n      \"price\": 1500,\n      \"category\": \"electronics\"\n    },\n    {\n      \"id\": \"456\",\n      \"name\": \"Business Laptop\",\n      \"price\": 1200,\n      \"category\": \"electronics\"\n    }\n  ],\n  \"total_results\": 2\n}\n</code></pre>"},{"location":"specification/core-components/#33-error-responses","title":"3.3 Error Responses","text":"<p>When an error occurs during execution, the execute method returns an error response with the following structure:</p> <pre><code>{\n  \"error\": {\n    \"code\": \"ERROR_CODE\",\n    \"message\": \"Descriptive error message\",\n    \"details\": {\n      \"additional\": \"context-specific information\"\n    }\n  }\n}\n</code></pre> <p>Common error codes include:</p> <ul> <li>INVALID_PARAMETER: One or more parameters are invalid or missing</li> <li>UNAUTHORIZED: The request is not authenticated or the authentication token is invalid</li> <li>FORBIDDEN: The client is authenticated but does not have permission to execute the intent</li> <li>NOT_FOUND: The requested intent or resource was not found</li> <li>INTERNAL_SERVER_ERROR: An unexpected error occurred on the server</li> </ul>"},{"location":"specification/core-components/#4-policy-adherence-tokens-pats","title":"4. Policy Adherence Tokens (PATs)","text":"<p>Policy Adherence Tokens (PATs) are digitally signed tokens that encapsulate permissions, usage limits, billing agreements, and compliance terms. They ensure secure and compliant interactions between AI agents and web services.</p>"},{"location":"specification/core-components/#41-pat-structure","title":"4.1 PAT Structure","text":"<p>PATs are implemented as JSON Web Tokens (JWTs) with the following claims:</p>"},{"location":"specification/core-components/#411-required-claims","title":"4.1.1 Required Claims","text":"<ul> <li>iss (Issuer): The service identifier that issued the token</li> <li>sub (Subject): The AI agent identifier that the token was issued to</li> <li>exp (Expiration Time): The time after which the token is no longer valid</li> <li>nbf (Not Before): The time before which the token is not valid</li> <li>jti (JWT ID): A unique identifier for the token</li> <li>scope: An array of permitted intents and operations</li> </ul>"},{"location":"specification/core-components/#412-additional-claims","title":"4.1.2 Additional Claims","text":"<ul> <li>pol (Policy): A reference to the policy that the token adheres to</li> <li>lmt (Limits): Rate limiting parameters and other usage constraints</li> </ul> <p>Example PAT structure:</p> <pre><code>{\n  \"iss\": \"example.com\",\n  \"sub\": \"ai-agent-123\",\n  \"exp\": 1609459200,\n  \"nbf\": 1609372800,\n  \"jti\": \"abc123\",\n  \"scope\": [\"example.com:search-products:v1:execute\"],\n  \"pol\": \"https://example.com/policy.json\",\n  \"lmt\": {\n    \"rate\": 100,\n    \"period\": 3600\n  }\n}\n</code></pre>"},{"location":"specification/core-components/#42-pat-issuance-workflow","title":"4.2 PAT Issuance Workflow","text":"<p>The PAT issuance workflow involves the following steps:</p> <ol> <li>Policy Retrieval and Agreement:</li> <li>AI agent retrieves the policy from the specified endpoint</li> <li> <p>AI agent digitally signs the policy using its private key and sends it to the web service alongside its public key to request a PAT</p> </li> <li> <p>PAT Issuance:</p> </li> <li>Web service verifies the AI agent's signature and agreement</li> <li>Web service issues a PAT, which includes the agreed policy details, permissions, obligations, and a validity period</li> <li> <p>The PAT is digitally signed by the web service</p> </li> <li> <p>Using PAT in Requests:</p> </li> <li>AI agent includes the PAT in the <code>Authorization</code> header of each request</li> <li>Web service verifies the PAT's signature and validity before processing the request</li> </ol>"},{"location":"specification/core-components/#43-pat-verification","title":"4.3 PAT Verification","text":"<p>When a web service receives a request with a PAT, it performs the following verification steps:</p> <ol> <li>Signature Verification: Verifies that the PAT was signed by the web service and has not been tampered with</li> <li>Expiration Check: Ensures that the PAT has not expired</li> <li>Scope Verification: Confirms that the PAT grants permission to execute the requested intent</li> <li>Rate Limit Check: Ensures that the AI agent has not exceeded the rate limits specified in the PAT</li> </ol>"},{"location":"specification/core-components/#44-pat-renewal","title":"4.4 PAT Renewal","text":"<p>PATs have a limited validity period and must be renewed periodically. The renewal process typically involves:</p> <ol> <li>Renewal Request: AI agent sends a renewal request to the web service, including the current PAT</li> <li>Policy Verification: Web service verifies that the AI agent still adheres to the policy</li> <li>New PAT Issuance: Web service issues a new PAT with an updated expiration time</li> </ol>"},{"location":"specification/core-components/#45-pat-revocation","title":"4.5 PAT Revocation","text":"<p>In some cases, a web service may need to revoke a PAT before it expires. This can happen if:</p> <ul> <li>The AI agent violates the policy</li> <li>The policy changes and requires re-agreement</li> <li>The web service detects suspicious activity</li> </ul> <p>When a PAT is revoked, the web service adds it to a revocation list and rejects any requests that include the revoked PAT.</p>"},{"location":"specification/core-components/#5-discovery-mechanisms","title":"5. Discovery Mechanisms","text":"<p>The UIM Protocol provides mechanisms for AI agents to discover available intents and services. These mechanisms include DNS TXT records and <code>agents.json</code> files.</p>"},{"location":"specification/core-components/#51-dns-txt-records","title":"5.1 DNS TXT Records","text":"<p>Services publish discovery information using DNS TXT records. Each record contains one of the following fields:</p> <ul> <li> <p>uim-agents-file: URL of the service description file (REQUIRED)   Example: \"uim-agents-file=https://example.com/agents.json\"</p> </li> <li> <p>uim-api-discovery: URL of the discovery endpoint (OPTIONAL)   Example: \"uim-api-discovery=https://api.example.com/discovery\"</p> </li> <li> <p>uim-policy-file: URL of the policy file (REQUIRED)   Example: \"uim-policy-file=https://example.com/policy.json\"</p> </li> <li> <p>uim-license: The UIM license for the service (OPTIONAL)   Example: \"uim-license=https://uimprotocol.com/licenses/uim-by-nc-v1.0\"</p> </li> </ul>"},{"location":"specification/core-components/#52-agentsjson-files","title":"5.2 <code>agents.json</code> Files","text":"<p><code>agents.json</code> files contain detailed information about the service and available intents. They use the following structure:</p> <pre><code>{\n  \"service-info\": {\n    \"name\": \"Example Service\",\n    \"description\": \"Service description\",\n    \"service_url\": \"https://api.example.com\",\n    \"service_logo_url\": \"https://example.com/logo.png\",\n    \"service_terms_of_service_url\": \"https://example.com/terms\",\n    \"service_privacy_policy_url\": \"https://example.com/privacy\"\n  },\n  \"intents\": [\n    {\n      \"intent_uid\": \"example.com:search-products:v1\",\n      \"intent_name\": \"SearchProducts\",\n      \"description\": \"Search for products based on criteria\",\n      \"input_parameters\": [...],\n      \"output_parameters\": [...],\n      \"endpoint\": {...},\n      \"tags\": [...]\n    }\n  ],\n  \"uim-public-key\": \"base64-encoded-public-key\",\n  \"uim-policy-file\": \"https://example.com/policy.json\",\n  \"uim-api-discovery\": \"https://api.example.com/discovery\",\n  \"uim-compliance\": {\n    \"standards\": [\"ISO27001\", \"GDPR\"],\n    \"regional-compliance\": {\n      \"EU\": \"GDPR\",\n      \"US-CA\": \"CCPA\"\n    },\n    \"notes\": \"Data is encrypted in transit and at rest.\"\n  },\n  \"uim-license\": \"https://uimprotocol.com/licenses/uim-by-nc-v1.0\"\n}\n</code></pre>"},{"location":"specification/core-components/#53-discovery-process","title":"5.3 Discovery Process","text":"<p>The discovery process typically follows these steps:</p> <ol> <li>DNS Query: AI agent queries the DNS TXT records for the service domain to find the <code>agents.json</code> file URL or discovery endpoint</li> <li>Retrieve <code>agents.json</code>: AI agent retrieves the <code>agents.json</code> file from the specified URL</li> <li>Parse Intent Information: AI agent parses the intent information from the <code>agents.json</code> file</li> <li>Query Discovery Endpoint: If a discovery endpoint is specified, AI agent can query it for more detailed information about available intents</li> </ol>"},{"location":"specification/core-components/#54-intent-search","title":"5.4 Intent Search","text":"<p>AI agents can search for intents based on various criteria, such as:</p> <ul> <li>Intent UID: Search for a specific intent by its unique identifier</li> <li>Intent Name: Search for intents with a specific name</li> <li>Tags: Search for intents with specific tags</li> <li>Category: Search for intents in a specific category</li> <li>Description: Search for intents whose description contains specific keywords</li> </ul> <p>Example search request:</p> <pre><code>GET /api/intents/search?tags=e-commerce,search&amp;category=shopping HTTP/1.1\nHost: api.example.com\n</code></pre> <p>Example search response:</p> <pre><code>{\n  \"intents\": [\n    {\n      \"intent_uid\": \"example.com:search-products:v1\",\n      \"intent_name\": \"SearchProducts\",\n      \"description\": \"Search for products based on criteria\",\n      \"input_parameters\": [...],\n      \"output_parameters\": [...],\n      \"endpoint\": {...},\n      \"tags\": [\"e-commerce\", \"search\", \"products\"],\n      \"category\": \"shopping\"\n    }\n  ]\n}\n</code></pre>"},{"location":"specification/core-components/#6-integration-with-open-digital-rights-language-odrl","title":"6. Integration with Open Digital Rights Language (ODRL)","text":"<p>The UIM Protocol integrates with the Open Digital Rights Language (ODRL) Information Model 2.2 to define and manage permissions, prohibitions, and obligations. This integration enhances the security, compliance, and efficiency of interactions between AI agents and web services.</p>"},{"location":"specification/core-components/#61-key-odrl-concepts","title":"6.1 Key ODRL Concepts","text":"<ul> <li>Policy: Represents the agreement between AI agents and web services, detailing permissions, prohibitions, and obligations</li> <li>Permission: Specifies allowed actions for AI agents</li> <li>Prohibition: Specifies actions that AI agents are not allowed to perform</li> <li>Obligation: Specifies actions that AI agents must perform under certain conditions</li> <li>Asset: The resource or service the policy applies to</li> <li>Party: The entities involved in the policy (e.g., AI agents and web services)</li> </ul>"},{"location":"specification/core-components/#62-example-odrl-policy-for-uim-integration","title":"6.2 Example ODRL Policy for UIM Integration","text":"<pre><code>{\n  \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n  \"uid\": \"http://example.com/policy/12345\",\n  \"type\": \"Set\",\n  \"profile\": \"http://example.com/profile/odrl-uim\",\n  \"permission\": [\n    {\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": \"execute\",\n      \"constraint\": [\n        {\n          \"leftOperand\": \"http://example.com/vocab/rateLimit\",\n          \"operator\": \"lte\",\n          \"rightOperand\": 1000,\n          \"unit\": \"http://example.com/vocab/hour\"\n        }\n      ],\n      \"duty\": [\n        {\n          \"action\": \"pay\",\n          \"target\": \"http://example.com/vocab/intentPrice\",\n          \"amount\": 0.01,\n          \"unit\": \"http://example.com/vocab/USD\"\n        }\n      ]\n    }\n  ],\n  \"prohibition\": [\n    {\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": \"exceedRateLimit\"\n    }\n  ],\n  \"obligation\": [\n    {\n      \"action\": \"signPayload\",\n      \"assignee\": \"http://example.com/ai-agent/1\",\n      \"target\": \"http://example.com/vocab/payload\",\n      \"constraint\": [\n        {\n          \"leftOperand\": \"http://example.com/vocab/publicKey\",\n          \"operator\": \"use\",\n          \"rightOperand\": \"MIIBIjANBgkqh...\"\n        }\n      ]\n    }\n  ],\n  \"party\": [\n    {\n      \"function\": \"assigner\",\n      \"identifier\": \"http://example.com/web-service/1\"\n    },\n    {\n      \"function\": \"assignee\",\n      \"identifier\": \"http://example.com/ai-agent/1\"\n    }\n  ],\n  \"asset\": \"http://example.com/api/intents\"\n}\n</code></pre>"},{"location":"specification/core-components/#63-benefits-of-odrl-integration","title":"6.3 Benefits of ODRL Integration","text":"<ul> <li>Standardization of Policies: ODRL provides a standardized way to define permissions, prohibitions, and obligations</li> <li>Flexibility and Interoperability: ODRL's flexible framework allows it to be adapted to various use cases and requirements</li> <li>Clear and Verifiable Terms: By defining policies in ODRL, web services can provide clear, precise, and verifiable terms of service</li> <li>Enhanced Security and Compliance: ODRL allows the definition of detailed security and compliance requirements</li> <li>Automated Enforcement: ODRL policies can be enforced automatically by the UIM protocol</li> </ul>"},{"location":"specification/core-components/#7-summary","title":"7. Summary","text":"<p>The core components of the UIM Protocol\u2014Intents, Metadata and Parameters, the Execute Method, Policy Adherence Tokens, and Discovery Mechanisms\u2014work together to create a standardized framework for AI agents to interact with web services. By understanding these components, developers can implement the protocol in their applications and enable seamless, efficient interactions between AI agents and web services.</p>"},{"location":"specification/key-concepts/","title":"Key Concepts","text":"<p>The UIM Protocol is built on three fundamental concepts: Intents, Metadata and Parameters, and the Execute Method. Each plays a crucial role in facilitating efficient communication between AI agents and web services.</p>"},{"location":"specification/key-concepts/#intents","title":"Intents","text":"<p>Intents are the core building blocks of the UIM Protocol. They represent specific, predefined actions that an AI agent can perform on a web service. By standardizing these actions, UIM creates a common language for interaction, significantly reducing complexity and enhancing efficiency.</p> <p>In practical terms, an intent is analogous to a function call in programming. It encapsulates a discrete task, complete with the necessary information to execute it.</p>"},{"location":"specification/key-concepts/#intent-structure","title":"Intent Structure","text":"<p>Each intent MUST include:</p> <ul> <li>Identifier: A unique identifier following the format specified in the Unique Intent Identifier (UID) Format.</li> <li>Name: A human-readable name describing the intent's purpose.</li> <li>Description: A detailed explanation of the intent's functionality and usage.</li> <li>Parameters: Input and output parameter definitions, including types and constraints.</li> <li>Endpoint: Information required to execute the intent.</li> <li>Metadata: Additional intent properties as defined in the Intent Metadata section.</li> </ul>"},{"location":"specification/key-concepts/#unique-intent-identifier-uid-format","title":"Unique Intent Identifier (UID) Format","text":"<p>Intent identifiers MUST follow the format:</p> <pre><code>namespace:intent-name:version\n</code></pre> <p>Where:</p> <ul> <li>namespace: Identifies the service provider (e.g., \"example.com\")</li> <li>intent-name: Uniquely identifies the intent within the namespace using lowercase letters, numbers, and hyphens</li> <li>version: Semantic version number (e.g., \"v1\", \"v2.1\")</li> </ul> <p>Example: <pre><code>example.com:search-products:v1\n</code></pre></p>"},{"location":"specification/key-concepts/#intent-metadata","title":"Intent Metadata","text":"<p>Intent metadata MUST use the following JSON structure:</p> <pre><code>{\n  \"intent_uid\": \"example.com:search-products:v1\",\n  \"intent_name\": \"SearchProducts\",\n  \"description\": \"Search for products based on criteria\",\n  \"input_parameters\": [\n    {\n      \"name\": \"query\",\n      \"type\": \"string\",\n      \"required\": true,\n      \"description\": \"Search query string\"\n    }\n  ],\n  \"output_parameters\": [\n    {\n      \"name\": \"products\",\n      \"type\": \"array\",\n      \"description\": \"List of matching products\"\n    }\n  ],\n  \"endpoint\": {\n    \"url\": \"https://api.example.com/products/search\",\n    \"method\": \"POST\",\n    \"content_type\": \"application/json\"\n  },\n  \"tags\": [\n    \"e-commerce\",\n    \"search\",\n    \"products\"\n  ]\n}\n</code></pre>"},{"location":"specification/key-concepts/#intent-examples","title":"Intent Examples","text":"<p>Here are some examples of intents for different domains:</p>"},{"location":"specification/key-concepts/#e-commerce","title":"E-commerce","text":"<ul> <li>SearchProducts: Enables product searches based on various criteria</li> <li>GetProductDetails: Retrieves detailed information about a specific product</li> <li>PlaceOrder: Initiates and processes a purchase transaction</li> </ul>"},{"location":"specification/key-concepts/#travel","title":"Travel","text":"<ul> <li>SearchFlights: Searches for flights based on criteria like origin, destination, and dates</li> <li>BookFlight: Books a flight with specified details</li> <li>GetFlightStatus: Retrieves the status of a flight</li> </ul>"},{"location":"specification/key-concepts/#finance","title":"Finance","text":"<ul> <li>GetAccountBalance: Retrieves the balance of a specified account</li> <li>TransferFunds: Transfers funds between accounts</li> <li>GetTransactionHistory: Retrieves the transaction history for an account</li> </ul>"},{"location":"specification/key-concepts/#metadata-and-parameters","title":"Metadata and Parameters","text":"<p>Metadata and parameters provide the context and specifics needed to execute intents effectively. They serve as the blueprint for each intent, detailing its purpose and requirements.</p>"},{"location":"specification/key-concepts/#metadata","title":"Metadata","text":"<p>Metadata typically includes:</p> <ul> <li>Name: A unique identifier for the intent</li> <li>Description: A concise explanation of the intent's function</li> <li>Category: The type of action (e.g., e-commerce, finance, healthcare)</li> <li>Tags: Keywords that help categorize and discover the intent</li> </ul>"},{"location":"specification/key-concepts/#parameters","title":"Parameters","text":"<p>Parameters specify the input required for the intent's execution and the expected output. They are defined with the following attributes:</p> <ul> <li>Name: The name of the parameter</li> <li>Type: The data type of the parameter (e.g., string, number, boolean, array, object)</li> <li>Required: Whether the parameter is required or optional</li> <li>Description: A description of the parameter and its purpose</li> <li>Default: The default value for the parameter (for optional parameters)</li> <li>Constraints: Any constraints on the parameter value (e.g., minimum, maximum, pattern)</li> </ul>"},{"location":"specification/key-concepts/#input-parameters","title":"Input Parameters","text":"<p>Input parameters specify the data that must be provided to execute the intent. For example, a 'SearchProducts' intent might have the following input parameters:</p> <ul> <li>query (string, required): The search term</li> <li>category (string, optional): The product category filter</li> <li>price_range (string, optional): The price range filter</li> <li>sort_by (string, optional): The sorting criteria</li> </ul>"},{"location":"specification/key-concepts/#output-parameters","title":"Output Parameters","text":"<p>Output parameters specify the data that will be returned when the intent is executed. For example, a 'SearchProducts' intent might have the following output parameters:</p> <ul> <li>products (array): A list of products matching the search criteria</li> <li>total_results (number): The total number of results found</li> </ul>"},{"location":"specification/key-concepts/#the-execute-method","title":"The Execute Method","text":"<p>The execute method is the operational core of the UIM Protocol. It manages the actual execution of intents, ensuring smooth interaction between AI agents and web services. The method operates in four key stages:</p> <p></p>"},{"location":"specification/key-concepts/#1-input-validation","title":"1. Input Validation","text":"<p>Before executing an intent, the execute method validates that all required parameters are present and correctly formatted. This ensures that the intent can be executed successfully and reduces the likelihood of errors.</p>"},{"location":"specification/key-concepts/#2-execution","title":"2. Execution","text":"<p>Once the input is validated, the execute method interacts with the web service's API to perform the requested action. This may involve making HTTP requests, processing responses, and handling errors.</p>"},{"location":"specification/key-concepts/#3-response-formatting","title":"3. Response Formatting","text":"<p>After the intent is executed, the execute method formats the response according to the intent's output parameters. This ensures that the response is consistent and can be easily interpreted by the AI agent.</p>"},{"location":"specification/key-concepts/#4-error-handling","title":"4. Error Handling","text":"<p>If an error occurs during execution, the execute method provides meaningful feedback to the AI agent. This includes error codes, error messages, and suggestions for resolving the issue.</p>"},{"location":"specification/key-concepts/#policy-adherence-tokens-pats","title":"Policy Adherence Tokens (PATs)","text":"<p>Policy Adherence Tokens (PATs) are digitally signed tokens that encapsulate permissions, usage limits, billing agreements, and compliance terms. They ensure secure and compliant interactions between AI agents and web services.</p>"},{"location":"specification/key-concepts/#pat-structure","title":"PAT Structure","text":"<p>PATs MUST be implemented as JSON Web Tokens (JWTs) with the following claims:</p>"},{"location":"specification/key-concepts/#required-claims","title":"Required Claims","text":"<ul> <li>iss: Token issuer (the service identifier)</li> <li>sub: Subject (the AI agent identifier)</li> <li>exp: Expiration time</li> <li>nbf: Not before time</li> <li>jti: JWT ID (unique identifier for the token)</li> <li>scope: Array of permitted intents and operations</li> </ul>"},{"location":"specification/key-concepts/#additional-claims","title":"Additional Claims","text":"<ul> <li>pol: Policy reference URL</li> <li>lmt: Rate limiting parameters</li> </ul>"},{"location":"specification/key-concepts/#pat-issuance-workflow","title":"PAT Issuance Workflow","text":"<ol> <li>Policy Retrieval and Agreement:</li> <li>AI agent retrieves the policy from the specified endpoint.</li> <li> <p>AI agent digitally signs the policy using its private key and sends it to the web service alongside its public key to request a PAT.</p> </li> <li> <p>PAT Issuance:</p> </li> <li>Web service verifies the AI agent's signature and agreement.</li> <li>Web service issues a PAT, which includes the agreed policy details, permissions, obligations, and a validity period.</li> <li> <p>The PAT is digitally signed by the web service.</p> </li> <li> <p>Using PAT in Requests:</p> </li> <li>AI agent includes the PAT in the <code>Authorization</code> header of each request.</li> <li>Web service verifies the PAT's signature and validity before processing the request.</li> </ol>"},{"location":"specification/key-concepts/#discovery-mechanisms","title":"Discovery Mechanisms","text":"<p>The UIM Protocol provides mechanisms for AI agents to discover available intents and services. These mechanisms include DNS TXT records and <code>agents.json</code> files.</p>"},{"location":"specification/key-concepts/#dns-txt-records","title":"DNS TXT Records","text":"<p>Services MUST publish discovery information using DNS TXT records. Each record MUST contain one of the following fields:</p> <ul> <li> <p>uim-agents: URL of the service description file (REQUIRED)   Example: \"uim-agents=https://example.com/agents.json\"</p> </li> <li> <p>uim-discovery: URL of the discovery endpoint (OPTIONAL)   Example: \"uim-discovery=https://api.example.com/discovery\"</p> </li> <li> <p>uim-policy: URL of the policy file (REQUIRED)   Example: \"uim-policy=https://example.com/policy.json\"</p> </li> </ul>"},{"location":"specification/key-concepts/#agentsjson-files","title":"<code>agents.json</code> Files","text":"<p><code>agents.json</code> files contain detailed information about the service and available intents. They MUST use the following structure:</p> <pre><code>{\n  \"service-info\": {\n    \"name\": \"Example Service\",\n    \"description\": \"Service description\",\n    \"service_url\": \"https://api.example.com\",\n    \"service_logo_url\": \"https://example.com/logo.png\",\n    \"service_terms_of_service_url\": \"https://example.com/terms\",\n    \"service_privacy_policy_url\": \"https://example.com/privacy\"\n  },\n  \"intents\": [\n    {\n      \"intent_uid\": \"example.com:search-products:v1\",\n      \"intent_name\": \"SearchProducts\",\n      \"description\": \"Search for products based on criteria\",\n      \"input_parameters\": [...],\n      \"output_parameters\": [...],\n      \"endpoint\": {...},\n      \"tags\": [...]\n    }\n  ],\n  \"uim-public-key\": \"base64-encoded-public-key\",\n  \"uim-policy-file\": \"https://example.com/policy.json\",\n  \"uim-api-discovery\": \"https://api.example.com/discovery\",\n  \"uim-compliance\": {\n    \"standards\": [\"ISO27001\", \"GDPR\"],\n    \"regional-compliance\": {\n      \"EU\": \"GDPR\",\n      \"US-CA\": \"CCPA\"\n    },\n    \"notes\": \"Data is encrypted in transit and at rest.\"\n  }\n}\n</code></pre>"},{"location":"specification/key-concepts/#summary","title":"Summary","text":"<p>The key concepts of the UIM Protocol\u2014Intents, Metadata and Parameters, and the Execute Method\u2014work together to create a standardized framework for AI agents to interact with web services. By understanding these concepts, developers can implement the protocol in their applications and enable seamless, efficient interactions between AI agents and web services.</p>"},{"location":"specification/overview/","title":"UIM Protocol Overview","text":""},{"location":"specification/overview/#introduction","title":"Introduction","text":"<p>The Unified Intent Mediator (UIM) Protocol defines a standardized framework for AI agents to interact with web services through well-defined intents, metadata, and execution methods. By introducing consistency and security in these interactions, UIM enhances efficiency, scalability, and reliability for AI-driven applications.</p>"},{"location":"specification/overview/#problem-statement","title":"Problem Statement","text":"<p>Current methods of integration between AI agents and web services face several challenges:</p> <ul> <li>Integration methods are fragmented and use inconsistent APIs.</li> <li>Service discovery mechanisms are limited or non-existent.</li> <li>Policy enforcement and compliance requirements are complex.</li> <li>Access to advanced service features is often restricted.</li> <li>Security and authentication mechanisms vary widely.</li> </ul> <p>The UIM Protocol addresses these challenges by providing a standardized framework for intent-based interactions.</p>"},{"location":"specification/overview/#protocol-goals","title":"Protocol Goals","text":"<p>The UIM Protocol aims to:</p> <ol> <li>Standardize Interactions: Create a consistent way for AI agents to discover and interact with web services.</li> <li>Enhance Security: Provide robust authentication and authorization mechanisms.</li> <li>Simplify Integration: Reduce the complexity of integrating AI agents with web services.</li> <li>Enable Advanced Functionality: Allow AI agents to access a wide range of web service features.</li> <li>Ensure Compliance: Provide mechanisms for enforcing policies and ensuring compliance with regulations.</li> </ol>"},{"location":"specification/overview/#key-features","title":"Key Features","text":"<ul> <li>Intent-Based Communication: Standardized format for expressing user intents that can be understood by both AI agents and web services.</li> <li>Secure Authentication: Robust authentication mechanisms using RSA key pairs for secure data transmission.</li> <li>Service Discovery: Centralized discovery service that allows AI agents to find and interact with compatible web services.</li> <li>Policy Management: System for defining and enforcing usage policies, permissions, and constraints.</li> <li>Mock Implementations: Reference implementations (mock agent and webservice) to demonstrate the protocol in action.</li> </ul>"},{"location":"specification/overview/#protocol-components","title":"Protocol Components","text":"<p>The UIM Protocol consists of several key components:</p>"},{"location":"specification/overview/#1-intents","title":"1. Intents","text":"<p>Intents are predefined actions that an AI agent can perform on a web service. They encapsulate specific tasks, including necessary parameters and execution details.</p>"},{"location":"specification/overview/#2-metadata-and-parameters","title":"2. Metadata and Parameters","text":"<p>Each intent includes metadata (name, description, category) and parameters (input and output) that provide context and specifics for execution.</p>"},{"location":"specification/overview/#3-execute-method","title":"3. Execute Method","text":"<p>The execute method manages the actual execution of intents, ensuring smooth interaction between AI agents and web services.</p>"},{"location":"specification/overview/#4-policy-adherence-tokens-pats","title":"4. Policy Adherence Tokens (PATs)","text":"<p>PATs are digitally signed tokens that encapsulate permissions, usage limits, billing agreements, and compliance terms.</p>"},{"location":"specification/overview/#5-discovery-mechanisms","title":"5. Discovery Mechanisms","text":"<p>The protocol provides mechanisms for AI agents to discover available intents and services, including DNS TXT records and <code>agents.json</code> files.</p>"},{"location":"specification/overview/#protocol-operation","title":"Protocol Operation","text":"<p>The protocol operates through the following steps:</p> <ol> <li>Service Registration: Services register their intents and capabilities using one or more discovery mechanisms.</li> <li>Intent Discovery: AI agents discover available services and intents through DNS-based discovery, service description retrieval, or direct endpoint queries.</li> <li>Policy Acquisition: Before executing intents, AI agents obtain Policy Adherence Tokens (PATs) by authenticating with the service, accepting applicable policies, and receiving a signed PAT.</li> <li>Intent Execution: AI agents execute intents by preparing a valid request with required parameters, including a valid PAT, sending the request to the specified endpoint, and processing the response according to intent metadata.</li> </ol>"},{"location":"specification/overview/#architecture-models","title":"Architecture Models","text":"<p>The UIM Protocol supports three architectural models:</p>"},{"location":"specification/overview/#centralized-model","title":"Centralized Model","text":"<p>Uses a central repository for intent discovery and management. All service registrations and intent discoveries pass through a central authority.</p> <p></p>"},{"location":"specification/overview/#decentralized-model","title":"Decentralized Model","text":"<p>Enables direct interaction between agents and services without intermediaries. Services maintain their own intent registries.</p> <p></p>"},{"location":"specification/overview/#hybrid-model","title":"Hybrid Model","text":"<p>Combines centralized and decentralized approaches, allowing flexibility in deployment while maintaining consistency.</p> <p></p>"},{"location":"specification/overview/#benefits","title":"Benefits","text":"<p>The UIM Protocol offers numerous benefits:</p> <ul> <li>Streamlined Interaction: Eliminates the need for simulated user actions.</li> <li>Enhanced Functionality: Exposes a wide range of web service functionalities as intents.</li> <li>New Revenue Streams: Allows service providers to monetize intent access/usage.</li> <li>Improved Efficiency: Reduces task completion time and enhances user experience.</li> <li>Robust Security: Incorporates encrypted communications and secure authentication.</li> </ul>"},{"location":"specification/overview/#next-steps","title":"Next Steps","text":"<p>To learn more about the UIM Protocol, explore the following sections:</p> <ul> <li>Key Concepts: Detailed information about intents, metadata, and the execute method.</li> <li>Architecture: In-depth discussion of the different architectural models.</li> <li>Core Components: Detailed specifications for each component of the protocol.</li> </ul>"},{"location":"specification/privacy/","title":"Privacy Considerations","text":"<p>This page outlines privacy considerations for implementing the UIM Protocol. It provides guidance on ensuring privacy compliance, implementing privacy-by-design principles, and addressing potential privacy concerns.</p>"},{"location":"specification/privacy/#introduction","title":"Introduction","text":"<p>Privacy is a fundamental consideration in the design and implementation of the UIM Protocol. As AI agents interact with web services on behalf of users, it is essential to ensure that these interactions respect user privacy and comply with relevant privacy regulations.</p> <p>This page addresses privacy considerations specific to the UIM Protocol, including data minimization, regulatory compliance, user consent, data security, cross-border data transfers, privacy by design, AI-specific privacy considerations, privacy impact assessment, and best practices.</p>"},{"location":"specification/privacy/#data-minimization","title":"Data Minimization","text":"<p>The UIM Protocol encourages data minimization, which means collecting and storing only the data necessary for the intended purpose. This principle is a cornerstone of privacy-by-design and is required by many privacy regulations, including GDPR.</p>"},{"location":"specification/privacy/#implementation-guidelines","title":"Implementation Guidelines","text":"<ul> <li>Intent Parameters: Design intents to require only the minimum necessary parameters.</li> <li>Response Data: Return only the data that is directly relevant to the intent's purpose.</li> <li>Storage Limitation: Implement appropriate data retention policies and delete data when it is no longer needed.</li> <li>Anonymization: Where possible, anonymize or pseudonymize personal data to reduce privacy risks.</li> </ul>"},{"location":"specification/privacy/#examples","title":"Examples","text":"<p>Good Practice: <pre><code>{\n  \"intent_uid\": \"ecommerce.com:SearchProducts:v1\",\n  \"parameters\": {\n    \"query\": \"laptop\",\n    \"category\": \"electronics\"\n  }\n}\n</code></pre></p> <p>Bad Practice: <pre><code>{\n  \"intent_uid\": \"ecommerce.com:SearchProducts:v1\",\n  \"parameters\": {\n    \"query\": \"laptop\",\n    \"category\": \"electronics\",\n    \"user_id\": \"12345\",\n    \"email\": \"user@example.com\",\n    \"browsing_history\": [\"phone\", \"tablet\", \"camera\"]\n  }\n}\n</code></pre></p>"},{"location":"specification/privacy/#regulatory-compliance","title":"Regulatory Compliance","text":""},{"location":"specification/privacy/#overview-of-relevant-regulations","title":"Overview of Relevant Regulations","text":"<p>The UIM Protocol may be subject to various privacy regulations depending on the jurisdiction and the nature of the data being processed. Key regulations include:</p> <ul> <li>General Data Protection Regulation (GDPR): Applies to processing of personal data in the EU or of EU residents.</li> <li>California Consumer Privacy Act (CCPA): Applies to businesses that collect personal information from California residents.</li> <li>Children's Online Privacy Protection Act (COPPA): Applies to collection of personal information from children under 13 in the US.</li> <li>Health Insurance Portability and Accountability Act (HIPAA): Applies to protected health information in the US.</li> </ul>"},{"location":"specification/privacy/#compliance-requirements","title":"Compliance Requirements","text":"<p>To comply with these regulations, implementers of the UIM Protocol should consider the following requirements:</p> <ul> <li>Legal Basis for Processing: Ensure there is a legal basis for processing personal data (e.g., consent, legitimate interest).</li> <li>Data Subject Rights: Respect data subject rights, such as the right to access, rectify, and erase data.</li> <li>Data Protection Impact Assessment: Conduct a data protection impact assessment for high-risk processing activities.</li> <li>Data Breach Notification: Implement procedures for notifying authorities and affected individuals of data breaches.</li> </ul>"},{"location":"specification/privacy/#implementation-strategies","title":"Implementation Strategies","text":"<ul> <li>Privacy Policy: Clearly communicate how personal data is collected, used, and shared.</li> <li>Consent Management: Implement mechanisms for obtaining and managing user consent.</li> <li>Data Inventory: Maintain an inventory of personal data collected and processed.</li> <li>Data Protection Officer: Designate a person responsible for privacy compliance.</li> </ul>"},{"location":"specification/privacy/#user-consent","title":"User Consent","text":""},{"location":"specification/privacy/#importance-of-user-consent","title":"Importance of User Consent","text":"<p>User consent is a fundamental aspect of privacy compliance. It ensures that users are aware of and agree to how their data is being used. In the context of the UIM Protocol, consent is particularly important when AI agents act on behalf of users.</p>"},{"location":"specification/privacy/#consent-mechanisms","title":"Consent Mechanisms","text":"<ul> <li>Explicit Consent: Obtain explicit consent from users before collecting or processing their personal data.</li> <li>Granular Consent: Allow users to provide consent for specific purposes or types of data.</li> <li>Revocable Consent: Make it easy for users to withdraw their consent at any time.</li> <li>Consent Records: Maintain records of user consent for compliance purposes.</li> </ul>"},{"location":"specification/privacy/#transparency","title":"Transparency","text":"<ul> <li>Clear Information: Provide clear and concise information about how data will be used.</li> <li>Layered Information: Use a layered approach to provide information at different levels of detail.</li> <li>Accessible Information: Ensure information is accessible to all users, including those with disabilities.</li> </ul>"},{"location":"specification/privacy/#data-security","title":"Data Security","text":""},{"location":"specification/privacy/#relationship-to-privacy","title":"Relationship to Privacy","text":"<p>Data security is closely related to privacy. Without adequate security measures, privacy cannot be guaranteed. The UIM Protocol includes security considerations that are essential for protecting privacy.</p>"},{"location":"specification/privacy/#security-measures","title":"Security Measures","text":"<ul> <li>Encryption: Encrypt data in transit and at rest.</li> <li>Access Controls: Implement appropriate access controls to limit who can access personal data.</li> <li>Secure Authentication: Use secure authentication mechanisms to prevent unauthorized access.</li> <li>Regular Security Audits: Conduct regular security audits to identify and address vulnerabilities.</li> </ul>"},{"location":"specification/privacy/#breach-response","title":"Breach Response","text":"<ul> <li>Breach Detection: Implement mechanisms to detect data breaches.</li> <li>Breach Notification: Establish procedures for notifying authorities and affected individuals of data breaches.</li> <li>Breach Remediation: Develop plans for addressing and remediating data breaches.</li> </ul>"},{"location":"specification/privacy/#cross-border-data-transfers","title":"Cross-Border Data Transfers","text":""},{"location":"specification/privacy/#challenges","title":"Challenges","text":"<p>Cross-border data transfers present unique challenges for privacy compliance. Different jurisdictions have different privacy requirements, and some restrict the transfer of personal data to other countries.</p>"},{"location":"specification/privacy/#legal-frameworks","title":"Legal Frameworks","text":"<ul> <li>Standard Contractual Clauses: Use standard contractual clauses approved by regulatory authorities.</li> <li>Binding Corporate Rules: Implement binding corporate rules for intra-group transfers.</li> <li>Adequacy Decisions: Transfer data to countries with adequacy decisions from regulatory authorities.</li> </ul>"},{"location":"specification/privacy/#implementation-considerations","title":"Implementation Considerations","text":"<ul> <li>Data Localization: Consider storing data in the jurisdiction where it is collected.</li> <li>Transfer Impact Assessment: Assess the privacy impact of cross-border data transfers.</li> <li>Transparency: Clearly communicate to users when their data may be transferred to other countries.</li> </ul>"},{"location":"specification/privacy/#privacy-by-design","title":"Privacy by Design","text":""},{"location":"specification/privacy/#principles","title":"Principles","text":"<p>Privacy by design is an approach that incorporates privacy into the design and operation of systems, business processes, and products. The UIM Protocol encourages privacy by design through its architecture and guidelines.</p>"},{"location":"specification/privacy/#application-to-uim-protocol","title":"Application to UIM Protocol","text":"<ul> <li>Default Privacy Settings: Configure systems with privacy-protective default settings.</li> <li>End-to-End Privacy: Consider privacy throughout the entire lifecycle of data.</li> <li>Visibility and Transparency: Make privacy policies and practices transparent and visible to users.</li> <li>Respect for User Privacy: Respect user privacy by providing user-friendly privacy controls.</li> </ul>"},{"location":"specification/privacy/#implementation-strategies_1","title":"Implementation Strategies","text":"<ul> <li>Privacy Impact Assessment: Conduct privacy impact assessments for new features or changes.</li> <li>Privacy Training: Provide privacy training to developers and other stakeholders.</li> <li>Privacy Reviews: Include privacy reviews in the development process.</li> </ul>"},{"location":"specification/privacy/#ai-specific-privacy-considerations","title":"AI-Specific Privacy Considerations","text":""},{"location":"specification/privacy/#ai-agent-behavior","title":"AI Agent Behavior","text":"<p>AI agents present unique privacy challenges because they act on behalf of users and may have access to sensitive information. The UIM Protocol includes considerations for AI agent behavior to address these challenges.</p>"},{"location":"specification/privacy/#data-processing","title":"Data Processing","text":"<ul> <li>Transparency: Be transparent about how AI agents process data.</li> <li>Purpose Limitation: Limit data processing to the specific purpose for which it was collected.</li> <li>Data Minimization: Collect and process only the data necessary for the intended purpose.</li> </ul>"},{"location":"specification/privacy/#transparency-and-explainability","title":"Transparency and Explainability","text":"<ul> <li>Explainable AI: Use AI techniques that can be explained to users.</li> <li>Decision Transparency: Be transparent about how AI agents make decisions.</li> <li>User Control: Provide users with control over AI agent behavior.</li> </ul>"},{"location":"specification/privacy/#privacy-impact-assessment","title":"Privacy Impact Assessment","text":""},{"location":"specification/privacy/#purpose","title":"Purpose","text":"<p>A privacy impact assessment (PIA) is a process to identify and mitigate privacy risks. It helps ensure that privacy is considered throughout the development and implementation of systems and processes.</p>"},{"location":"specification/privacy/#methodology","title":"Methodology","text":"<ol> <li>Identify Need: Determine whether a PIA is needed.</li> <li>Describe Information Flows: Document how personal data is collected, used, stored, and shared.</li> <li>Identify Privacy Risks: Identify potential privacy risks and their likelihood and impact.</li> <li>Identify Solutions: Identify solutions to address the identified risks.</li> <li>Sign Off and Record Outcomes: Get approval for the PIA and record the outcomes.</li> <li>Integrate Outcomes: Integrate the outcomes into the project plan.</li> <li>Review and Audit: Regularly review and audit the effectiveness of the solutions.</li> </ol>"},{"location":"specification/privacy/#template","title":"Template","text":"<p>A PIA template typically includes the following sections:</p> <ul> <li>Project Information: Basic information about the project.</li> <li>Data Collection and Use: Information about what data is collected and how it is used.</li> <li>Data Sharing: Information about how data is shared with third parties.</li> <li>Data Security: Information about how data is secured.</li> <li>Privacy Risks: Identification of privacy risks and their likelihood and impact.</li> <li>Risk Mitigation: Strategies for mitigating identified risks.</li> <li>Compliance Check: Verification of compliance with privacy regulations.</li> <li>Sign-Off: Approval of the PIA by relevant stakeholders.</li> </ul>"},{"location":"specification/privacy/#best-practices-and-recommendations","title":"Best Practices and Recommendations","text":""},{"location":"specification/privacy/#general-best-practices","title":"General Best Practices","text":"<ul> <li>Privacy Policy: Maintain a clear and comprehensive privacy policy.</li> <li>Data Inventory: Maintain an inventory of personal data collected and processed.</li> <li>Regular Audits: Conduct regular privacy audits to ensure compliance.</li> <li>Privacy Training: Provide privacy training to all relevant personnel.</li> </ul>"},{"location":"specification/privacy/#specific-recommendations","title":"Specific Recommendations","text":"<ul> <li>Intent Design: Design intents to minimize the collection of personal data.</li> <li>Data Retention: Implement appropriate data retention policies.</li> <li>Anonymization: Use anonymization techniques where possible.</li> <li>Consent Management: Implement robust consent management mechanisms.</li> </ul>"},{"location":"specification/privacy/#privacy-checklist","title":"Privacy Checklist","text":"<p>Use this checklist to ensure that your implementation of the UIM Protocol addresses key privacy considerations:</p> <ul> <li> Implement data minimization principles in intent design and execution.</li> <li> Establish a legal basis for processing personal data.</li> <li> Obtain and manage user consent for data processing.</li> <li> Implement appropriate security measures to protect personal data.</li> <li> Respect data subject rights (access, rectification, erasure, etc.).</li> <li> Conduct a privacy impact assessment for high-risk processing activities.</li> <li> Implement privacy by design principles in your implementation.</li> <li> Establish procedures for handling data breaches.</li> <li> Ensure compliance with relevant privacy regulations.</li> <li> Provide clear privacy information to users.</li> </ul>"},{"location":"specification/security/","title":"Security","text":"<p>Security is a critical aspect of the UIM Protocol, ensuring that interactions between AI agents and web services are secure, private, and compliant with relevant regulations. This section provides detailed information about the security aspects of the protocol.</p>"},{"location":"specification/security/#1-security-overview","title":"1. Security Overview","text":"<p>The UIM Protocol incorporates several security mechanisms to protect the integrity, confidentiality, and availability of data and services:</p> <ul> <li>Authentication: Verifying the identity of AI agents and web services</li> <li>Authorization: Controlling access to resources and actions</li> <li>Encryption: Protecting data in transit and at rest</li> <li>Policy Enforcement: Ensuring compliance with usage policies and regulations</li> <li>Rate Limiting: Preventing abuse and ensuring fair usage</li> <li>Audit Logging: Tracking and monitoring activities for security and compliance purposes</li> </ul>"},{"location":"specification/security/#2-authentication","title":"2. Authentication","text":"<p>Authentication is the process of verifying the identity of an entity (in this case, an AI agent or web service). The UIM Protocol uses Policy Adherence Tokens (PATs) as the primary authentication mechanism.</p>"},{"location":"specification/security/#21-policy-adherence-tokens-pats","title":"2.1 Policy Adherence Tokens (PATs)","text":"<p>PATs are JSON Web Tokens (JWTs) that are issued by web services to AI agents after the agents have agreed to the service's policies. PATs serve as both authentication and authorization tokens, containing claims about the identity of the AI agent and the permissions granted to it.</p>"},{"location":"specification/security/#211-pat-structure","title":"2.1.1 PAT Structure","text":"<p>PATs are structured as JWTs with the following claims:</p> <ul> <li>iss (Issuer): The service identifier that issued the token</li> <li>sub (Subject): The AI agent identifier that the token was issued to</li> <li>exp (Expiration Time): The time after which the token is no longer valid</li> <li>nbf (Not Before): The time before which the token is not valid</li> <li>jti (JWT ID): A unique identifier for the token</li> <li>scope: An array of permitted intents and operations</li> <li>pol (Policy): A reference to the policy that the token adheres to</li> <li>lmt (Limits): Rate limiting parameters and other usage constraints</li> </ul>"},{"location":"specification/security/#212-pat-issuance","title":"2.1.2 PAT Issuance","text":"<p>The PAT issuance process involves the following steps:</p> <ol> <li>Policy Retrieval: The AI agent retrieves the policy from the web service's policy endpoint.</li> <li>Policy Agreement: The AI agent reviews the policy and decides whether to agree to it.</li> <li>Signature Generation: If the AI agent agrees to the policy, it digitally signs the policy using its private key.</li> <li>PAT Request: The AI agent sends a request to the web service's PAT issuance endpoint, including its identifier, the signed policy, and its public key.</li> <li>Verification: The web service verifies the AI agent's signature using the provided public key.</li> <li>PAT Issuance: If the signature is valid, the web service issues a PAT to the AI agent.</li> </ol>"},{"location":"specification/security/#213-pat-usage","title":"2.1.3 PAT Usage","text":"<p>The AI agent includes the PAT in the <code>Authorization</code> header of each request to the web service, using the Bearer scheme:</p> <pre><code>Authorization: Bearer &lt;PAT&gt;\n</code></pre> <p>The web service verifies the PAT's signature, expiration time, and other claims before processing the request.</p>"},{"location":"specification/security/#3-authorization","title":"3. Authorization","text":"<p>Authorization is the process of determining whether an authenticated entity has permission to perform a specific action or access a specific resource. In the UIM Protocol, authorization is primarily handled through the <code>scope</code> claim in the PAT.</p>"},{"location":"specification/security/#31-scope-based-authorization","title":"3.1 Scope-Based Authorization","text":"<p>The <code>scope</code> claim in the PAT specifies the intents and operations that the AI agent is authorized to perform. Each scope entry typically follows the format:</p> <pre><code>&lt;intent_uid&gt;:&lt;operation&gt;\n</code></pre> <p>For example:</p> <pre><code>example.com:search-products:v1:execute\n</code></pre> <p>This scope entry authorizes the AI agent to execute the <code>search-products</code> intent (version 1) provided by <code>example.com</code>.</p>"},{"location":"specification/security/#32-rate-limiting","title":"3.2 Rate Limiting","text":"<p>Rate limiting is an important aspect of authorization, preventing abuse and ensuring fair usage of resources. The <code>lmt</code> claim in the PAT specifies the rate limits that apply to the AI agent.</p> <p>Example <code>lmt</code> claim:</p> <pre><code>\"lmt\": {\n  \"rate\": 100,\n  \"period\": 3600\n}\n</code></pre> <p>This limits the AI agent to 100 requests per hour (3600 seconds).</p>"},{"location":"specification/security/#4-encryption","title":"4. Encryption","text":"<p>Encryption is used to protect data in transit and at rest, ensuring that sensitive information remains confidential.</p>"},{"location":"specification/security/#41-transport-layer-security-tls","title":"4.1 Transport Layer Security (TLS)","text":"<p>All communications between AI agents and web services MUST use TLS (HTTPS) to encrypt data in transit. This protects against eavesdropping, tampering, and message forgery.</p>"},{"location":"specification/security/#42-key-management","title":"4.2 Key Management","text":"<p>Both AI agents and web services MUST securely manage their cryptographic keys:</p> <ul> <li>Private Keys: Must be stored securely and never shared.</li> <li>Public Keys: Can be shared freely but must be verified to prevent man-in-the-middle attacks.</li> <li>Key Rotation: Keys should be rotated periodically to limit the impact of key compromise.</li> </ul>"},{"location":"specification/security/#5-policy-enforcement","title":"5. Policy Enforcement","text":"<p>Policy enforcement ensures that AI agents adhere to the policies defined by web services. These policies may include usage limits, billing agreements, data handling requirements, and compliance with regulations.</p>"},{"location":"specification/security/#51-policy-definition","title":"5.1 Policy Definition","text":"<p>Policies are defined using the Open Digital Rights Language (ODRL) Information Model 2.2, which provides a standardized way to express permissions, prohibitions, and obligations.</p>"},{"location":"specification/security/#52-policy-verification","title":"5.2 Policy Verification","text":"<p>Web services verify that AI agents adhere to policies by:</p> <ul> <li>Checking PAT Validity: Ensuring that the PAT is valid and has not expired.</li> <li>Verifying Scope: Confirming that the requested operation is within the scope of the PAT.</li> <li>Enforcing Rate Limits: Ensuring that the AI agent has not exceeded the rate limits specified in the PAT.</li> <li>Monitoring Compliance: Tracking the AI agent's activities to ensure compliance with the policy.</li> </ul>"},{"location":"specification/security/#6-audit-logging","title":"6. Audit Logging","text":"<p>Audit logging is essential for security monitoring, compliance, and incident response. Both AI agents and web services should maintain logs of security-relevant events.</p>"},{"location":"specification/security/#61-events-to-log","title":"6.1 Events to Log","text":"<ul> <li>Authentication Events: Successful and failed authentication attempts.</li> <li>Authorization Events: Access granted or denied to resources.</li> <li>Policy Events: Policy agreements, PAT issuance, and policy violations.</li> <li>Intent Execution: Execution of intents, including parameters and results.</li> <li>Error Events: Security-related errors and exceptions.</li> </ul>"},{"location":"specification/security/#62-log-content","title":"6.2 Log Content","text":"<p>Each log entry should include:</p> <ul> <li>Timestamp: When the event occurred.</li> <li>Event Type: The type of event (e.g., authentication, authorization).</li> <li>Actor: The entity that performed the action (e.g., AI agent, web service).</li> <li>Action: The action that was performed.</li> <li>Resource: The resource that was accessed.</li> <li>Result: The outcome of the action (e.g., success, failure).</li> <li>Details: Additional context-specific information.</li> </ul>"},{"location":"specification/security/#7-security-best-practices","title":"7. Security Best Practices","text":""},{"location":"specification/security/#71-for-ai-agents","title":"7.1 For AI Agents","text":"<ul> <li>Secure Key Storage: Store private keys securely, using hardware security modules (HSMs) when possible.</li> <li>Policy Validation: Validate policies before agreeing to them, ensuring they are reasonable and do not pose security risks.</li> <li>PAT Management: Securely store PATs and renew them before they expire.</li> <li>Input Validation: Validate all input from web services to prevent injection attacks.</li> <li>Error Handling: Handle errors gracefully without exposing sensitive information.</li> </ul>"},{"location":"specification/security/#72-for-web-services","title":"7.2 For Web Services","text":"<ul> <li>Secure Key Storage: Store private keys securely, using HSMs when possible.</li> <li>Input Validation: Validate all input from AI agents to prevent injection attacks.</li> <li>Rate Limiting: Implement rate limiting to prevent abuse.</li> <li>Monitoring: Monitor for suspicious activities and potential security breaches.</li> <li>Regular Security Assessments: Conduct regular security assessments to identify and address vulnerabilities.</li> </ul>"},{"location":"specification/security/#8-compliance-considerations","title":"8. Compliance Considerations","text":""},{"location":"specification/security/#81-data-protection-regulations","title":"8.1 Data Protection Regulations","text":"<p>Web services must comply with relevant data protection regulations, such as the General Data Protection Regulation (GDPR) in the European Union or the California Consumer Privacy Act (CCPA) in the United States.</p>"},{"location":"specification/security/#82-industry-specific-regulations","title":"8.2 Industry-Specific Regulations","text":"<p>Depending on the industry, additional regulations may apply, such as the Health Insurance Portability and Accountability Act (HIPAA) for healthcare or the Payment Card Industry Data Security Standard (PCI DSS) for financial services.</p>"},{"location":"specification/security/#83-compliance-documentation","title":"8.3 Compliance Documentation","text":"<p>Web services should maintain documentation of their compliance efforts, including:</p> <ul> <li>Privacy Policies: Clearly stating how data is collected, used, and protected.</li> <li>Terms of Service: Outlining the terms under which the service is provided.</li> <li>Data Processing Agreements: Defining the responsibilities of data processors.</li> <li>Security Policies: Documenting security measures and practices.</li> </ul>"},{"location":"specification/security/#9-conclusion","title":"9. Conclusion","text":"<p>Security is a fundamental aspect of the UIM Protocol, ensuring that interactions between AI agents and web services are secure, private, and compliant with relevant regulations. By following the security guidelines and best practices outlined in this section, implementers can create secure and trustworthy UIM Protocol implementations.</p>"},{"location":"specification/terminology/","title":"UIM Protocol Terminology","text":"<p>This page provides definitions for key terms used in the UIM Protocol specification. Terms are organized by category for easy reference.</p>"},{"location":"specification/terminology/#core-protocol-terms","title":"Core Protocol Terms","text":""},{"location":"specification/terminology/#intent","title":"Intent","text":"<p>Definition: An action that can be performed by a web service, including metadata and parameters required for execution. Related Terms: Intent UID, Intent Metadata, Parameters Example: SearchProducts, GetProductDetails, PlaceOrder</p>"},{"location":"specification/terminology/#web-service","title":"Web Service","text":"<p>Definition: A service that publishes its capabilities (intents) using the UIM Protocol. Related Terms: Service Provider, API Example: An e-commerce platform that exposes intents for searching products and placing orders.</p>"},{"location":"specification/terminology/#ai-agent","title":"AI Agent","text":"<p>Definition: An application or service that uses intents to interact with web services. Related Terms: Client, Consumer Example: A shopping assistant that helps users find products across multiple e-commerce platforms.</p>"},{"location":"specification/terminology/#policy-adherence-token-pat","title":"Policy Adherence Token (PAT)","text":"<p>Definition: A token issued by a web service to an AI agent, encapsulating permissions, usage limits, and billing agreements. Related Terms: ODRL Policy, UIM License Example: A JWT token containing permissions and rate limits.</p>"},{"location":"specification/terminology/#intent-related-terms","title":"Intent-Related Terms","text":""},{"location":"specification/terminology/#intent-uid","title":"Intent UID","text":"<p>Definition: A unique identifier for an intent, following the format <code>namespace:intent_name:version</code>. Related Terms: Intent, Namespace Example: <code>ecommerce.com:SearchProducts:v1</code></p>"},{"location":"specification/terminology/#intent-metadata","title":"Intent Metadata","text":"<p>Definition: Descriptive information about an intent, including its name, description, and category. Related Terms: Intent, Tags Example: Name: \"SearchProducts\", Description: \"Search for products based on criteria\", Tags: [\"e-commerce\", \"search\"]</p>"},{"location":"specification/terminology/#parameters","title":"Parameters","text":"<p>Definition: Inputs required by an intent to perform its action, including name, type, and whether they are required. Related Terms: Intent, Input Parameters, Output Parameters Example: <code>query</code>, <code>category</code>, <code>price_range</code></p>"},{"location":"specification/terminology/#input-parameters","title":"Input Parameters","text":"<p>Definition: Parameters that are provided by the AI agent to the web service when executing an intent. Related Terms: Parameters, Intent Example: <code>query: \"laptop\"</code>, <code>category: \"electronics\"</code></p>"},{"location":"specification/terminology/#output-parameters","title":"Output Parameters","text":"<p>Definition: Parameters that are returned by the web service to the AI agent after executing an intent. Related Terms: Parameters, Intent Example: <code>products: [...]</code>, <code>total_results: 42</code></p>"},{"location":"specification/terminology/#endpoint","title":"Endpoint","text":"<p>Definition: The API endpoint where an intent can be executed. Related Terms: API, URL Example: <code>https://api.ecommerce.com/products/search</code></p>"},{"location":"specification/terminology/#policy-related-terms","title":"Policy-Related Terms","text":""},{"location":"specification/terminology/#odrl-policy","title":"ODRL Policy","text":"<p>Definition: A policy expressed using the Open Digital Rights Language (ODRL) that defines permissions, prohibitions, and obligations. Related Terms: Permission, Prohibition, Obligation Example: A policy that allows executing intents with a rate limit of 1000 requests per hour.</p>"},{"location":"specification/terminology/#uim-license","title":"UIM License","text":"<p>Definition: A set of rules and conditions that govern the usage of data returned by an intent, including permissions, prohibitions, and obligations. Related Terms: ODRL Policy, PAT Example: <code>UIM-BY-NC-v1.0</code> - A license that allows non-commercial use with attribution.</p>"},{"location":"specification/terminology/#permission","title":"Permission","text":"<p>Definition: An allowed action specified in a policy. Related Terms: ODRL Policy, Prohibition, Obligation Example: Permission to execute an intent with a rate limit of 1000 requests per hour.</p>"},{"location":"specification/terminology/#prohibition","title":"Prohibition","text":"<p>Definition: A disallowed action specified in a policy. Related Terms: ODRL Policy, Permission, Obligation Example: Prohibition against exceeding the rate limit.</p>"},{"location":"specification/terminology/#obligation","title":"Obligation","text":"<p>Definition: An action that must be performed as a condition of using a service. Related Terms: ODRL Policy, Permission, Prohibition Example: Obligation to pay for intent execution.</p>"},{"location":"specification/terminology/#discovery-related-terms","title":"Discovery-Related Terms","text":""},{"location":"specification/terminology/#discovery-endpoint","title":"Discovery Endpoint","text":"<p>Definition: The API endpoint where AI agents can query for available intents. Related Terms: Intent, API Endpoint Example: <code>/api/intents/search</code></p>"},{"location":"specification/terminology/#dns-txt-record","title":"DNS TXT Record","text":"<p>Definition: A DNS record that contains text information, used in the UIM Protocol to provide discovery information. Related Terms: agents.json Example: <code>uim-agents-file=https://example.com/agents.json</code></p>"},{"location":"specification/terminology/#agentsjson","title":"agents.json","text":"<p>Definition: A JSON file that contains information about a web service and its available intents. Related Terms: DNS TXT Record, Intent Example: A file containing service information, intents, and policy information.</p>"},{"location":"specification/terminology/#security-related-terms","title":"Security-Related Terms","text":""},{"location":"specification/terminology/#authentication","title":"Authentication","text":"<p>Definition: The process of verifying the identity of an AI agent. Related Terms: Authorization, PAT Example: Using a PAT to authenticate an AI agent.</p>"},{"location":"specification/terminology/#authorization","title":"Authorization","text":"<p>Definition: The process of determining whether an authenticated AI agent has permission to perform a specific action. Related Terms: Authentication, Permission Example: Checking if an AI agent has permission to execute a specific intent.</p>"},{"location":"specification/terminology/#digital-signature","title":"Digital Signature","text":"<p>Definition: A cryptographic mechanism used to verify the authenticity and integrity of data. Related Terms: Public Key, Private Key Example: Signing a policy with a private key to prove agreement.</p>"},{"location":"specification/terminology/#architecture-related-terms","title":"Architecture-Related Terms","text":""},{"location":"specification/terminology/#centralized-architecture","title":"Centralized Architecture","text":"<p>Definition: An architecture where a central repository manages intent registration, discovery, and execution. Related Terms: Decentralized Architecture, Hybrid Approach Example: A central repository that manages intents from multiple web services.</p>"},{"location":"specification/terminology/#decentralized-architecture","title":"Decentralized Architecture","text":"<p>Definition: An architecture where AI agents interact directly with web services without a central intermediary. Related Terms: Centralized Architecture, Hybrid Approach Example: AI agents discovering web services through DNS TXT records and interacting directly with them.</p>"},{"location":"specification/terminology/#hybrid-approach","title":"Hybrid Approach","text":"<p>Definition: An architecture that combines elements of centralized and decentralized architectures. Related Terms: Centralized Architecture, Decentralized Architecture Example: Centralized discovery with decentralized execution.</p>"},{"location":"specification/terminology/#implementation-related-terms","title":"Implementation-Related Terms","text":""},{"location":"specification/terminology/#execution-endpoint","title":"Execution Endpoint","text":"<p>Definition: The API endpoint where AI agents can execute intents. Related Terms: Intent, API Endpoint Example: <code>/api/intents/execute</code></p>"},{"location":"specification/terminology/#rate-limit","title":"Rate Limit","text":"<p>Definition: A limit on the number of requests an AI agent can make to a web service within a specific time period. Related Terms: PAT, Policy Example: 1000 requests per hour.</p>"},{"location":"specification/terminology/#billing-information","title":"Billing Information","text":"<p>Definition: Information about the cost of executing intents and payment methods. Related Terms: PAT, Policy Example: $0.01 per intent execution.</p>"},{"location":"specification/terminology/#data-related-terms","title":"Data-Related Terms","text":""},{"location":"specification/terminology/#data-minimization","title":"Data Minimization","text":"<p>Definition: The principle of collecting and storing only the data necessary for the intended purpose. Related Terms: Privacy, Security Example: Designing intents to require only the minimum necessary parameters.</p>"},{"location":"specification/terminology/#anonymization","title":"Anonymization","text":"<p>Definition: The process of removing personally identifiable information from data. Related Terms: Privacy, Security Example: Removing user IDs and email addresses from data returned by intents.</p>"},{"location":"specification/terminology/#data-retention","title":"Data Retention","text":"<p>Definition: The period of time for which data is stored before being deleted. Related Terms: Privacy, Security Example: Storing data for 30 days before deleting it.</p>"},{"location":"specification/additional/","title":"Additional Specification Documents","text":"<p>This section contains additional specification documents that provide more detailed information about specific aspects of the UIM Protocol.</p>"},{"location":"specification/additional/#compliance-documents","title":"Compliance Documents","text":"<ul> <li>UIM Compliance with EU TDM Regulation: Details on how the UIM Protocol complies with EU Text and Data Mining regulations.</li> <li>UIM-TDMRep Relation: Explanation of the relationship between UIM Protocol and TDMRep.</li> <li>RFC Compliance Analysis: Detailed analysis of UIM Protocol's compliance with RFC standards.</li> <li>RFC Compliance Summary: Summary of UIM Protocol's compliance with RFC standards.</li> </ul>"},{"location":"specification/additional/#examples-and-presentations","title":"Examples and Presentations","text":"<ul> <li>Intent Examples: Examples of intents for different use cases.</li> <li>Presentation: Presentation materials for the UIM Protocol.</li> </ul>"},{"location":"specification/additional/intent_examples/","title":"AI Agent Intent Examples","text":""},{"location":"specification/additional/intent_examples/#ai-agent-driven-e-commerce-integration-for-personalized-shopping-experiences","title":"AI-Agent Driven E-Commerce Integration for Personalized Shopping Experiences","text":"<ul> <li>searchProducts: \"Find products based on user preferences, keywords, and categories\u201d</li> <li>Parameters: query (string), category (string, optional), priceRange (string, optional), sortBy (string, optional)</li> <li>getProductDetails: \"Retrieve detailed information about a specific product.\u201d</li> <li>Parameters: productId (string)</li> <li>addToCart: \"Add a selected product to the user's shopping cart.\u201d</li> <li>Parameters: productId (string), quantity (integer)</li> <li>checkoutCart: \"Proceed to checkout with the current items in the user's cart.\u201d</li> <li>Parameters: paymentMethod (string), shippingAddress (string)</li> <li>trackOrder: \"Monitor the status of an order and provide updates.\u201d</li> <li>Parameters: orderId (string)</li> </ul>"},{"location":"specification/additional/intent_examples/#financial-service-automation-using-ai-agent-driven-interactions","title":"Financial Service Automation Using AI-Agent Driven Interactions","text":"<ul> <li>checkAccountBalance: \"Retrieve the current balance of the user's accounts.\u201d</li> <li>Parameters: accountId (string)</li> <li>monitorTransactions: \"Track recent transactions and notify users of any unusual activity.\u201d</li> <li>Parameters: accountId (string), startDate (string, optional), endDate (string, optional)</li> <li>transferFunds: \"Facilitate secure money transfers between accounts or to other users.\u201d</li> <li>Parameters: fromAccountId (string), toAccountId (string), amount (float)</li> <li>payBill: \"Schedule and automate recurring bill payments.\u201d</li> <li>Parameters: billerId (string), amount (float), dueDate (string)</li> <li>financialPlanning: \"Provide personalized financial advice and budgeting tips based on user spending patterns.\u201d</li> <li>Parameters: accountId (string), goals (string, optional)</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-social-media-content-management","title":"AI-Agent Powered Social Media Content Management","text":"<ul> <li>schedulePost: \"Automate the scheduling and posting of content across multiple social media platforms.\u201d</li> <li>Parameters: content (string), platforms (array of strings), scheduledTime (string)</li> <li>curateContent: \"Suggest relevant content for sharing based on trending topics and user interests.\u201d</li> <li>Parameters: interests (array of strings), platforms (array of strings, optional)</li> <li>respondToComments: \"Automatically respond to comments and messages with predefined templates.\u201d</li> <li>Parameters: postId (string), responseTemplate (string)</li> <li>analyzePerformance: \"Provide analytics and insights on post performance and audience engagement.\u201d</li> <li>Parameters: postId (string), metrics (array of strings, optional)</li> <li>manageAdCampaigns: \"Create, monitor, and optimize social media advertising campaigns.\u201d</li> <li>Parameters: campaignDetails (object), budget (float)</li> </ul>"},{"location":"specification/additional/intent_examples/#healthcare-service-booking-and-management-through-ai-agents","title":"Healthcare Service Booking and Management Through AI Agents","text":"<ul> <li>bookAppointment: \"Schedule medical appointments with healthcare providers.\u201d</li> <li>Parameters: providerId (string), date (string), time (string), reason (string, optional)</li> <li>managePrescriptions: \"Track prescription refills and notify users when it\u2019s time to renew.\u201d</li> <li>Parameters: prescriptionId (string), refillDate (string)</li> <li>accessMedicalRecords: \"Retrieve and display the user's medical history and records.\u201d</li> <li>Parameters: userId (string)</li> <li>symptomChecker: \"Provide initial diagnosis and health advice based on reported symptoms.\u201d</li> <li>Parameters: symptoms (array of strings)</li> <li>healthReminders: \"Send reminders for medication, appointments, and health check-ups.\u201d</li> <li>Parameters: reminderType (string), date (string), time (string)</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-enabled-news-and-media-content-curation","title":"AI-Agent Enabled News and Media Content Curation","text":"<ul> <li>personalizedNewsFeed: \"Curate a personalized news feed based on user interests and preferences.\u201d</li> <li>Parameters: interests (array of strings), sources (array of strings, optional)</li> <li>breakingNewsAlerts: \"Notify users of important news events as they happen.\u201d</li> <li>Parameters: categories (array of strings, optional)</li> <li>summarizeArticle: \"Provide concise summaries of long articles for quick reading.\u201d</li> <li>Parameters: articleUrl (string)</li> <li>saveForLater: \"Allow users to save articles and videos to view later.\u201d</li> <li>Parameters: contentUrl (string)</li> <li>exploreTopics: \"Suggest related topics and articles based on user reading history.\u201d</li> <li>Parameters: currentTopic (string)</li> </ul>"},{"location":"specification/additional/intent_examples/#secure-fund-transfer-systems-utilizing-ai-agent-interfaces","title":"Secure Fund Transfer Systems Utilizing AI-Agent Interfaces","text":"<ul> <li>initiateTransfer: \"Facilitate secure transfers between user accounts and other recipients.\u201d</li> <li>Parameters: fromAccountId (string), toAccountId (string), amount (float)</li> <li>trackTransfer: \"Monitor the status of fund transfers and provide updates to users.\u201d</li> <li>Parameters: transferId (string)</li> <li>setTransferLimits: \"Allow users to set daily or monthly transfer limits for added security.\u201d</li> <li>Parameters: accountId (string), limit (float)</li> <li>verifyRecipient: \"Confirm recipient details before completing transfers to prevent errors.\u201d</li> <li>Parameters: recipientId (string)</li> <li>transactionHistory: \"Provide a detailed history of all past transfers for user reference.\u201d</li> <li>Parameters: accountId (string), startDate (string, optional), endDate (string, optional)</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-travel-and-booking-platforms","title":"AI-Agent Powered Travel and Booking Platforms","text":"<ul> <li>searchFlights: \"Find and compare flights based on user preferences.\u201d</li> <li>Parameters: origin (string), destination (string), departureDate (string), returnDate (string, optional)</li> <li>bookAccommodation: \"Reserve hotels or vacation rentals according to user criteria.\u201d</li> <li>Parameters: location (string), checkInDate (string), checkOutDate (string), roomType (string, optional)</li> <li>createItinerary: \"Generate travel itineraries including flights, accommodations, and activities.\u201d</li> <li>Parameters: tripDetails (object)</li> <li>trackBookings: \"Monitor booking statuses and send reminders for upcoming trips.\u201d</li> <li>Parameters: bookingId (string)</li> <li>travelRecommendations: \"Suggest destinations, activities, and dining options based on user interests.\u201d</li> <li>Parameters: interests (array of strings), location (string, optional)</li> </ul>"},{"location":"specification/additional/intent_examples/#automated-customer-support-through-ai-agent-interactions","title":"Automated Customer Support Through AI-Agent Interactions","text":"<ul> <li>answerFAQ: \"Provide instant responses to frequently asked questions.\u201d</li> <li>Parameters: question (string)</li> <li>createSupportTicket: \"Create and track support tickets for user inquiries.\u201d</li> <li>Parameters: issueDescription (string), priority (string, optional)</li> <li>liveChatSupport: \"Offer real-time chat support with AI-driven responses.\u201d</li> <li>Parameters: userMessage (string)</li> <li>resolveIssue: \"Guide users through troubleshooting steps to resolve common issues.\u201d</li> <li>Parameters: issueType (string)</li> <li>collectFeedback: \"Collect and analyze user feedback to improve services.\u201d</li> <li>Parameters: feedback (string), rating (integer)</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-driven-data-analytics-for-business-insights","title":"AI-Agent Driven Data Analytics for Business Insights","text":"<ul> <li>generateReport: \"Create detailed business reports based on collected data.\u201d</li> <li>Parameters: reportType (string), timePeriod (string, optional)</li> <li>predictiveAnalytics: \"Provide forecasts and predictive insights based on historical data.\u201d</li> <li>Parameters: dataSetId (string), predictionType (string)</li> <li>identifyTrends: \"Highlight emerging trends and patterns in business data.\u201d</li> <li>Parameters: dataSetId (string), trendType (string)</li> <li>trackKPIs: \"Monitor key performance indicators and alert users of any significant changes.\u201d</li> <li>Parameters: kpi (string), threshold (float)</li> <li>dataVisualization: \"Present data in visually appealing charts and graphs for easier interpretation.\u201d</li> <li>Parameters: dataSetId (string), visualizationType (string)</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-integration-for-home-automation-systems","title":"AI-Agent Integration for Home Automation Systems","text":"<ul> <li>controlDevice: \"Manage and control smart home devices such as lights, thermostats, and security cameras.\u201d</li> <li>Parameters: deviceId (string), command (string)</li> <li>automateRoutine: \"Set up and automate daily routines for home devices.\u201d</li> <li>Parameters: routineName (string), schedule (string), devices (array of objects)</li> <li>monitorSecurity: \"Track home security status and send alerts for any suspicious activities.\u201d</li> <li>Parameters: securityDeviceId (string)</li> <li>manageEnergyUsage: \"Optimize energy usage and provide recommendations for savings.\u201d</li> <li>Parameters: deviceId (string), usageData (object)</li> <li>voiceControl: \"Enable voice control for various home automation tasks.\u201d</li> <li>Parameters: command (string)</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-based-appointment-scheduling-for-various-services","title":"AI-Agent Based Appointment Scheduling for Various Services","text":"<ul> <li>scheduleAppointment: \"Book appointments for services such as salons, car repairs, and healthcare.\u201d</li> <li>Parameters: serviceId (string), date (string), time (string)</li> <li>manageCalendar: \"Sync appointments with user calendars and send reminders.\u201d</li> <li>Parameters: calendarId (string)</li> <li>rescheduleAppointment: \"Allow users to easily reschedule appointments.\u201d</li> <li>Parameters: appointmentId (string), newDate (string), newTime (string)</li> <li>cancelAppointment: \"Cancel scheduled appointments.\u201d</li> <li>Parameters: appointmentId (string)</li> <li>recommendServices: \"Suggest related services or follow-up appointments based on user history.\u201d</li> <li>Parameters: userId (string), currentService (string)</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-online-education-platforms","title":"AI-Agent Powered Online Education Platforms","text":"<ul> <li>recommendCourses: \"Suggest courses and learning materials based on user interests and progress. Parameters: userId (string), interests (array of strings)\"</li> <li>trackProgress: \"Monitor user progress and provide feedback on performance. Parameters: userId (string), courseId (string)\"</li> <li>automateGrading: \"Grade assignments and quizzes automatically. Parameters: courseId (string), assignmentId (string)\"</li> <li>scheduleLessons: \"Arrange and remind users of upcoming lessons and study sessions. Parameters: courseId (string), lessonDate (string), lessonTime (string)\"</li> <li>peerInteraction: \"Facilitate interactions with peers and instructors through forums and chat. Parameters: courseId (string), message (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-enabled-legal-service-consultations","title":"AI-Agent Enabled Legal Service Consultations","text":"<ul> <li>bookConsultation: \"Schedule appointments with legal professionals. Parameters: lawyerId (string), date (string), time (string)\"</li> <li>reviewDocuments: \"Upload and review legal documents with AI assistance. Parameters: documentId (string)\"</li> <li>provideLegalAdvice: \"Provide preliminary legal advice based on user queries. Parameters: query (string)\"</li> <li>trackCaseStatus: \"Monitor the status of ongoing legal cases. Parameters: caseId (string)\"</li> <li>estimateCosts: \"Offer cost estimates for legal services based on user needs. Parameters: serviceType (string), details (object)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#personalized-ai-agent-driven-fitness-and-wellness-platforms","title":"Personalized AI-Agent Driven Fitness and Wellness Platforms","text":"<ul> <li>recommendWorkouts: \"Suggest personalized workout plans based on user goals and fitness level. Parameters: userId (string), fitnessGoals (string)\"</li> <li>trackFitnessProgress: \"Monitor and record fitness activities and progress. Parameters: userId (string), activityData (object)\"</li> <li>provideNutritionAdvice: \"Provide dietary recommendations and meal plans. Parameters: userId (string), dietaryPreferences (string)\"</li> <li>monitorHealthMetrics: \"Track vital health metrics and send alerts for any anomalies. Parameters: userId (string), healthData (object)\"</li> <li>sendMotivationalReminders: \"Send motivational messages and reminders to keep users engaged. Parameters: userId (string), message (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-driven-job-search-and-recruitment-platforms","title":"AI-Agent Driven Job Search and Recruitment Platforms","text":"<ul> <li>recommendJobs: \"Suggest job listings based on user profile and preferences. Parameters: userId (string), jobPreferences (array of strings)\"</li> <li>trackApplications: \"Monitor the status of job applications and send updates. Parameters: applicationId (string)\"</li> <li>assistResumeBuilding: \"Help in creating and optimizing resumes and cover letters. Parameters: userId (string), resumeData (object)\"</li> <li>prepareForInterviews: \"Provide tips and mock interview sessions to prepare users. Parameters: userId (string), interviewType (string)\"</li> <li>suggestNetworkingOpportunities: \"Recommend networking events and professional connections. Parameters: userId (string), industry (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#real-estate-services-enhanced-by-ai-agent-interactions","title":"Real Estate Services Enhanced by AI-Agent Interactions","text":"<ul> <li>searchProperties: \"Find and compare properties based on user criteria. Parameters: location (string), propertyType (string), priceRange (string)\"</li> <li>scheduleViewings: \"Arrange property viewings and send reminders. Parameters: propertyId (string), date (string), time (string)\"</li> <li>estimatePropertyPrices: \"Provide market value estimates for properties. Parameters: propertyId (string)\"</li> <li>manageDocuments: \"Assist in managing and reviewing real estate documents. Parameters: documentId (string)\"</li> <li>matchAgents: \"Recommend real estate agents based on user preferences. Parameters: userId (string), location (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-personal-finance-management-tools","title":"AI-Agent Powered Personal Finance Management Tools","text":"<ul> <li>trackBudget: \"Monitor and categorize expenses to help users stay within budget. Parameters: userId (string), budgetData (object)\"</li> <li>setSavingsGoals: \"Set and track progress towards savings goals. Parameters: userId (string), goalAmount (float)\"</li> <li>provideInvestmentAdvice: \"Offer personalized investment recommendations. Parameters: userId (string), investmentPreferences (string)\"</li> <li>sendBillReminders: \"Notify users of upcoming bills and due dates. Parameters: userId (string), billDetails (object)\"</li> <li>analyzeExpenses: \"Analyze spending patterns and suggest ways to save money. Parameters: userId (string), expenseData (object)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-based-entertainment-and-media-recommendations","title":"AI-Agent Based Entertainment and Media Recommendations","text":"<ul> <li>recommendContent: \"Suggest movies, TV shows, music, and books based on user preferences. Parameters: userId (string), contentType (string)\"</li> <li>highlightTrendingContent: \"Show trending and popular content in various categories. Parameters: contentType (string)\"</li> <li>createPersonalizedPlaylists: \"Generate and manage personalized playlists for music and videos. Parameters: userId (string), contentType (string)\"</li> <li>notifyNewReleases: \"Alert users of new releases and upcoming content. Parameters: userId (string), contentType (string)\"</li> <li>provideContentReviews: \"Offer reviews and ratings for various entertainment options. Parameters: contentId (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-enabled-event-planning-and-management-platforms","title":"AI-Agent Enabled Event Planning and Management Platforms","text":"<ul> <li>discoverEvents: \"Find and suggest events based on user interests. Parameters: userId (string), eventType (string)\"</li> <li>bookTickets: \"Facilitate ticket booking and payment for events. Parameters: eventId (string), ticketType (string)\"</li> <li>manageEventSchedule: \"Organize and manage event schedules. Parameters: userId (string), eventDetails (object)\"</li> <li>sendInvitations: \"Send and track invitations to events. Parameters: eventId (string), invitees (array of strings)\"</li> <li>remindEvent: \"Notify users of upcoming events and any changes. Parameters: userId (string), eventId (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-marketplace-for-freelance-services","title":"AI-Agent Powered Marketplace for Freelance Services","text":"<ul> <li>searchFreelancers: \"Find and compare freelance services based on user needs. Parameters: serviceType (string), location (string, optional)\"</li> <li>hireFreelancer: \"Facilitate hiring and contract management for freelancers. Parameters: freelancerId (string), projectDetails (object)\"</li> <li>trackProjectProgress: \"Monitor project progress and deliverables. Parameters: projectId (string)\"</li> <li>processPayments: \"Handle payments and invoicing for freelance services. Parameters: projectId (string), amount (float)\"</li> <li>collectReviews: \"Gather and display reviews and ratings for freelancers. Parameters: freelancerId (string), review (string), rating (integer)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-driven-supply-chain-and-logistics-management","title":"AI-Agent Driven Supply Chain and Logistics Management","text":"<ul> <li>trackShipment: \"Monitor the status and location of shipments in real-time. Parameters: shipmentId (string)\"</li> <li>manageInventory: \"Oversee inventory levels and send alerts for restocking. Parameters: warehouseId (string), productId (string)\"</li> <li>processOrders: \"Automate order processing and fulfillment. Parameters: orderId (string)\"</li> <li>evaluateSuppliers: \"Track and evaluate supplier performance. Parameters: supplierId (string)\"</li> <li>optimizeLogistics: \"Provide recommendations for optimizing logistics and reducing costs. Parameters: logisticsData (object)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-enabled-customer-feedback-and-survey-systems","title":"AI-Agent Enabled Customer Feedback and Survey Systems","text":"<ul> <li>createSurvey: \"Design and distribute customer surveys. Parameters: surveyDetails (object)\"</li> <li>collectFeedback: \"Gather and analyze feedback from customers. Parameters: surveyId (string), customerId (string)\"</li> <li>analyzeSentiment: \"Analyze customer feedback for sentiment and trends. Parameters: feedbackData (object)\"</li> <li>generateReport: \"Produce detailed reports on survey results. Parameters: surveyId (string)\"</li> <li>recommendActions: \"Suggest follow-up actions based on survey findings. Parameters: surveyId (string), recommendations (array of strings)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-product-recommendation-engines","title":"AI-Agent Powered Product Recommendation Engines","text":"<ul> <li>personalizedSuggestions: \"Provide personalized product recommendations based on user behavior. Parameters: userId (string), preferences (array of strings)\"</li> <li>relatedProducts: \"Suggest related products based on current user selections. Parameters: productId (string)\"</li> <li>highlightBestSellers: \"Show best-selling products in various categories. Parameters: category (string)\"</li> <li>displayUserReviews: \"Show user reviews and ratings for products. Parameters: productId (string)\"</li> <li>compareProducts: \"Allow users to compare similar products side-by-side. Parameters: productIds (array of strings)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-based-security-and-surveillance-systems","title":"AI-Agent Based Security and Surveillance Systems","text":"<ul> <li>monitorPremises: \"Continuously monitor premises using connected cameras and sensors. Parameters: cameraId (string), schedule (string)\"</li> <li>alertIntrusion: \"Send real-time alerts in case of any detected intrusion or suspicious activity. Parameters: sensorId (string), alertType (string)\"</li> <li>controlAccess: \"Manage and control access to secured areas. Parameters: accessPointId (string), command (string)\"</li> <li>reportIncidents: \"Generate reports on security incidents and actions taken. Parameters: incidentId (string), reportDetails (object)\"</li> <li>remoteControlSecurity: \"Allow remote control of security systems via AI agents. Parameters: systemId (string), command (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-driven-marketing-and-advertising-platforms","title":"AI-Agent Driven Marketing and Advertising Platforms","text":"<ul> <li>manageAdCampaigns: \"Create, manage, and optimize ad campaigns. Parameters: campaignDetails (object), budget (float)\"</li> <li>targetAudience: \"Identify and target specific audience segments for marketing. Parameters: audienceCriteria (object)\"</li> <li>analyzeAdPerformance: \"Provide detailed analytics on ad campaign performance. Parameters: campaignId (string)\"</li> <li>createMarketingContent: \"Assist in creating marketing content and advertisements. Parameters: contentDetails (object)\"</li> <li>manageMarketingBudget: \"Track and manage marketing budgets and expenditures. Parameters: budgetDetails (object)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-enabled-restaurant-reservation-systems","title":"AI-Agent Enabled Restaurant Reservation Systems","text":"<ul> <li>searchRestaurants: \"Find restaurants based on user preferences and location. Parameters: location (string), cuisineType (string, optional)\"</li> <li>bookTable: \"Facilitate table bookings at chosen restaurants. Parameters: restaurantId (string), date (string), time (string), partySize (integer)\"</li> <li>recommendMenuItems: \"Suggest menu items based on user tastes and dietary preferences. Parameters: restaurantId (string), dietaryPreferences (string)\"</li> <li>handleSpecialRequests: \"Manage special requests like dietary restrictions or seating preferences. Parameters: bookingId (string), specialRequest (string)\"</li> <li>sendReservationReminders: \"Notify users of upcoming reservations. Parameters: bookingId (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-personal-shopping-assistants","title":"AI-Agent Powered Personal Shopping Assistants","text":"<ul> <li>manageShoppingList: \"Create and manage shopping lists for users. Parameters: userId (string), listItems (array of strings)\"</li> <li>searchForProducts: \"Find products based on user preferences and needs. Parameters: query (string), category (string, optional)\"</li> <li>notifyPriceDrops: \"Notify users of price drops or special deals on desired items. Parameters: productId (string)\"</li> <li>placeOrder: \"Place orders on behalf of users with preferred retailers. Parameters: retailerId (string), orderDetails (object)\"</li> <li>trackDeliveries: \"Monitor and provide updates on the delivery status of orders. Parameters: orderId (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-driven-transportation-and-ride-hailing-services","title":"AI-Agent Driven Transportation and Ride-Hailing Services","text":"<ul> <li>bookRide: \"Schedule rides with ride-hailing services. Parameters: pickupLocation (string), destination (string), rideType (string)\"</li> <li>optimizeRoute: \"Provide optimized routes for travel. Parameters: currentLocation (string), destination (string)\"</li> <li>estimateFare: \"Estimate fares for different ride options. Parameters: pickupLocation (string), destination (string)\"</li> <li>trackVehicle: \"Monitor the real-time location of booked vehicles. Parameters: bookingId (string)\"</li> <li>manageSharedRides: \"Suggest and manage shared ride options to reduce costs. Parameters: pickupLocation (string), destination (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-enabled-environmental-monitoring-and-management-systems","title":"AI-Agent Enabled Environmental Monitoring and Management Systems","text":"<ul> <li>monitorAirQuality: \"Track and report air quality levels in real-time. Parameters: location (string), pollutantType (string, optional)\"</li> <li>analyzeWaterQuality: \"Monitor and analyze water quality data. Parameters: location (string), sampleData (object)\"</li> <li>optimizeWasteManagement: \"Optimize waste collection and disposal processes. Parameters: location (string), wasteType (string)\"</li> <li>trackEnergyConsumption: \"Track and analyze energy usage patterns. Parameters: location (string), energyData (object)\"</li> <li>sendEnvironmentalAlerts: \"Notify users of any detected environmental hazards or changes. Parameters: alertType (string), location (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-community-management-platforms","title":"AI-Agent Powered Community Management Platforms","text":"<ul> <li>coordinateEvents: \"Organize and promote community events. Parameters: eventDetails (object)\"</li> <li>maintainMemberDirectory: \"Manage a directory of community members. Parameters: communityId (string)\"</li> <li>facilitateDiscussions: \"Facilitate community discussions and forums. Parameters: topic (string), message (string)\"</li> <li>manageResources: \"Manage and share community resources. Parameters: resourceId (string), details (object)\"</li> <li>sendCommunityUpdates: \"Send updates and announcements to community members. Parameters: communityId (string), message (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-driven-financial-market-analysis-tools","title":"AI-Agent Driven Financial Market Analysis Tools","text":"<ul> <li>analyzeMarketTrends: \"Analyze and report on market trends and patterns. Parameters: marketType (string), timePeriod (string)\"</li> <li>recommendStocks: \"Provide personalized stock recommendations based on user preferences. Parameters: userId (string), riskTolerance (string)\"</li> <li>managePortfolio: \"Assist in managing and optimizing investment portfolios. Parameters: userId (string), portfolioDetails (object)\"</li> <li>evaluateInvestmentRisks: \"Evaluate and report on investment risks. Parameters: investmentId (string), riskFactors (array of strings)\"</li> <li>sendMarketNewsAlerts: \"Notify users of market news and events that could impact investments. Parameters: marketType (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-enabled-language-translation-and-localization-services","title":"AI-Agent Enabled Language Translation and Localization Services","text":"<ul> <li>translateText: \"Translate text between different languages. Parameters: text (string), sourceLanguage (string), targetLanguage (string)\"</li> <li>provideVoiceTranslation: \"Offer real-time voice translation for conversations. Parameters: sourceLanguage (string), targetLanguage (string)\"</li> <li>localizeDocuments: \"Adapt documents for different regions and cultures. Parameters: documentId (string), targetLocale (string)\"</li> <li>adaptContent: \"Modify content to suit cultural nuances and preferences. Parameters: contentId (string), targetLocale (string)\"</li> <li>assistLanguageLearning: \"Help users learn new languages with personalized lessons. Parameters: userId (string), language (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-virtual-travel-and-tourism-guides","title":"AI-Agent Powered Virtual Travel and Tourism Guides","text":"<ul> <li>provideVirtualTours: \"Offer virtual tours of tourist attractions. Parameters: location (string), tourType (string)\"</li> <li>createTravelItineraries: \"Generate personalized travel itineraries. Parameters: userId (string), destinations (array of strings)\"</li> <li>recommendLocalAttractions: \"Suggest local attractions, restaurants, and activities. Parameters: location (string), interests (array of strings)\"</li> <li>offerLanguageAssistance: \"Provide translation and language assistance for travelers. Parameters: sourceLanguage (string), targetLanguage (string)\"</li> <li>sendTravelAlerts: \"Notify users of travel advisories and updates. Parameters: location (string), alertType (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-driven-smart-city-infrastructure-management","title":"AI-Agent Driven Smart City Infrastructure Management","text":"<ul> <li>manageTrafficFlow: \"Monitor and optimize traffic flow in real-time. Parameters: location (string), trafficData (object)\"</li> <li>overseePublicServices: \"Manage public services such as waste collection and water supply. Parameters: serviceType (string), location (string)\"</li> <li>optimizeEnergyUsage: \"Track and optimize energy usage across the city. Parameters: location (string), energyData (object)\"</li> <li>monitorCitySecurity: \"Provide city-wide security monitoring and incident reporting. Parameters: location (string), securityData (object)\"</li> <li>facilitateCitizenEngagement: \"Enable communication between city officials and citizens. Parameters: topic (string), message (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-enabled-human-resource-management-systems","title":"AI-Agent Enabled Human Resource Management Systems","text":"<ul> <li>assistRecruitment: \"Help in screening and recruiting candidates. Parameters: jobId (string), candidateDetails (object)\"</li> <li>manageOnboarding: \"Oversee the onboarding process for new employees. Parameters: employeeId (string), onboardingDetails (object)\"</li> <li>trackPerformance: \"Monitor and evaluate employee performance. Parameters: employeeId (string), metrics (array of strings)\"</li> <li>recommendTrainingPrograms: \"Suggest training programs for employees. Parameters: employeeId (string), trainingNeeds (array of strings)\"</li> <li>handleLeaveRequests: \"Manage employee leave requests and approvals. Parameters: employeeId (string), leaveType (string), startDate (string), endDate (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-energy-management-and-optimization-platforms","title":"AI-Agent Powered Energy Management and Optimization Platforms","text":"<ul> <li>monitorEnergyConsumption: \"Track and analyze energy consumption patterns. Parameters: location (string), energyData (object)\"</li> <li>recommendCostReduction: \"Provide recommendations for reducing energy costs. Parameters: location (string), usagePatterns (object)\"</li> <li>integrateRenewableEnergy: \"Manage the integration of renewable energy sources. Parameters: energySource (string), capacity (float)\"</li> <li>sendRealTimeAlerts: \"Notify users of any anomalies in energy usage. Parameters: location (string), alertType (string)\"</li> <li>generateEfficiencyReports: \"Produce reports on energy efficiency and usage trends. Parameters: location (string), reportType (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-driven-personalized-learning-assistants","title":"AI-Agent Driven Personalized Learning Assistants","text":"<ul> <li>createLearningPathways: \"Generate personalized learning pathways based on user goals. Parameters: userId (string), learningGoals (array of strings)\"</li> <li>monitorLearningProgress: \"Track and report on learning progress. Parameters: userId (string), courseId (string)\"</li> <li>recommendLearningResources: \"Suggest learning resources and materials. Parameters: userId (string), interests (array of strings)\"</li> <li>provideInteractiveQuizzes: \"Offer interactive quizzes and assessments. Parameters: userId (string), courseId (string)\"</li> <li>sendStudyReminders: \"Notify users of study sessions and upcoming assessments. Parameters: userId (string), reminderType (string)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-enabled-telemedicine-and-remote-healthcare-services","title":"AI-Agent Enabled Telemedicine and Remote Healthcare Services","text":"<ul> <li>scheduleVirtualConsultations: \"Book and manage virtual consultations with healthcare providers. Parameters: providerId (string), date (string), time (string)\"</li> <li>monitorSymptoms: \"Track and report symptoms to healthcare providers. Parameters: userId (string), symptoms (array of strings)\"</li> <li>managePrescriptionsRemotely: \"Handle prescription refills and renewals. Parameters: userId (string), prescriptionId (string)\"</li> <li>accessHealthRecords: \"Provide access to personal health records. Parameters: userId (string)\"</li> <li>offerWellnessTips: \"Send personalized wellness and preventive care tips. Parameters: userId (string), wellnessGoals (array of strings)\"</li> </ul>"},{"location":"specification/additional/intent_examples/#ai-agent-powered-automated-legal-document-generation","title":"AI-Agent Powered Automated Legal Document Generation","text":"<ul> <li>draftContracts: \"Automatically draft contracts based on user input. Parameters: userId (string), contractDetails (object)\"</li> <li>reviewLegalDocuments: \"Analyze and suggest improvements to legal documents. Parameters: documentId (string)\"</li> <li>ensureCompliance: \"Check documents for compliance with relevant regulations. Parameters: documentId (string), regulations (array of strings)\"</li> <li>manageDocumentTemplates: \"Customize and manage legal document templates. Parameters: templateId (string)\"</li> <li>facilitateESignatures: \"Enable electronic signatures for legal documents. Parameters: documentId (string)\"</li> </ul>"},{"location":"specification/additional/presentation/","title":"UIM Protocol Presentations","text":"<ul> <li>UIM PROTOCOL . Bridging the gap between AI agents and web services</li> </ul>"},{"location":"specification/additional/rfc-compliance-analysis/","title":"RFC Compliance Analysis for UIM Protocol Specification","text":"<p>This document analyzes the compliance of the UIM Protocol Specification with RFC standards and guidelines, particularly focusing on RFC 2360 (Guide for Internet Standards Writers), RFC 2223 (Instructions to RFC Authors), and the RFC Editor's reviewer guide.</p>"},{"location":"specification/additional/rfc-compliance-analysis/#1-document-structure-compliance","title":"1. Document Structure Compliance","text":""},{"location":"specification/additional/rfc-compliance-analysis/#11-header-and-footer-information","title":"1.1 Header and Footer Information","text":"Requirement Status Notes Document header format \u2705 Compliant Includes Working Group, Author, Category, Date Status of Memo section \u2705 Compliant Updated to follow current Internet-Draft format Copyright Notice \u2705 Compliant Updated to IETF Trust copyright notice Abstract \u2705 Compliant Concise, informative, under 20 lines Table of Contents \u2705 Compliant Comprehensive, with page numbers"},{"location":"specification/additional/rfc-compliance-analysis/#12-section-organization","title":"1.2 Section Organization","text":"Requirement Status Notes Introduction section \u2705 Compliant Includes problem statement and terminology Requirements Language \u2705 Compliant Properly defines normative terms Main body organization \u2705 Compliant Logical progression of topics Security Considerations \u2705 Compliant Comprehensive section with detailed analysis IANA Considerations \u2705 Compliant Properly formatted with required details References section \u2705 Compliant Split into Normative and Informative Appendices \u2705 Compliant Well-structured with examples and additional information Authors' Addresses \u2705 Compliant Complete contact information"},{"location":"specification/additional/rfc-compliance-analysis/#2-content-quality-and-clarity","title":"2. Content Quality and Clarity","text":""},{"location":"specification/additional/rfc-compliance-analysis/#21-technical-content","title":"2.1 Technical Content","text":"Requirement Status Notes Technical accuracy \u2705 Compliant Protocol details are technically sound Completeness \u2705 Compliant All aspects of the protocol are covered Consistency \u2705 Compliant Terminology and concepts used consistently Implementation guidance \u2705 Compliant Includes detailed implementation notes"},{"location":"specification/additional/rfc-compliance-analysis/#22-language-and-clarity","title":"2.2 Language and Clarity","text":"Requirement Status Notes Clear language \u2705 Compliant Avoids ambiguity and jargon Proper use of RFC 2119 terms \u2705 Compliant MUST, SHOULD, MAY used appropriately Conciseness \u2705 Compliant Information presented efficiently Readability \u2705 Compliant Well-structured sentences and paragraphs"},{"location":"specification/additional/rfc-compliance-analysis/#3-formatting-and-presentation","title":"3. Formatting and Presentation","text":""},{"location":"specification/additional/rfc-compliance-analysis/#31-text-formatting","title":"3.1 Text Formatting","text":"Requirement Status Notes Line length \u2705 Compliant Kept within 72 characters Page breaks \u2705 Compliant Appropriate page breaks between sections Section numbering \u2705 Compliant Hierarchical and consistent References format \u2705 Compliant Follows RFC citation format"},{"location":"specification/additional/rfc-compliance-analysis/#32-figures-and-examples","title":"3.2 Figures and Examples","text":"Requirement Status Notes ASCII art diagrams \u2705 Compliant Sequence diagrams use ASCII format Example formatting \u2705 Compliant Code examples properly indented Table formatting \u2705 Compliant Tables use ASCII format with clear alignment"},{"location":"specification/additional/rfc-compliance-analysis/#4-protocol-specification-requirements","title":"4. Protocol Specification Requirements","text":""},{"location":"specification/additional/rfc-compliance-analysis/#41-protocol-design","title":"4.1 Protocol Design","text":"Requirement Status Notes Clear problem statement \u2705 Compliant Section 1.1 clearly defines the problem Protocol overview \u2705 Compliant Section 2 provides comprehensive overview Message formats \u2705 Compliant Section 6 details all message formats State machines \u2705 Compliant Protocol operation flow clearly defined Error handling \u2705 Compliant Error cases and recovery procedures specified"},{"location":"specification/additional/rfc-compliance-analysis/#42-security-analysis","title":"4.2 Security Analysis","text":"Requirement Status Notes Threat model \u2705 Compliant Section 7.1 identifies attack vectors Countermeasures \u2705 Compliant Detailed countermeasures for each threat Implementation guidance \u2705 Compliant Section 7.3 covers implementation vulnerabilities Operational considerations \u2705 Compliant Section 7.4 addresses operational security"},{"location":"specification/additional/rfc-compliance-analysis/#5-improvements-made-to-original-draft","title":"5. Improvements Made to Original Draft","text":""},{"location":"specification/additional/rfc-compliance-analysis/#51-structure-improvements","title":"5.1 Structure Improvements","text":"<ol> <li>Status of Memo: Updated to follow current Internet-Draft format</li> <li>Copyright Notice: Updated to current IETF Trust copyright notice</li> <li>Document Header: Added document expiration date and GitHub repository link</li> <li>Section Organization: Improved logical flow between sections</li> </ol>"},{"location":"specification/additional/rfc-compliance-analysis/#52-content-improvements","title":"5.2 Content Improvements","text":"<ol> <li>Security Considerations: Expanded with detailed threat analysis and countermeasures</li> <li>Implementation Vulnerabilities: Added section on common implementation pitfalls</li> <li>Protocol Management: Added MIB definition for protocol management</li> <li>Media Types: Added detailed registration information for media types</li> <li>Sequence Diagrams: Added ASCII sequence diagrams for protocol operation examples</li> </ol>"},{"location":"specification/additional/rfc-compliance-analysis/#53-formatting-improvements","title":"5.3 Formatting Improvements","text":"<ol> <li>Line Length: Adjusted to maintain 72-character limit</li> <li>Section Numbering: Standardized to follow RFC format</li> <li>References: Split into Normative and Informative sections</li> <li>Page Numbers: Added to Table of Contents</li> </ol>"},{"location":"specification/additional/rfc-compliance-analysis/#6-conclusion","title":"6. Conclusion","text":"<p>The UIM Protocol Specification now conforms to RFC document standards and guidelines. The document structure, content quality, formatting, and protocol specification all meet the requirements outlined in RFC 2360, RFC 2223, and the RFC Editor's reviewer guide.</p> <p>The specification provides a clear, comprehensive, and technically sound description of the UIM Protocol, suitable for publication as an Internet-Draft and eventual consideration as an Internet Standard.</p>"},{"location":"specification/additional/rfc-compliance-summary/","title":"RFC Compliance Summary for UIM Protocol Specification","text":"<p>This document provides a concise summary of the UIM Protocol Specification's compliance with RFC standards and guidelines.</p>"},{"location":"specification/additional/rfc-compliance-summary/#key-compliance-areas","title":"Key Compliance Areas","text":""},{"location":"specification/additional/rfc-compliance-summary/#document-structure","title":"Document Structure","text":"<p>\u2705 Fully Compliant</p> <p>The UIM Protocol Specification follows the required RFC document structure, including: - Proper header and footer information - Standard sections (Introduction, Security Considerations, IANA Considerations, etc.) - Correct formatting for references and appendices - Appropriate use of page numbers and section numbering</p>"},{"location":"specification/additional/rfc-compliance-summary/#technical-content","title":"Technical Content","text":"<p>\u2705 Fully Compliant</p> <p>The specification provides: - Clear problem statement and protocol overview - Detailed message formats and protocol operation - Comprehensive security analysis - Complete implementation guidance - Thorough error handling procedures</p>"},{"location":"specification/additional/rfc-compliance-summary/#language-and-formatting","title":"Language and Formatting","text":"<p>\u2705 Fully Compliant</p> <p>The document adheres to RFC language and formatting requirements: - Proper use of RFC 2119 terminology (MUST, SHOULD, MAY) - Line length within 72 characters - ASCII art for diagrams and tables - Clear, unambiguous language - Consistent terminology throughout</p>"},{"location":"specification/additional/rfc-compliance-summary/#major-improvements","title":"Major Improvements","text":"<p>The following significant improvements were made to ensure RFC compliance:</p> <ol> <li>Updated Document Framework</li> <li>Modernized Status of Memo section</li> <li>Updated copyright notice to current IETF Trust format</li> <li> <p>Added proper document expiration date</p> </li> <li> <p>Enhanced Security Section</p> </li> <li>Added detailed threat model</li> <li>Expanded countermeasures for each identified threat</li> <li>Added implementation vulnerability guidance</li> <li> <p>Included operational security considerations</p> </li> <li> <p>Improved Technical Details</p> </li> <li>Added Management Information Base (MIB) definition</li> <li>Enhanced media type registration information</li> <li>Added sequence diagrams for protocol operations</li> <li> <p>Expanded error handling examples</p> </li> <li> <p>Formatting Standardization</p> </li> <li>Standardized section numbering</li> <li>Split references into Normative and Informative</li> <li>Improved table and figure formatting</li> <li>Ensured consistent indentation and spacing</li> </ol>"},{"location":"specification/additional/rfc-compliance-summary/#conclusion","title":"Conclusion","text":"<p>The UIM Protocol Specification now fully complies with the requirements outlined in: - RFC 2360 (Guide for Internet Standards Writers) - RFC 2223 (Instructions to RFC Authors) - RFC Editor's reviewer guide</p> <p>The document is suitable for submission as an Internet-Draft and provides a solid foundation for the standardization process.</p>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/","title":"How the UIM Protocol Safeguards Right Holders Under the EU Text and Data Mining Regulation","text":""},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#introduction","title":"Introduction","text":"<p>The Unified Intent Mediator (UIM) protocol establishes a standardized framework for AI agents to interact with web services through well-defined intents, metadata, and execution methods. A crucial aspect of this interaction is ensuring that the rights of content owners (right holders) are protected, especially in the context of Text and Data Mining (TDM) activities.</p> <p>The EU Directive on Copyright in the Digital Single Market (Directive (EU) 2019/790), specifically Articles 3 and 4, addresses TDM and sets out provisions to balance the interests of right holders with the needs of entities engaging in TDM. Understanding how the UIM protocol aligns with these regulations is essential for both service providers and AI agents operating within the EU.</p>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#overview-of-the-eu-tdm-regulation-articles-3-and-4","title":"Overview of the EU TDM Regulation (Articles 3 and 4)","text":""},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#article-3-tdm-for-scientific-research","title":"Article 3: TDM for Scientific Research","text":"<ul> <li>Scope: Provides an exception allowing research organizations and cultural heritage institutions to perform TDM on works to which they have lawful access, without requiring additional permission from right holders.</li> <li>Purpose: Facilitates scientific research by reducing barriers to accessing and analyzing large datasets.</li> </ul>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#article-4-tdm-for-any-purpose","title":"Article 4: TDM for Any Purpose","text":"<ul> <li>Scope: Allows any individual or entity to perform TDM on works they have lawful access to.</li> <li>Right Holder's Opt-Out: Right holders can reserve their rights to prevent TDM activities by expressing this in an appropriate manner, such as through machine-readable metadata or terms of service.</li> <li>Obligation: Entities performing TDM must respect these reservations and obtain necessary permissions when rights are reserved.</li> </ul>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#safeguarding-right-holders-with-the-uim-protocol","title":"Safeguarding Right Holders with the UIM Protocol","text":"<p>The UIM protocol incorporates several features that align with the EU TDM regulation, enabling right holders to safeguard their interests effectively.</p>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#1-policy-definition-and-management-through-odrl-integration","title":"1. Policy Definition and Management through ODRL Integration","text":"<ul> <li>Use of ODRL: The UIM protocol leverages the Open Digital Rights Language (ODRL) to define and manage permissions, prohibitions, and obligations associated with intents and the data they provide.</li> <li>Expressing Rights Reservations: Right holders can specify detailed policies that include prohibitions on TDM activities, constraints on data usage, and conditions under which data can be accessed or processed.</li> </ul> <p>Corrected ODRL Policy Snippet Reserving TDM Rights:</p> <pre><code>{\n  \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n  \"@type\": \"Policy\",\n  \"@id\": \"http://example.com/policy/tdm-restriction\",\n  \"profile\": \"http://uimprotocol.com/uim/odrl-profile\",\n  \"prohibition\": [\n    {\n      \"assignee\": [\n        {\n          \"uid\": \"http://www.w3.org/ns/odrl/2/Party#Public\",\n          \"role\": \"assignee\"\n        }\n      ],\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": [\n        {\n          \"id\": \"http://uimprotocol.com/uim/odrl/action#analyze\"\n        }\n      ]\n    }\n  ],\n  \"permission\": [\n    {\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": [\n        {\n          \"id\": \"use\"\n        }\n      ],\n      \"constraint\": [\n        {\n          \"leftOperand\": \"purpose\",\n          \"operator\": \"neq\",\n          \"rightOperand\": \"http://uimprotocol.com/uim/odrl/purpose#textDataMining\"\n        }\n      ]\n    }\n  ],\n  \"agreement\": \"TDM activities are prohibited unless explicit permission is granted.\"\n}\n</code></pre>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#2-policy-adherence-tokens-pats","title":"2. Policy Adherence Tokens (PATs)","text":"<ul> <li>Enforcing Compliance: AI agents must obtain a Policy Adherence Token (PAT) before executing intents.</li> <li>Agreement to Policies: During the PAT issuance process, agents agree to the ODRL policies defined by the right holder.</li> <li>Verification: Web services verify PATs with each request, ensuring that only compliant agents can access and use the data.</li> </ul>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#3-explicit-consent-and-permissions","title":"3. Explicit Consent and Permissions","text":"<ul> <li>Granular Control: Right holders can specify conditions under which TDM may be allowed, such as for certain users or purposes, by defining permissions in ODRL policies.</li> <li>Dynamic Policies: Policies can be updated to reflect changes in rights reservations, and agents must obtain new PATs accordingly.</li> </ul>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#4-machine-readable-metadata","title":"4. Machine-Readable Metadata","text":"<ul> <li>Accessibility: Policies are provided in machine-readable formats (JSON-LD with ODRL context), satisfying the requirement for right holders to express rights reservations appropriately.</li> <li>Discoverability: AI agents can easily discover these policies via the <code>uim-policy-file</code> link provided in the <code>agents.json</code> file or DNS TXT records.</li> </ul>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#5-compliance-with-legal-obligations","title":"5. Compliance with Legal Obligations","text":"<ul> <li>Alignment with Article 4: By requiring agents to adhere to policies that may include TDM prohibitions, the UIM protocol ensures that right holders' reservations are respected.</li> <li>Enforcement Mechanisms: If an agent violates the policy (e.g., performs TDM without permission), the service can revoke access, and legal actions can be pursued based on the agreed terms.</li> </ul>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#handling-tdm-exceptions-for-scientific-research-article-3","title":"Handling TDM Exceptions for Scientific Research (Article 3)","text":"<ul> <li>Special Permissions: Right holders can include exceptions in their policies to allow TDM for scientific research by recognized organizations.</li> <li>Verification of Eligibility: The PAT issuance process can involve verifying the agent's eligibility (e.g., confirming that it represents a research institution).</li> <li>Custom Policies: Separate policies can be defined for different categories of users, granting permissions where legally required.</li> </ul> <p>Corrected ODRL Policy Allowing TDM for Research:</p> <pre><code>{\n  \"@context\": \"http://www.w3.org/ns/odrl.jsonld\",\n  \"@type\": \"Policy\",\n  \"@id\": \"http://example.com/policy/tdm-research\",\n  \"profile\": \"http://uimprotocol.com/uim/odrl-profile\",\n  \"permission\": [\n    {\n      \"assignee\": [\n        {\n          \"uid\": \"http://example.org/party#ResearchInstitution\",\n          \"role\": \"assignee\"\n        }\n      ],\n      \"target\": \"http://example.com/api/intents\",\n      \"action\": [\n        {\n          \"id\": \"http://uimprotocol.com/uim/odrl/action#analyze\"\n        }\n      ],\n      \"constraint\": [\n        {\n          \"leftOperand\": \"purpose\",\n          \"operator\": \"eq\",\n          \"rightOperand\": \"http://uimprotocol.com/uim/odrl/purpose#scientificResearch\"\n        }\n      ]\n    }\n  ],\n  \"duty\": [\n    {\n      \"assignee\": [\n        {\n          \"uid\": \"http://example.org/party#ResearchInstitution\",\n          \"role\": \"assignee\"\n        }\n      ],\n      \"action\": [\n        {\n          \"id\": \"attribution\"\n        }\n      ]\n    }\n  ],\n  \"agreement\": \"TDM is permitted for scientific research by recognized institutions.\"\n}\n</code></pre> <p>Explanation of Corrections:</p> <ul> <li>Assignee: Defined as an object with <code>\"uid\"</code> and <code>\"role\"</code>.</li> <li>Action: Custom action <code>analyze</code> is properly namespaced.</li> <li>Constraint: Specifies the purpose as <code>scientificResearch</code> using a custom term.</li> <li>Duty: Correctly structured to include the <code>attribution</code> action.</li> <li>Policy Structure: Ensured compliance with ODRL syntax and semantics.</li> </ul>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#summary-of-safeguards-provided-by-the-uim-protocol","title":"Summary of Safeguards Provided by the UIM Protocol","text":"<ol> <li> <p>Rights Reservation Expression: Right holders can explicitly reserve their rights regarding TDM in a machine-readable format.</p> </li> <li> <p>Mandatory Policy Agreement: AI agents are required to agree to the right holder's policies before accessing services, ensuring awareness and compliance.</p> </li> <li> <p>Access Control via PATs: The use of PATs allows services to control access and ensure that only authorized agents can perform actions, in line with the policies.</p> </li> <li> <p>Dynamic Policy Enforcement: Right holders can update policies as needed, and agents must obtain new PATs, allowing adaptability to changing legal or business requirements.</p> </li> <li> <p>Transparency and Accountability: The protocol facilitates auditing and tracking of agent activities, providing mechanisms to address non-compliance.</p> </li> <li> <p>Support for Legal Exceptions: The UIM protocol can accommodate exceptions (e.g., for scientific research), aligning with Article 3 provisions.</p> </li> </ol>"},{"location":"specification/additional/uim-compliance-with-eu-tdm-regulation/#conclusion","title":"Conclusion","text":"<p>The UIM protocol provides a robust framework that empowers right holders to safeguard their rights in accordance with the EU TDM regulation. By leveraging ODRL for policy expression and enforcing compliance through PATs, the protocol ensures that:</p> <ul> <li>Right holders can reserve their rights concerning TDM activities.</li> <li>AI agents are obligated to comply with these reservations.</li> <li>Legal exceptions (such as for scientific research) are appropriately handled.</li> </ul> <p>This alignment with the EU TDM regulation not only protects right holders but also provides clarity and legal certainty for AI agents engaging in text and data mining activities, fostering a responsible and compliant ecosystem.</p> <p>References:</p> <ul> <li>EU Directive on Copyright in the Digital Single Market: Directive (EU) 2019/790</li> <li>ODRL Information Model 2.2: W3C Recommendation</li> <li>Kluwer Copyright Blog on TDM Articles 3 and 4: The New Copyright Directive: Text and Data Mining (Articles 3 and 4)</li> </ul> <p>Disclaimer: The corrected policies are provided as examples and may need further adaptation to meet specific legal and organizational requirements. It is advisable to consult legal experts when implementing policies with legal implications.</p>"},{"location":"specification/additional/uim-tdmrep-relation/","title":"How the UIM Protocol Relates to the TDMrep Specification","text":""},{"location":"specification/additional/uim-tdmrep-relation/#introduction","title":"Introduction","text":"<p>The Unified Intent Mediator (UIM) Protocol and the Text and Data Mining Reservation Protocol (TDMrep) both address the challenges of managing rights and permissions in the context of automated data access and processing. They aim to facilitate lawful and ethical use of digital content, particularly in relation to text and data mining (TDM) activities.</p> <p>This is an exploration of how the UIM Protocol relates to the TDMrep specification, highlighting their similarities, differences, and potential areas of integration or synergy.</p>"},{"location":"specification/additional/uim-tdmrep-relation/#overview-of-the-tdmrep-specification","title":"Overview of the TDMrep Specification","text":""},{"location":"specification/additional/uim-tdmrep-relation/#purpose-and-context","title":"Purpose and Context","text":"<p>The TDMrep (Text and Data Mining Reservation Protocol) is a specification developed by the W3C's TDM Reservation Protocol Community Group. It provides a standardized, machine-readable method for rights holders to express their reservations concerning the use of their content for text and data mining purposes, in compliance with the EU's Directive on Copyright in the Digital Single Market (Directive (EU) 2019/790), particularly Article 4(3).</p>"},{"location":"specification/additional/uim-tdmrep-relation/#key-features","title":"Key Features","text":"<ul> <li>Machine-Readable Rights Reservations: Allows rights holders to declare their reservation of rights for TDM activities in a way that can be automatically detected and respected by data miners.</li> <li>Multiple Implementation Methods:</li> <li>HTTP Headers: Rights reservations can be declared in HTTP response headers.</li> <li>HTML Meta Tags: Embedding rights reservations within HTML content using meta tags.</li> <li>Robots.txt Extensions: Utilizing the <code>robots.txt</code> file to include TDM-specific directives.</li> <li>Policy Specification: Provides a way to reference or include a TDM policy, which may offer information about licensing options or terms under which TDM is permitted.</li> <li>Granular Control: Rights holders can specify reservations at various levels, including entire domains, specific directories, or individual resources.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#compliance-with-eu-regulations","title":"Compliance with EU Regulations","text":"<p>The TDMrep specification is designed to meet the requirements of Article 4(3) of the EU Copyright Directive, which allows rights holders to opt out of the TDM exception for commercial purposes by expressing their reservations in an appropriate manner, such as machine-readable metadata.</p>"},{"location":"specification/additional/uim-tdmrep-relation/#overview-of-the-uim-protocol","title":"Overview of the UIM Protocol","text":""},{"location":"specification/additional/uim-tdmrep-relation/#purpose-and-context_1","title":"Purpose and Context","text":"<p>The Unified Intent Mediator (UIM) Protocol provides a standardized framework for AI agents to interact with web services through well-defined intents, metadata, and execution methods. It focuses on:</p> <ul> <li>Standardization: Offering consistent interfaces for AI agents and web services.</li> <li>Security and Compliance: Enforcing policies and permissions using machine-readable formats.</li> <li>Policy Enforcement: Using the Open Digital Rights Language (ODRL) to define permissions, prohibitions, and obligations associated with intents and the data provided by web services.</li> <li>Authentication and Authorization: Employing Policy Adherence Tokens (PATs) to ensure that only authorized agents can access services and that they agree to comply with the defined policies.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#key-features_1","title":"Key Features","text":"<ul> <li>Intent Definitions: Describes actions that AI agents can perform, including input/output parameters and execution endpoints.</li> <li>Service Metadata: Provides detailed information about the web service, including policies and compliance standards.</li> <li>Policy Integration: Uses ODRL policies to express rights, permissions, and obligations in a machine-readable format.</li> <li>Secure Interactions: Requires AI agents to authenticate and agree to policies before accessing resources.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#relationship-between-uim-protocol-and-tdmrep-specification","title":"Relationship Between UIM Protocol and TDMrep Specification","text":""},{"location":"specification/additional/uim-tdmrep-relation/#common-goals","title":"Common Goals","text":"<p>Both the UIM Protocol and the TDMrep specification aim to:</p> <ul> <li>Facilitate Legal Compliance: Ensure that automated systems respect the rights and reservations of content owners.</li> <li>Use Machine-Readable Formats: Employ standardized, machine-readable methods to express rights and permissions, enabling automated detection and compliance.</li> <li>Protect Rights Holders: Provide mechanisms for rights holders to control how their content is accessed and used by automated agents.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#differences-in-scope-and-approach","title":"Differences in Scope and Approach","text":"<ul> <li>Layer of Operation:</li> <li>TDMrep: Focuses on expressing rights reservations at the content level, primarily concerning the use of content for TDM activities.</li> <li> <p>UIM Protocol: Operates at the interaction layer between AI agents and web services, defining how agents should interact with services and enforce policies during these interactions.</p> </li> <li> <p>Policy Expression:</p> </li> <li>TDMrep: Uses methods like HTTP headers, HTML meta tags, and robots.txt to declare TDM reservations.</li> <li> <p>UIM Protocol: Uses ODRL policies embedded in service metadata to define a wide range of permissions, prohibitions, and obligations.</p> </li> <li> <p>Enforcement Mechanisms:</p> </li> <li>TDMrep: Relies on data miners to detect and respect rights reservations expressed in standard locations.</li> <li>UIM Protocol: Enforces policies through PATs, requiring agents to agree to policies before accessing services.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#potential-integration-and-synergy","title":"Potential Integration and Synergy","text":"<ol> <li> <p>Complementary Use of Machine-Readable Policies</p> </li> <li> <p>Integration of TDMrep Declarations in UIM Policies:</p> <ul> <li>The UIM Protocol's ODRL policies could reference or incorporate TDMrep declarations, ensuring that AI agents interacting via the UIM Protocol are aware of and comply with TDM reservations expressed through TDMrep.</li> <li>For example, an ODRL policy in the UIM Protocol could include a prohibition on TDM activities if a TDMrep reservation is detected.</li> </ul> </li> <li> <p>Unified Policy Enforcement</p> </li> <li> <p>Enhancing Compliance:</p> <ul> <li>By integrating TDMrep rights reservations into the UIM Protocol's policy framework, AI agents using the UIM Protocol would be required to respect TDM reservations as part of their policy adherence.</li> <li>This ensures a more robust enforcement mechanism compared to relying solely on agents voluntarily checking for TDMrep declarations.</li> </ul> </li> <li> <p>Standardization Efforts</p> </li> <li> <p>Alignment of Standards:</p> <ul> <li>Both initiatives could collaborate to align their standards, promoting broader adoption and simplifying compliance for AI agents and web services.</li> <li>For instance, the UIM Protocol could adopt or reference TDMrep methods for expressing TDM reservations, providing a consistent approach across different layers.</li> </ul> </li> <li> <p>Granular Control over Content Usage</p> </li> <li> <p>Fine-Grained Permissions:</p> <ul> <li>The UIM Protocol's use of ODRL allows for detailed policies, including constraints and conditions under which content may be used.</li> <li>Incorporating TDMrep's granularity in rights reservations can enhance the UIM Protocol's ability to respect rights at a more detailed level.</li> </ul> </li> <li> <p>Legal Compliance and Risk Mitigation</p> </li> <li> <p>Compliance with EU Regulations:</p> <ul> <li>By integrating TDMrep specifications, the UIM Protocol can help AI agents and web services comply with the EU's legal requirements concerning TDM activities.</li> <li>This reduces legal risks for both service providers and AI agents operating within the EU.</li> </ul> </li> </ol>"},{"location":"specification/additional/uim-tdmrep-relation/#practical-scenarios","title":"Practical Scenarios","text":""},{"location":"specification/additional/uim-tdmrep-relation/#scenario-1-ai-agent-accessing-web-content-via-uim-protocol","title":"Scenario 1: AI Agent Accessing Web Content via UIM Protocol","text":"<ul> <li>Context: An AI agent wishes to access data from a web service using the UIM Protocol.</li> <li>Action:</li> <li>The agent requests a PAT and agrees to the service's ODRL policies.</li> <li>The service's policy includes a clause referencing TDMrep reservations.</li> <li>Outcome:</li> <li>The agent is required to check for any TDMrep declarations before proceeding.</li> <li>If a TDM reservation is detected, the agent must comply by refraining from TDM activities or obtaining appropriate permissions.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#scenario-2-web-service-expressing-tdm-reservations","title":"Scenario 2: Web Service Expressing TDM Reservations","text":"<ul> <li>Context: A web service wants to prevent unauthorized TDM activities on its content.</li> <li>Action:</li> <li>Implements TDMrep declarations via HTTP headers and meta tags.</li> <li>Updates its UIM Protocol policies to include prohibitions on TDM activities, referencing the TDMrep declarations.</li> <li>Outcome:</li> <li>AI agents using the UIM Protocol are bound by the service's policies, which now explicitly prohibit TDM activities in accordance with the TDMrep reservations.</li> <li>Ensures consistent enforcement of rights reservations across both content-level and interaction-level policies.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#challenges-and-considerations","title":"Challenges and Considerations","text":""},{"location":"specification/additional/uim-tdmrep-relation/#ensuring-compliance-by-ai-agents","title":"Ensuring Compliance by AI Agents","text":"<ul> <li>Challenge:</li> <li>Agents may not be designed to detect or respect TDMrep declarations outside the UIM Protocol.</li> <li>Solution:</li> <li>The UIM Protocol can mandate that agents must check for TDMrep reservations as part of policy compliance.</li> <li>Provide guidelines or tools for agents to detect and interpret TDMrep declarations.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#complexity-of-implementation","title":"Complexity of Implementation","text":"<ul> <li>Challenge:</li> <li>Integrating multiple standards and specifications can increase the complexity for developers.</li> <li>Solution:</li> <li>Develop libraries or SDKs that abstract the complexity, providing seamless integration between UIM Protocol policies and TDMrep declarations.</li> <li>Adopting or referencing TDMrep methods in the UIM Protocol can simplify implementation.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#adoption-and-awareness","title":"Adoption and Awareness","text":"<ul> <li>Challenge:</li> <li>Widespread adoption of both the UIM Protocol and TDMrep is necessary for maximum effectiveness.</li> <li>Solution:</li> <li>Collaborative efforts to promote both standards, highlighting the benefits of integrated compliance and rights management.</li> </ul>"},{"location":"specification/additional/uim-tdmrep-relation/#conclusion","title":"Conclusion","text":"<p>The UIM Protocol and the TDMrep specification address complementary aspects of rights management in the context of AI and automated data processing:</p> <ul> <li>UIM Protocol: Focuses on standardizing AI agent interactions with web services and enforcing policies at the interaction layer.</li> <li>TDMrep: Provides a method for rights holders to express TDM reservations at the content level.</li> </ul> <p>Relationship and Integration:</p> <ul> <li>Integrating TDMrep declarations into UIM Protocol policies can enhance compliance and enforcement of rights reservations.</li> <li>AI agents using the UIM Protocol can be designed to respect both service-level policies and content-level TDM reservations.</li> <li>Collaborative standardization efforts can simplify implementation and promote broader adoption.</li> </ul> <p>By aligning the UIM Protocol with the TDMrep specification, stakeholders can achieve a more robust and comprehensive approach to rights management, ensuring that both service-level and content-level rights are respected in automated interactions and data processing activities.</p> <p>References:</p> <ul> <li>TDM Reservation Protocol (TDMrep)</li> </ul>"}]}